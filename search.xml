<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于异常处理，有话要say?</title>
      <link href="/2021/01/11/%E5%85%B3%E4%BA%8E%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%8C%E6%9C%89%E8%AF%9D%E8%A6%81say/"/>
      <url>/2021/01/11/%E5%85%B3%E4%BA%8E%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%8C%E6%9C%89%E8%AF%9D%E8%A6%81say/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>作为一名JAVA开发者，开发已经4年了, 不知道是自己太菜还是业务太复杂，一直没有把一个东西弄明白。<br>  那就是:<code>异常处理</code> — <code>事务回滚</code> — <code>用户状态响应</code>这三者之间der关系。</p></blockquote><h2 id="异常处理有话say"><a href="#异常处理有话say" class="headerlink" title="异常处理有话say"></a>异常处理有话say</h2><blockquote><p>异常处理通常有三种方式</p><ul><li><code>throws Exception</code></li><li><code>throw new Exception</code></li><li><code>try catch</code></li></ul></blockquote><h3 id="1-throws-Exception-and-throw-new-Exception"><a href="#1-throws-Exception-and-throw-new-Exception" class="headerlink" title="@1 throws Exception and throw new Exception"></a>@1 throws Exception and throw new Exception</h3><blockquote><p>作用</p><ul><li><code>throws Exception</code> 是为了给某个方法声明可能抛出的异常，和程序本身是否抛出异常无关，仅是一种<code>声明</code>。</li><li><code>throws Exception</code> 声明后，Java编译器会检测，在上层必须对此声明做出<code>反应</code>，要么继续抛出要么处理异常。</li></ul></blockquote><h3 id="2-Transactional-rollcallback-Exception-class"><a href="#2-Transactional-rollcallback-Exception-class" class="headerlink" title="@2 @Transactional(rollcallback = Exception.class)"></a>@2 @Transactional(rollcallback = Exception.class)</h3><blockquote><p>事务回滚注意事项：</p><ul><li><code>异常必须为RuntimeException或者其子类</code>  </li><li><code>方法必须为public</code> </li><li><code>rollcallback=?</code> 指定需要回滚的异常</li><li><code>@Scheduled</code> <code>@Async</code>等注解会被代理导致事务失效，因为其会被多线程管理，解决方案如下。</li></ul></blockquote><ul><li><p>异步操作不需要事务管理</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accountRegister</span><span class="token punctuation">(</span>RequestRegisterDTO registerInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 验证以及注册信息入库</span>accountUserMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>xxxx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 先让异步操作由ThreadLocal（线程本地变量）管理，事务 commit 后会去 ThreadLocal 里边获取并执行。</span>TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">registerSynchronization</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionSynchronizationAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注册成功后异步发送邮件</span>        emailAndShortMessageService<span class="token punctuation">.</span><span class="token function">mailSend</span><span class="token punctuation">(</span>xxxxxss<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>异步操作需要事务管理</p><blockquote><p>需要将异步操作中的业务提取到另一个<code>service</code>中，单独添加事务，达到异步调用事务管理目的，注意这和之前的事务是无法一起管理的。<br>举个栗子：<code>A</code>方法添加了事务标记<code>@Transactional</code>，A中插入一条记录之后, 调用异步方法方法<code>B</code>， <code>B</code>使用了<code>@Async</code>来标注，<code>B</code>中又调用了<code>C、D</code>，<code>C/D</code>分别使用<code>@Transactional</code>做了标注，<br>则可实现<code>B</code>中的事务<code>C/D</code>控制的目的，但是<code>C/D</code>事务是无法一起管理的，除非把C/D提取到一个方法中，并标注<code>@Transactional</code>。</p></blockquote></li></ul><h3 id="try-catch处理异常"><a href="#try-catch处理异常" class="headerlink" title="try catch处理异常"></a>try catch处理异常</h3><blockquote><p> try catch目的</p><ul><li>增强业务得健壮性，处理能处理的异常，区分日志信息，定位到某一步操作，但是太多的try catch 让代码不够简洁，难以理清业务，所以需要合理使用。</li><li><code>throw new Exception</code> 是为了让程序检测到异常让事务回滚。</li><li><code>try catch</code> 后事务是不会回滚的，如果想要事务回滚，需要<code>throw new Exception</code>。</li></ul></blockquote><h3 id="3-用户状态响应"><a href="#3-用户状态响应" class="headerlink" title="@3 用户状态响应"></a>@3 用户状态响应</h3><blockquote><p> 建议响应</p><ul><li>try catch之后，需要重新返回需要的提示信息。面向用户的提示信息应该统一，可以定义constant类，统一整个业务的所有提示信息。</li><li>定义业务相关的错误码，对应不同的错误信息， 有时候可以自定义错误信息让不同的错误信息对应同一个错误码，错误信息用constant来管理。比如[code=404, message=”用户信息不能为空”]</li></ul></blockquote><h3 id="4-补充，事务执行过程中服务器挂掉了会怎样"><a href="#4-补充，事务执行过程中服务器挂掉了会怎样" class="headerlink" title="@4 补充，事务执行过程中服务器挂掉了会怎样"></a>@4 补充，事务执行过程中服务器挂掉了会怎样</h3><blockquote><p>在进行事务处理的时候会在执行SQL前记录<code>REDO</code> log和<code>UNDO</code> log，redo log其实保障的是事务的持久性和一致性，而undo log则保障了事务的原子性。<br>  正在执行中的事务如果出现异常，在程序或者数据库重启后会根据日志回滚数据，保证数据的持久性和一致性。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SomeThingNew</title>
      <link href="/2020/08/19/SomeThingNew/"/>
      <url>/2020/08/19/SomeThingNew/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍一些前沿技术，可参考，东西虽好，无用则无用。</p></blockquote><h2 id="some-thing-new"><a href="#some-thing-new" class="headerlink" title="some thing new"></a>some thing new</h2><blockquote><p>以下是一些流行或者前沿的技术，以及本人对这些技术的一些简介和个人评价</p><ol start="0"><li>GTP3<br>some thing for the future. so it’s num is zero.</li><li>mybatis-plus<br>方便你我他，成就大家。</li><li>activiti<br>最新版本，持续迭代的流程引擎开发</li><li>graphQL<br>功能超越REST-API的新宠，萝卜青菜各有所爱。</li><li>sentinel<br>阿里巴巴哨兵，我觉得叫他管家比较好。</li><li>NACOS<br>阿里巴巴的另一个管家，叫他会计吧，和Apollo类似，支持热更新，再也不用为配置冲突发愁了。</li><li>jupyter<br>python 火爆的…叫他工具不太合适，平台吧，主要是方便，方便。</li><li>drools<br>规则引擎。。。你冲值送你多少积分好呢？不会还在傻傻的代码写IF ELSE吧？</li><li>知识图谱<br>Google或者百度首页随便搜索一个名人你就知道什么叫知识图谱啦。</li><li>flink<br>同样是流处理，他和storm有什么区别呢？</li><li>IOT<br>不了解物联网的同学可以关注下阿里和小米生态，或者下载一个天猫精灵APP体验一下。</li><li>机器学习<br>常用的没那么复杂，其实常用的也就那么十几种模型加以灵活运用，在Python强大科学包的加持下进行数据处理，输入模型进行训练，就有了机器学习，和AI还是有很大差别的。</li><li>JVM变动<br>JDK1.8移除了永久分区，新增了metaspace称为元空间，此空间用于存放原来的永久分区数据，且在服务器本地内存不在JVM内存中。</li><li>spring-cloud-gateway + consul<br>由于eureka停止维护，社区活跃度低迷，搜spring-cloud官网推出了consul组件用以替代和增强spring-cloud的服务代理功能。</li><li>JDK版本<br>JDK半年发一次版本，版本中有很多比较新颖的特性，JDK8是一次跃进，估计能用个十多年吧，JDK会持续优化，外星编程语言是什么样的，那样太牛逼了。</li><li>VUE<br>轻量级的前端框架结合element-ui插件，让VUE前端开发变得不那么复杂，主要还是样式问题，前端动画也是个问题，自认美术一般。</li><li>redis<br>为什么Redis？Redis好用又面试必备，以其独有的单线程多路（多个socket复用一个单线程）复用非阻塞I/O保证线程安全和高效，采用epoll算法，所有操作转为event拒绝时间浪费。6.0推出了Redis网络IO多线程，但Redis本身操作仍然是线程安全的。</li><li>各种MQ<br>为啥用MQ，主要解决几个问题，异步（事务问题），消峰 ，单业务快速处理。</li><li>redis事务<br>Redis事务不保证原子性，且没有回滚机制，编译错误全部不执行，运行时异常其他命令任会执行，可以使用watch来解决其他客户端带来的数据一致性问题。</li></ol></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>今天就写这么多了，后续再补充吧。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> forward </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速提交代码脚本</title>
      <link href="/2020/08/10/%E5%BF%AB%E9%80%9F%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E8%84%9A%E6%9C%AC/"/>
      <url>/2020/08/10/%E5%BF%AB%E9%80%9F%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>这是一篇关于快速提交代码的脚本，VERY GOOD.</p></blockquote><h2 id="window-bat-命令"><a href="#window-bat-命令" class="headerlink" title="window bat 命令"></a>window bat 命令</h2><blockquote><p>window 批处理命令可以帮我们做很多自动化事情，以下是一个简单的例子。</p></blockquote><h2 id="代码自动部署脚本"><a href="#代码自动部署脚本" class="headerlink" title="代码自动部署脚本\"></a>代码自动部署脚本\</h2><pre class="line-numbers language-bash"><code class="language-bash">@echo offtitle pull-and-commit-szpscolor 03mode con cols<span class="token operator">=</span>140 lines<span class="token operator">=</span>20<span class="token keyword">echo</span> pull code start<span class="token keyword">echo</span> ++++++++++++++++++++++++++++++++++++++++<span class="token function">git</span> pull<span class="token keyword">echo</span> ++++++++++++++++++++++++++++++++++++++++<span class="token keyword">echo</span> pull code <span class="token keyword">done</span><span class="token keyword">echo</span> add change start<span class="token keyword">echo</span> ++++++++++++++++++++++++++++++++++++++++<span class="token function">git</span> add -A <span class="token keyword">.</span><span class="token keyword">echo</span> ++++++++++++++++++++++++++++++++++++++++<span class="token keyword">echo</span> add change end<span class="token keyword">set</span> /p description<span class="token operator">=</span>input your commit description <span class="token keyword">:</span><span class="token keyword">echo</span> your description <span class="token keyword">:</span> <span class="token punctuation">[</span>%description%<span class="token punctuation">]</span>, and you have 3 seconds to consider.<span class="token keyword">for</span> /l %%i <span class="token keyword">in</span> <span class="token punctuation">(</span>1,1,2<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>    <span class="token keyword">echo</span> %%i    <span class="token function">ping</span> -n 2 127.1<span class="token operator">></span>nul<span class="token punctuation">)</span><span class="token keyword">set</span> /p confirm<span class="token operator">=</span>confirm your description, input y/n <span class="token keyword">:</span><span class="token keyword">echo</span> your confirm info is: <span class="token punctuation">[</span>%confirm%<span class="token punctuation">]</span><span class="token keyword">if</span> /i <span class="token string">"%confirm%"</span> <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token punctuation">(</span>    <span class="token keyword">echo</span> ++++++++++++++++++++++++++++++++++++++++    <span class="token function">git</span> commit -m <span class="token string">"%description%"</span>    <span class="token keyword">echo</span> ++++++++++++++++++++++++++++++++++++++++    <span class="token function">git</span> push    <span class="token keyword">echo</span> ++++++++++++++++++++++++++++++++++++++++    <span class="token keyword">echo</span> commit and push done.<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span>    <span class="token keyword">echo</span> user not confirm, exist now.<span class="token punctuation">)</span>pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h2><blockquote><p>快速拉取和提交本文件GIT仓库代码。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>后续会补充更多的WINDOS脚本，敬请期待。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-table添加自定义行背景色</title>
      <link href="/2020/06/30/vue-table%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%8C%E8%83%8C%E6%99%AF%E8%89%B2/"/>
      <url>/2020/06/30/vue-table%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%8C%E8%83%8C%E6%99%AF%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>本文主要介绍vue table 使用el-table为行添加自定义背景色。</p></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>element-ui为开发者简化了极大的前端开发工作，但是过于强力的封装，必然导致可自定义性质的退化，有时会为了一个小功能而花费更长的时间.<br>此篇介绍如何对element-ui 中的el-table 添加行自定义选中背景色和hover变色效果。  </p></blockquote><h2 id="需求由来"><a href="#需求由来" class="headerlink" title="需求由来"></a>需求由来</h2><blockquote><p>vue is very hot in developers recently, i want to learn it all the time.<br>one week ago, i rebuild my little partner with VUE and learn so much.<br>but one problem ocuur when i was happing for me ,<br>it just like a ball hit my head , lost too much time to fix it, so i must remark it today.</p></blockquote><h2 id="the-way-to-fix"><a href="#the-way-to-fix" class="headerlink" title="the way to fix"></a>the way to fix</h2><blockquote><p>为了解决这个问题，在网上看了很多资料，但是都没啥效果，所以还是看官方文档，自己研究吧，功夫不负有心人，DOWN IT！</p></blockquote><h2 id="nothing-to-say-but-code-first"><a href="#nothing-to-say-but-code-first" class="headerlink" title="nothing to say , but code first!"></a>nothing to say , but code first!</h2><h3 id="html-code"><a href="#html-code" class="headerlink" title="html code"></a>html code</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">></span> html 代码<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"table-box"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>table ref<span class="token operator">=</span><span class="token string">"multipleTable"</span> <span class="token punctuation">:</span>data<span class="token operator">=</span><span class="token string">"tableData"</span> border tooltip<span class="token operator">-</span>effect<span class="token operator">=</span><span class="token string">"dark"</span> style<span class="token operator">=</span><span class="token string">"width: 100%; cursor: pointer;"</span>            @selection<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"handleSelectionChange"</span>            @row<span class="token operator">-</span>click<span class="token operator">=</span><span class="token string">"rowClick"</span>            @select<span class="token operator">-</span>all<span class="token operator">=</span><span class="token string">"selectAll"</span>            <span class="token punctuation">:</span>row<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">=</span><span class="token string">"tableRowClassName"</span>            @select<span class="token operator">=</span><span class="token string">"singleCheck"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column type<span class="token operator">=</span><span class="token string">"selection"</span> label<span class="token operator">=</span><span class="token string">"全选"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>            <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column prop<span class="token operator">=</span><span class="token string">"columnDesc"</span> label<span class="token operator">=</span><span class="token string">"备注"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>            <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column label<span class="token operator">=</span><span class="token string">"字段名"</span> prop<span class="token operator">=</span><span class="token string">"columnDesc"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>            <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column prop<span class="token operator">=</span><span class="token string">"name"</span> label<span class="token operator">=</span><span class="token string">"操作"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>template slot<span class="token operator">-</span>scope<span class="token operator">=</span><span class="token string">"scope"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"color: #3280d8;"</span><span class="token operator">></span>clickMe<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="data-methods"><a href="#data-methods" class="headerlink" title="data methods"></a>data methods</h3><blockquote><p>JS代码</p></blockquote><pre class="line-numbers language-JS"><code class="language-JS">export default {        data() {            return {                tableData: [],                multipleSelection: [],                // 用于存放被选中行的index                numbers: []            }        },        methods: {            toggleSelection(rows) {                if (rows) {                    rows.forEach((row) => {                        // 再次调用toggleRowSelection则取消选中                        this.$refs.multipleTable.toggleRowSelection(row);                        if (this.numbers.indexOf(row.index) == -1) {                            console.log("选中" + row.index)                            this.numbers.push(row.index);                        } else {                            console.log("取消选中" + row.index)                            this.numbers.splice(this.numbers.indexOf(row.index), 1);                        }                    })                } else {                    this.$refs.multipleTable.clearSelection()                }            },            handleSelectionChange(val) {                this.multipleSelection = val            },            // 单行checkbox选中触发            singleCheck(val, row) {                let index = row.index;                if (this.numbers.indexOf(index) == -1) {                    console.log("选中" + index)                    this.numbers.push(index);                } else {                    console.log("取消选中" + index)                    this.numbers.splice(this.numbers.indexOf(index), 1);                }            },            // 全选checkbox点击时触发            selectAll(val, row) {                // 判断是否全选                console.log(this.tableData.length + "-" + this.multipleSelection.length)                if (this.multipleSelection.length >= this.tableData.length) {                    // 表单绑定的数据                    console.log("全选")                    // 所有index放入数组中                    this.tableData.forEach((item, i) => {                        this.numbers.push(item.index);                    });                    this.$refs.multipleTable.toggleRowSelection(row);                } else {                    console.log("取消全选")                    // 清空背景数组                    this.numbers.splice(0)                }            },            // 重置所有选中行            resetSelect() {                // 选中的需要取消选中                if (this.numbers.length > 0) {                    this.numbers.forEach(index => {                        this.$refs.multipleTable.toggleRowSelection(this.tableData[index]);                    })                }                // 清空数组                this.numbers.splice(0)            },            // 行点击事件            rowClick(row) {                let index = row.index;                if (this.numbers.indexOf(index) == -1) {                    console.log("选中" + index)                    this.numbers.push(index);                } else {                    console.log("取消选中" + index)                    this.numbers.splice(this.numbers.indexOf(index), 1);                }                // 再次点击时，调用toggleRowSelection则取消选中                this.$refs.multipleTable.toggleRowSelection(row);            },            /* 设置选中背景色 */            tableRowClassName({row,rowIndex}) {                // 为每行添加属性index                row.index = rowIndex;                let color = "";                this.numbers.forEach((r, i) => {                    if (rowIndex === r) {                        // 自定义class名称，需要写到全局element-ui 的scss文件中或者用scoped做穿透                        // 本人穿透未成功，所以就没用scoped                        color = "myRowClass";                    }                });                return color;            }        }    }</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><blockquote><p>css 代码</p><pre class="line-numbers language-CSS"><code class="language-CSS">/* 鼠标上移 hover效果 */.el-table--enable-row-hover .el-table__body tr:hover>td {  background-color: #9198e5 !important;  font-size: 18px !important;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>/* 选中改变自定义背景色 */<br>.myRowClass {<br>    // background-color: yellow !important;<br>    // 设置渐变色<br>    background-image: linear-gradient(#4d33280a, #7f87e3) !important;<br>}</p><pre><code>## 效果&gt; 单击行时，行对应checkbox选中，其背景色会改变;再次单机会取消选中，行背景色变回原来的颜色。&gt; 全选和当选效果和单击行一样。&gt; 以下是效果图，已经解决了全选/反选和单击行的效果冲突![](/images/vue/element-ui.jpg)[](#总结 "总结")总结--------------&gt; element-ui 很好用，但同时，如果要实现一些自定义功能还需要仔细去研究组件源码，后续会继续补充。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> VUE </tag>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用swwager生成离线API文档</title>
      <link href="/2020/06/09/%E4%BD%BF%E7%94%A8swwager%E7%94%9F%E6%88%90%E7%A6%BB%E7%BA%BFAPI%E6%96%87%E6%A1%A3/"/>
      <url>/2020/06/09/%E4%BD%BF%E7%94%A8swwager%E7%94%9F%E6%88%90%E7%A6%BB%E7%BA%BFAPI%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍如何使用swagger生成离线API。</p></blockquote><h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><blockquote><p>spring-boot-2.0 + swagger-2.8.0 .</p></blockquote><h2 id="需要哪些要素"><a href="#需要哪些要素" class="headerlink" title="需要哪些要素"></a>需要哪些要素</h2><blockquote><p>3个配置文件</p><ol><li>静态文件StaticResourceFile，将静态文件中的文件夹放到/src目录下。</li><li>pom.xml 文件增加文档生成配置。</li><li>增加JUNIT测试类，用于在使用mvn test命令时生成swagger.json文件，和生成配置文件。</li></ol></blockquote><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><blockquote><ol><li>将静态文件中的文件夹放到/src目录下。</li><li>增加pom.xml 配置和文档路径配置。</li><li>增加Swagger2MarkupTest.java到test目录，并且Swagger2MarkupTest.java包名称和项目启动类包名称保持一致。</li><li>运行run maven test命令即可。</li></ol></blockquote><h2 id="文件目录结构如下"><a href="#文件目录结构如下" class="headerlink" title="文件目录结构如下"></a>文件目录结构如下</h2><blockquote><p>这是项目结构，其中src中三个目录还有，测试类是必须的。<br><img src="/images/swagger/project.jpg" alt=""></p></blockquote><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><blockquote><p>使用MOCK调用接口，生成swagger.json以及swagger的其他参数，再通过swagger.json转化为接口文档</p><ol><li>先利用<code>SpringFox</code>库生成<code>RESTful API</code></li><li>再利用<code>Swagger2Markup</code> Maven插件生成<code>asciidoc</code>文档</li><li>最后利用<code>asciidoctor</code> Maven插件生成 html 或 pdf 文件</li></ol></blockquote><h2 id="资源文件地址"><a href="#资源文件地址" class="headerlink" title="资源文件地址"></a>资源文件地址</h2><blockquote><p><a href="https://pan.baidu.com/s/14KC3v92_jHjQpaGfyokXYA" target="_blank" rel="noopener">https://pan.baidu.com/s/14KC3v92_jHjQpaGfyokXYA</a><br>提取码：2xay</p></blockquote><h2 id="便利"><a href="#便利" class="headerlink" title="便利"></a>便利</h2><blockquote><p>github上有一些项目基于swagger2.6以上做了文档自动生成，只需要生成文档目标项目swaggerapi接口地址即可生成相关接口文档。<br>项目名swagger2pdf</p></blockquote><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><blockquote><p>上面说明可以生成单个项目所需的离线文档，不是很方便，不建议将要生成文档的项目源码整合到本项目，这样做比较麻烦，需要每个项目都加。<br>比较好的做法是，新增一个项目用来单独生成swagger离线文档。</p></blockquote><ul><li>首先你的项目要确保是<code>spring boot</code>的，并且集成了<code>swagger</code>，接口层和入参出参实体类加了<code>swagger</code>的相关注解，且能正确跑起来；</li><li>然后将本项目的<code>src/test/java</code>下<code>com.example.swagger2pdf</code>中的<code>Swagger2PdfTest</code>类中的注释放开，将生成当前项目的<code>swagger.json</code>的代码注释掉。</li><li>将<code>url</code>中的<code>ip</code>和<code>port</code>换成自己要生成文档的项目的<code>ip</code>和<code>port</code>，这里要确保这个<code>url</code>直接访问有数据返回，不然是无法生成文档的；</li><li>最后按上面说的运行项目即可生成文档。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>swagger2.6.1版本之后的生成规则有些不一样，暂时没去研究。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用问题整理</title>
      <link href="/2020/06/08/%E5%B8%B8%E7%94%A8%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
      <url>/2020/06/08/%E5%B8%B8%E7%94%A8%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>近期关于开发过程中常见问题整理。</p></blockquote><h2 id="consul-命令"><a href="#consul-命令" class="headerlink" title="consul 命令"></a>consul 命令</h2><blockquote><p>查看consul健康状态</p></blockquote><pre class="line-numbers language-linux"><code class="language-linux">curl http://localhost:8500/v1/agent/health/service/name/safety-api<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>删除无用consul实例</p></blockquote><pre class="line-numbers language-linux"><code class="language-linux"> curl  http://123.206.197.169:8500/v1/agent/service/deregister/safety-user-18027<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="ws连接异常"><a href="#ws连接异常" class="headerlink" title="ws连接异常"></a>ws连接异常</h2><blockquote><p>尝试去掉protocol参数</p></blockquote><h2 id="page-helper-和mybatis-plus冲突解决"><a href="#page-helper-和mybatis-plus冲突解决" class="headerlink" title="page-helper 和mybatis-plus冲突解决"></a>page-helper 和mybatis-plus冲突解决</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 解决mybatis-plus冲突 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="spring-boot异常解决"><a href="#spring-boot异常解决" class="headerlink" title="spring-boot异常解决"></a>spring-boot异常解决</h2><dependency>          <groupid>org.safety</groupid>          <artifactid>safety-common</artifactid>          <version>${project.version}</version>          <exclusions>          <!--            1. webflux与webmvc不兼容，否则会项目启动不起来 需要解决冲突          -->            <exclusion>                <groupid>org.springframework</groupid>                <artifactid>spring-webmvc</artifactid>            </exclusion>            <exclusion>                <groupid>org.springframework.boot</groupid>                <artifactid>spring-boot-starter-data-redis</artifactid>            </exclusion>            <exclusion>                <groupid>org.springframework.boot</groupid>                <artifactid>spring-boot-starter-tomcat</artifactid>            </exclusion>          </exclusions>        </dependency><h2 id="重置GIT配置，包括checkStyle"><a href="#重置GIT配置，包括checkStyle" class="headerlink" title="重置GIT配置，包括checkStyle"></a>重置GIT配置，包括checkStyle</h2><p>重置GIT 配置<br>git config –global –unset core.hookspath</p><h2 id="swagger-失效原因"><a href="#swagger-失效原因" class="headerlink" title="swagger 失效原因"></a>swagger 失效原因</h2><blockquote><p>   mvc:<br>        static-path-pattern: /media/**</p></blockquote><blockquote><p>如果非要配置静态配置，可以做兼容性处理，增加配置类。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"swagger-ui.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如何使用JS复制DIV或者p标签文本"><a href="#如何使用JS复制DIV或者p标签文本" class="headerlink" title="如何使用JS复制DIV或者p标签文本"></a>如何使用JS复制DIV或者p标签文本</h2><blockquote><p>使用曲线救国方式</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">   <span class="token selector"><span class="token class">.wrapper</span> </span><span class="token punctuation">{</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token selector"><span class="token id">#input</span> </span><span class="token punctuation">{</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我把你当兄弟你却想着复制我？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是幕后黑手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>copyText()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>copy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>JS</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">copyText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>      <span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      input<span class="token punctuation">.</span>value <span class="token operator">=</span> text<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改文本框的内容</span>      input<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选中文本</span>      document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">"copy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行浏览器复制命令</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"复制成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h2><p>2021 遇到的一些问题和总计</p><h2 id="mybatis-plus-问题"><a href="#mybatis-plus-问题" class="headerlink" title="mybatis plus 问题"></a>mybatis plus 问题</h2><h2 id="limit-问题"><a href="#limit-问题" class="headerlink" title="limit 问题"></a>limit 问题</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 可以使用lambdaQuery查询</span>    QueryWrapper<span class="token operator">&lt;</span>ContractTemplate<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span>ContractTemplate<span class="token operator">:</span><span class="token operator">:</span>getDownCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token string">"limit 10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>ContractTemplate<span class="token operator">></span> list <span class="token operator">=</span> contractTemplateService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="带分页组合查询"><a href="#带分页组合查询" class="headerlink" title="带分页组合查询"></a>带分页组合查询</h2><pre class="line-numbers language-java"><code class="language-java">    LambdaQueryChainWrapper<span class="token operator">&lt;</span>UserCollect<span class="token operator">></span> lambdaQuery <span class="token operator">=</span> userCollectService<span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lambdaQuery<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>UserCollect<span class="token operator">:</span><span class="token operator">:</span>getUserCode<span class="token punctuation">,</span> startQueryReqVo<span class="token punctuation">.</span><span class="token function">getUserCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lambdaQuery<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>UserCollect<span class="token operator">:</span><span class="token operator">:</span>getType<span class="token punctuation">,</span> startQueryReqVo<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lambdaQuery<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>startQueryReqVo<span class="token punctuation">.</span><span class="token function">getSubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserCollect<span class="token operator">:</span><span class="token operator">:</span>getSubType<span class="token punctuation">,</span> startQueryReqVo<span class="token punctuation">.</span><span class="token function">getSubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    lambdaQuery<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>startQueryReqVo<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserCollect<span class="token operator">:</span><span class="token operator">:</span>getTags<span class="token punctuation">,</span> startQueryReqVo<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用lambda表达式拼装查询语句</span>    lambdaQuery<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>startQueryReqVo<span class="token punctuation">.</span><span class="token function">getSearchKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     wapper <span class="token operator">-</span><span class="token operator">></span> wapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>startQueryReqVo<span class="token punctuation">.</span><span class="token function">getSearchKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserCollect<span class="token operator">:</span><span class="token operator">:</span>getTitle<span class="token punctuation">,</span> startQueryReqVo<span class="token punctuation">.</span><span class="token function">getSearchKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>startQueryReqVo<span class="token punctuation">.</span><span class="token function">getSearchKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserCollect<span class="token operator">:</span><span class="token operator">:</span>getContent<span class="token punctuation">,</span> startQueryReqVo<span class="token punctuation">.</span><span class="token function">getSearchKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Page<span class="token operator">&lt;</span>UserCollect<span class="token operator">></span> page <span class="token operator">=</span> lambdaQuery<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span>UserCollect<span class="token operator">></span><span class="token punctuation">(</span>startQueryReqVo<span class="token punctuation">.</span><span class="token function">getCurrentPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startQueryReqVo<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ResultVo<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定时器模式下的事务支持"><a href="#定时器模式下的事务支持" class="headerlink" title="定时器模式下的事务支持"></a>定时器模式下的事务支持</h2><blockquote><p> 在定时器中直接执行数据插入等操作是不会被spring管理事务的，所以需要将数据插入更新操作提成单独的service并加上@transactional.</p></blockquote><pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 0/4 * * * ?"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 定时任务</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syncDataTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    service<span class="token punctuation">.</span><span class="token function">doSomeInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 单独的service</span>  <span class="token annotation punctuation">@service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">service</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 此事务会被spring管理，但注意定时任务中插入数据最好在一个整体中。    * 以免其他插入或更新操作没有被spring管理而导致数据异常。    **/</span>    <span class="token annotation punctuation">@transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomeInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// insert some record</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AOP中支持事务"><a href="#AOP中支持事务" class="headerlink" title="AOP中支持事务"></a>AOP中支持事务</h2><blockquote><p>可以参考配置全局的事务处理</p><pre class="line-numbers language-URL"><code class="language-URL">https://blog.csdn.net/yxw908186797/article/details/90319643<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以下情况事务会失效</p></blockquote><pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@Async</span>  <span class="token annotation punctuation">@Transactional</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveInterfaceLog</span><span class="token punctuation">(</span>Record rec<span class="token punctuation">)</span> <span class="token punctuation">{</span>      recordMapper<span class="token punctuation">.</span><span class="token function">insertRecord</span><span class="token punctuation">(</span>rec<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>解决方式是将insertRecord(rec)提取到另一个service中, 并由事务管理起来。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@Async</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveInterfaceLog</span><span class="token punctuation">(</span>Record rec<span class="token punctuation">)</span> <span class="token punctuation">{</span>      recordService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>rec<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 将异步方法中的执行由事务进行管理</span>  <span class="token annotation punctuation">@Transactional</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Record rec<span class="token punctuation">)</span> <span class="token punctuation">{</span>    recordMapper<span class="token punctuation">.</span><span class="token function">insertRecord</span><span class="token punctuation">(</span>rec<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事务总结"><a href="#事务总结" class="headerlink" title="事务总结"></a>事务总结</h2><blockquote><p>在开发过程中我们经常遇到AOP ，异步，多线程，定时器等的使用，但是如果这几类操作中携带了对数据的插入或更新以及删除操作。<br>  正常情况下spring是不支持对这几种情况进行事务管理的，而我们又希望在程序错误的情况下让事务回滚，那么都可以考虑将需要事务操作的内容提为一个单独的服务，单独由事务进行管理。</p></blockquote><h2 id="security框架"><a href="#security框架" class="headerlink" title="security框架"></a>security框架</h2><blockquote><p>spring 提供了现成的security框架机制，其优点类似于拦截器，常常我们将其和JWT进行一些组合来完成权限验证工作，但是使用过程经常遇到一些问题。<br>  比如，某些链接被限制了，但是本身又放开了权限，为什么呢? 先看JWT + security框架实现机制如何。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">JWTSecurityConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.security.allowCorsOrigin}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String allowCorsOrigin<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.auth.secret}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String authJwtSecret<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 继承jwt配置</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>http<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 禁用csrf</span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        http<span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据角色校验url</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/admin/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAnyAuthority</span><span class="token punctuation">(</span><span class="token string">"ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        http<span class="token punctuation">.</span><span class="token function">antMatcher</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>WebSecurity web<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token operator">/</span><span class="token operator">/</span> 配置不需要鉴权的url        web<span class="token punctuation">.</span><span class="token function">ignoring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span> <span class="token operator">/</span><span class="token operator">/</span> 测试                <span class="token string">"/swagger-ui.html"</span><span class="token punctuation">,</span>                <span class="token string">"/webjars/**"</span><span class="token punctuation">,</span>                <span class="token string">"/swagger-resources/**"</span><span class="token punctuation">,</span>                <span class="token string">"/api/**"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> String <span class="token function">getJWTSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> authJwtSecret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    CorsConfigurationSource <span class="token function">corsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CorsConfiguration configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">setAllowedOrigins</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>allowCorsOrigin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">setAllowedMethods</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">setAllowedHeaders</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UrlBasedCorsConfigurationSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> source<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">/</span> JWT权限配置类，指定过滤器、权限拦截类<span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">JWTSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> JWTUtils jwtUtils<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JWTAuthenticationEntryPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 处理未登录提示                <span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JWTAccessDeniedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 处理权限不足AccessDeniedException                <span class="token punctuation">.</span><span class="token function">addFilterAfter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JWTAuthenticationFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BasicAuthenticationFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 做一些简单过滤处理                 <span class="token punctuation">.</span><span class="token function">authenticationProvider</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JWTAuthenticationProvider</span><span class="token punctuation">(</span><span class="token function">getJWTSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jwtUtils<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 指定权限校验者                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filterSecurityInterceptorOncePerRequest</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 开始鉴权                <span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">/</span> 标注由子类实现    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> String <span class="token function">getJWTSecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">/</span> 此部分为filter中部分内容，过滤器主要设置验证参数AuthenticationSecurityContextHolder<span class="token punctuation">.</span><span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JWTAuthenticationToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> 设置用户全局变量<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">/</span> 获取全局变量  <span class="token keyword">public</span> <span class="token keyword">static</span> JWTAuthenticationToken <span class="token function">getJWTAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Authentication authentication <span class="token operator">=</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AssertUtils<span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>        authentication <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> authentication<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> authentication <span class="token keyword">instanceof</span> <span class="token class-name">JWTAuthenticationToken</span><span class="token punctuation">,</span>        ErrorCode<span class="token punctuation">.</span>NOT_LOGIN<span class="token punctuation">,</span> <span class="token string">"用户未登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>JWTAuthenticationToken<span class="token punctuation">)</span> authentication<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">/</span> 权限校验类<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JWTAuthenticationProvider</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationProvider</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> String jwtSecret<span class="token punctuation">;</span>  <span class="token keyword">private</span> JWTUtils jwtUtils<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">JWTAuthenticationProvider</span><span class="token punctuation">(</span>String jwtSecret<span class="token punctuation">,</span> JWTUtils jwtUtils<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>jwtSecret <span class="token operator">=</span> jwtSecret<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>jwtUtils <span class="token operator">=</span> jwtUtils<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Authentication <span class="token function">authenticate</span><span class="token punctuation">(</span>Authentication authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>    <span class="token operator">/</span><span class="token operator">/</span> 自定义JWT权限验证对象    JWTAuthenticationToken jwtAuthentication <span class="token operator">=</span> <span class="token punctuation">(</span>JWTAuthenticationToken<span class="token punctuation">)</span> authentication<span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">/</span> 获取前端表单中输入后返回的用户名、密码    AssertUtils<span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>jwtAuthentication<span class="token punctuation">,</span> ErrorCode<span class="token punctuation">.</span>ILLEGAL_PARAMETER<span class="token punctuation">,</span> <span class="token string">"非法参数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String jwtToken <span class="token operator">=</span> jwtAuthentication<span class="token punctuation">.</span><span class="token function">getJwtToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> jwtUtils<span class="token punctuation">.</span><span class="token function">generateAuthenticationToken</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">,</span> jwtSecret<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> 生成对应token  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> authentication<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> JWTAuthenticationToken<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">/</span> 自定义JWT权限验证对象<span class="token annotation punctuation">@data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JWTAuthenticationToken</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAuthenticationToken</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 689177934199815232L<span class="token punctuation">;</span>  <span class="token keyword">private</span> String userCode<span class="token punctuation">;</span>  <span class="token keyword">private</span> String userPhone<span class="token punctuation">;</span>  <span class="token keyword">private</span> String userEmail<span class="token punctuation">;</span>  <span class="token keyword">private</span> Integer status<span class="token punctuation">;</span>  <span class="token keyword">private</span> String companyName<span class="token punctuation">;</span>  <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attributes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> String jwtToken<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">JWTAuthenticationToken</span><span class="token punctuation">(</span>String jwtToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>jwtToken <span class="token operator">=</span> jwtToken<span class="token punctuation">;</span>    <span class="token function">setAuthenticated</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">JWTAuthenticationToken</span><span class="token punctuation">(</span>String userCode<span class="token punctuation">,</span> String userPhone<span class="token punctuation">,</span>String userEmail<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> authorities<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userCode<span class="token operator">=</span>userCode<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userPhone <span class="token operator">=</span> userPhone<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userEmail <span class="token operator">=</span> userEmail<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>attributes <span class="token operator">=</span> attributes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setAuthenticated</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthenticated</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isAuthenticated<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalArgumentException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isAuthenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>          <span class="token string">"Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setAuthenticated</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Object <span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> Object <span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">/</span><span class="token operator">/</span> 用于设置设置全局信息    <span class="token keyword">return</span> userEmail<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">/</span> JWT UTIL 列举部分信息用于理解<span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JWTUtils</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TOKEN_KEY_USER_CODE <span class="token operator">=</span> <span class="token string">"userCode"</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TOKEN_KEY_USER_PHONE <span class="token operator">=</span> <span class="token string">"phone"</span><span class="token punctuation">;</span>  <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>   <span class="token operator">*</span> 存储用户code与token的对应关系的前缀   <span class="token operator">*</span><span class="token operator">/</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String USERCODE_AND_JWTTOKEN_RELATIONSHIP <span class="token operator">=</span> <span class="token string">"USERCODE_AND_JWTTOKEN_RELATIONSHIP_"</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Resource</span>  <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 生成jwt token   *   * @param expireTime 过期时间   * @param phone 手机号   */</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">generateJWTToken</span><span class="token punctuation">(</span>Date expireTime<span class="token punctuation">,</span>String userCode<span class="token punctuation">,</span>String phone<span class="token punctuation">,</span>String email<span class="token punctuation">,</span>Integer status<span class="token punctuation">,</span>String companyName<span class="token punctuation">,</span>                                 Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attributes<span class="token punctuation">,</span> String jwtSecret<span class="token punctuation">,</span> Long timeout<span class="token punctuation">,</span>      TimeUnit timeUnit<span class="token punctuation">,</span> JWTTokenTypeEnums jwtTokenTypeEnums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attributes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>JWTTokenTypeEnums<span class="token punctuation">.</span>TOKEN<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jwtTokenTypeEnums<span class="token punctuation">)</span><span class="token punctuation">;</span>    claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>TOKEN_KEY_ATTRIBUTES<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    String jwtToken <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span>expireTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS512<span class="token punctuation">,</span> <span class="token function">resetJwtSecret</span><span class="token punctuation">(</span>jwtSecret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保存用户和对应token的key关系</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">getUserCodeAndTokenRelationshipKey</span><span class="token punctuation">(</span>jwtTokenTypeEnums<span class="token punctuation">,</span> <span class="token function">getCtype</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">,</span> userCode<span class="token punctuation">)</span><span class="token punctuation">,</span> jwtToken<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> timeUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> jwtToken<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 解析jwtToken   */</span>  <span class="token keyword">public</span> Claims <span class="token function">parseJWTToken</span><span class="token punctuation">(</span>String jwtToken<span class="token punctuation">,</span> String jwtSecret<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token function">resetJwtSecret</span><span class="token punctuation">(</span>jwtSecret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 生成认证实体，基于spring security authenticationToken机制   *   * @param authToken token   * @param jwtSecret 秘钥   */</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> JWTAuthenticationToken <span class="token function">generateAuthenticationToken</span><span class="token punctuation">(</span>String authToken<span class="token punctuation">,</span> String jwtSecret<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Claims claims <span class="token operator">=</span> null<span class="token punctuation">;</span>    claims <span class="token operator">=</span> <span class="token function">parseJWTToken</span><span class="token punctuation">(</span>authToken<span class="token punctuation">,</span> jwtSecret<span class="token punctuation">)</span><span class="token punctuation">;</span>    String userCode <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>TOKEN_KEY_USER_CODE<span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attributes <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>TOKEN_KEY_ATTRIBUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>GrantedAuthority<span class="token operator">></span> authorities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>GrantedAuthority<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JWTAuthenticationToken</span><span class="token punctuation">(</span>userCode<span class="token punctuation">,</span> userName<span class="token punctuation">,</span> personType<span class="token punctuation">,</span> authorities<span class="token punctuation">,</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JWT权限验证流程总结"><a href="#JWT权限验证流程总结" class="headerlink" title="JWT权限验证流程总结"></a>JWT权限验证流程总结</h2><blockquote><p>准备好JWT相关配置类和自定义token类，并且和spring security进行关系绑定。<br>在用户登录成功后为用户生成一个合乎JWT格式的token和refreshToken。（登录接口不需鉴权）<br>调用其他接口时，则获取filter设置全局token对象JWTAuthenticationToken（包含token值）。<br>provider负责解析和校验token并从token中获取用户信息，且是否超时，并设置全局用户参数。（JWT属于暴力破解，和Redis关系不大）<br>如果需要刷新token 则从新生产refreshtoken。</p></blockquote><h2 id="JWT和Redis-token的区别"><a href="#JWT和Redis-token的区别" class="headerlink" title="JWT和Redis token的区别"></a>JWT和Redis token的区别</h2><blockquote><p>jwt token属于暴力破解模式，直接解析加密串获取用户信息和token时限。<br>redis 存储token模式相对安全，但是效率稍低。<br>尝试在JWT中增加自有的加密方式，比如JWT + timestamp + 等再做一次SHA256加密解密等。<br>用户退出可以设置JWT参数，让其失效。</p></blockquote><h2 id="JAVA-观察者模式"><a href="#JAVA-观察者模式" class="headerlink" title="JAVA 观察者模式"></a>JAVA 观察者模式</h2><blockquote><p>java 自带了观察者模式的实现，通知类实现<strong>Observable</strong>，实现类创建 <strong>noticeAllWatchers(obj)</strong>来通知所有观察者。<br>具体实现类实现<strong>Observer</strong>,通过<strong>update</strong>通知观察者处理对应的逻辑。<br>应用初始化时需要向通知类<strong>Observable</strong>注册，并在需要的时候调用<strong>Observable</strong>实现类方法<strong>noticeAllWatchers(obj)</strong>通知所有观察者;</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>后面将会继续补充，关于web开发中的一些问题。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-plus实现自定义分页</title>
      <link href="/2020/05/06/mybatis-plus%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5/"/>
      <url>/2020/05/06/mybatis-plus%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>本文主要介绍如何使用mybatis-plus实现复杂自定义分页</p></blockquote><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><blockquote><p>接口定义</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 分页查询   * // 此处最好返回IPAGE   */</span>  APIResult<span class="token operator">&lt;</span>IPage<span class="token operator">&lt;</span>ResDTO<span class="token operator">>></span> <span class="token function">getProjectList</span><span class="token punctuation">(</span>QueryDTO QueryDTO<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>实现类</p></blockquote><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> APIResult<span class="token operator">&lt;</span>IPage<span class="token operator">&lt;</span>ResDTO<span class="token operator">>></span> <span class="token function">getProjectList</span><span class="token punctuation">(</span>QueryDTO QueryDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义返回类IPAGE</span>    IPage<span class="token operator">&lt;</span>ResDTO<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span>ResDTO<span class="token operator">></span><span class="token punctuation">(</span>QueryDTO<span class="token punctuation">.</span><span class="token function">getCurrentPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> QueryDTO<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 分页查询</span>    IPage<span class="token operator">&lt;</span>ResDTO<span class="token operator">></span> pageResult <span class="token operator">=</span> projectMapper<span class="token punctuation">.</span><span class="token function">queryProjectList</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> QueryDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对分页数据遍历进行自定义操作</span>    pageResult<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      item<span class="token punctuation">.</span><span class="token function">setRiskLevel</span><span class="token punctuation">(</span><span class="token string">"高"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> APIResult<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>mapper.java</p></blockquote><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**   * 查询分页数据   * @param projectListQueryDTO   * @return   */</span>  IPage<span class="token operator">&lt;</span>ProjectListSingleResDTO<span class="token operator">></span> <span class="token function">queryProjectList</span><span class="token punctuation">(</span>IPage<span class="token operator">&lt;</span>ProjectListSingleResDTO<span class="token operator">></span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"dto"</span><span class="token punctuation">)</span> ProjectListQueryDTO projectListQueryDTO<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>mapper文件</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryList<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.*.QueryDTO<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.*.ResDTO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select          id as id,        sub_project_name as subProjectName,        project_no as projectNo,        project_category as projectCategory,        current_bid_status as currentBidStatus,        project_type as projectType,        project_status as projectStatus,        remark as riskLevel,        create_time as createTime         from project        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dto.projectStatus <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>ARCHIVED<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               where project_status = #{dto.projectStatus} and            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>               where project_status != #{dto.projectStatus} and            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dto.currentBidStatus !<span class="token punctuation">=</span> null and dto.currentBidStatus !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            current_bid_status = #{dto.currentBidStatus} and         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        (create_user = #{dto.userId} or update_user = #{dto.userId})        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dto.searchKey !<span class="token punctuation">=</span> null and dto.searchKey !<span class="token punctuation">=</span> <span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and (project_no like concat('%',#{dto.searchKey},'%') or sub_project_name            like            concat('%',#{dto.searchKey},'%'))        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        order by create_time desc    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>mybatis-plus方便了常用的分页查询，但是在复杂的分页情况下常常误用导致分页失败。<br>  需要注意的是，PAGE参数最好放DTO前面，MAP也是可以支持的。<br>  返回参数直接使用IPAGE。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> spring boot </tag>
            
            <tag> mybatis-plus </tag>
            
            <tag> pagehelper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot使用junit Test</title>
      <link href="/2020/03/19/spring-boot%E4%BD%BF%E7%94%A8junit-Test/"/>
      <url>/2020/03/19/spring-boot%E4%BD%BF%E7%94%A8junit-Test/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>本文主要介绍如何在spring boot项目中使用junit测试模块功能</p></blockquote><h2 id="方法一-使用spring-boot自带的junit测试功能"><a href="#方法一-使用spring-boot自带的junit测试功能" class="headerlink" title="方法一/使用spring-boot自带的junit测试功能"></a>方法一/使用spring-boot自带的junit测试功能</h2><blockquote><p>引入maven依赖</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!-- Test  start--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Test end --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试类，需要和启动类保持同级</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SpringBootTest</span>    <span class="token annotation punctuation">@EnableTransactionManagement</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> TrtcMixStreamService trtcMixStreamService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        TrtcStartMixStreamModel trtcStartMixStreamModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrtcStartMixStreamModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        trtcStartMixStreamModel<span class="token punctuation">.</span><span class="token function">setRoomId</span><span class="token punctuation">(</span>84L<span class="token punctuation">)</span><span class="token punctuation">;</span>        trtcStartMixStreamModel<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token string">"180"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        trtcStartMixStreamModel<span class="token punctuation">.</span><span class="token function">setMixStreamId</span><span class="token punctuation">(</span><span class="token string">"szpc_84_playUrl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        trtcStartMixStreamModel<span class="token punctuation">.</span><span class="token function">initBaseModelInfo</span><span class="token punctuation">(</span><span class="token string">"1255516392"</span><span class="token punctuation">,</span> <span class="token string">"cee491af9d286ff3d3ca3ec6a1d2d621"</span><span class="token punctuation">,</span> <span class="token string">"1400321747"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        trtcMixStreamService<span class="token punctuation">.</span><span class="token function">openCloudMixStream</span><span class="token punctuation">(</span>trtcStartMixStreamModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等待10秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        trtcMixStreamService<span class="token punctuation">.</span><span class="token function">cancelCloudMixStream</span><span class="token punctuation">(</span>trtcStartMixStreamModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//  @Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        TrtcStartMixStreamModel trtcStartMixStreamModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrtcStartMixStreamModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        trtcStartMixStreamModel<span class="token punctuation">.</span><span class="token function">setRoomId</span><span class="token punctuation">(</span>86L<span class="token punctuation">)</span><span class="token punctuation">;</span>        trtcStartMixStreamModel<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token string">"180"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        trtcStartMixStreamModel<span class="token punctuation">.</span><span class="token function">setMixStreamId</span><span class="token punctuation">(</span><span class="token string">"szpc_86_playUrl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        trtcStartMixStreamModel<span class="token punctuation">.</span><span class="token function">initBaseModelInfo</span><span class="token punctuation">(</span><span class="token string">"1255516392"</span><span class="token punctuation">,</span> <span class="token string">"cee491af9d286ff3d3ca3ec6a1d2d621"</span><span class="token punctuation">,</span> <span class="token string">"1400321747"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        trtcMixStreamService<span class="token punctuation">.</span><span class="token function">cancelCloudMixStream</span><span class="token punctuation">(</span>trtcStartMixStreamModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>spring boot junit 已经集成了junit和mokito，使用起来比较方便，完善的代码需要jnit测试保证</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring boot </tag>
            
            <tag> junit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>触发器实现业务日志等功能</title>
      <link href="/2020/03/17/%E8%A7%A6%E5%8F%91%E5%99%A8%E5%AE%9E%E7%8E%B0%E4%B8%9A%E5%8A%A1%E6%97%A5%E5%BF%97%E7%AD%89%E5%8A%9F%E8%83%BD/"/>
      <url>/2020/03/17/%E8%A7%A6%E5%8F%91%E5%99%A8%E5%AE%9E%E7%8E%B0%E4%B8%9A%E5%8A%A1%E6%97%A5%E5%BF%97%E7%AD%89%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<ul><li>mysql</li><li>触发器</li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍如何使用触发器实现业务功能。</p></blockquote><h2 id="一个简单的触发器"><a href="#一个简单的触发器" class="headerlink" title="一个简单的触发器"></a>一个简单的触发器</h2><blockquote><p>此触发器实现单条记录在插入前的数据更改和链接操作</p></blockquote><pre class="line-numbers language-SQL"><code class="language-SQL">    BEGIN                DECLARE newRoomId BIGINT(20);                set newRoomId =  (select if(isnull(aa),1,aa+1) from (select max(id) as aa from trtc_room_info) tmp);                set new.room_id= newRoomId ;                set new.mix_stream_id = (select concat(new.sub_app_id, "_", newRoomId, "_playUrl"));    END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="触发器规则"><a href="#触发器规则" class="headerlink" title="触发器规则"></a>触发器规则</h2><blockquote><p>如果使用触发器操作的是当前行或表的数据使用new. 操作</p></blockquote><pre class="line-numbers language-SQL"><code class="language-SQL">    CREATE TRIGGER `mytrigger2` BEFORE INSERT ON `trtc_room_info` FOR EACH ROW     BEGIN            SQL1...;            SQL2...;            SQL3...;    END;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>为了节省对数据库的操作，在简单的数据处理或者日志记录上可以使用触发器完成，但是单独的日志系统和业务层关联，所以触发器常常在数据库关联操作时候使用。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 触发器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查询数据库表结构以及聚合拼接SQL查询</title>
      <link href="/2019/12/13/%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8A%E8%81%9A%E5%90%88%E6%8B%BC%E6%8E%A5SQL%E6%9F%A5%E8%AF%A2/"/>
      <url>/2019/12/13/%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E4%BB%A5%E5%8F%8A%E8%81%9A%E5%90%88%E6%8B%BC%E6%8E%A5SQL%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍如何查询表结构和如何多表聚合查询数据。</p></blockquote><h2 id="表结构查询"><a href="#表结构查询" class="headerlink" title="表结构查询"></a>表结构查询</h2><pre class="line-numbers language-mysql"><code class="language-mysql">    SELECT        COLUMN_NAME 列名,        COLUMN_TYPE 数据类型,        DATA_TYPE 字段类型,        CHARACTER_MAXIMUM_LENGTH 长度,        IS_NULLABLE 是否为空,        COLUMN_DEFAULT 默认值,        COLUMN_COMMENT 备注    FROM        INFORMATION_SCHEMA. COLUMNS    WHERE        -- developerclub为数据库名称，到时候只需要修改成你要导出表结构的数据库即可        table_schema = 'business_test'    AND -- article为表名，到时候换成你要导出的表的名称    -- 如果不写的话，默认会查询出所有表中的数据，这样可能就分不清到底哪些字段是哪张表中的了，所以还是建议写上要导出的名名称    table_name = 'user'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多表复合查询"><a href="#多表复合查询" class="headerlink" title="多表复合查询"></a>多表复合查询</h2><blockquote><p>需求，一对多表结构，需要在多表中查询关联记录，并CONCAT某个字段做返回值。<br> 例如：多表中，userName字段，需要查询的结果为<br> 单表ID  张三，李四,王五， 其他字段</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">    SELECT        po.id AS policyId,        po.preservation_id AS preservationId,        group_concat(ipu. NAME) AS applicant    FROM        insurance_policy po    LEFT JOIN insurance_policy_user ipu ON po.id = ipu.insurance_policy_id    WHERE        ipu.relation_user_type = 'APPLICANT'    AND po.status = '0'     AND preservation_id IN     <foreach collection="list" item="item" index="index" open="(" separator="," close=")">      #{item}    </foreach>    GROUP BY ipu.insurance_policy_id <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>在业务中比较常用，可以用来生成交付文档。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> red-black-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cone edit 根据数据库数据快速创建类和文档</title>
      <link href="/2019/10/16/cone-edit-%E6%A0%B9%E6%8D%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E7%B1%BB%E5%92%8C%E6%96%87%E6%A1%A3/"/>
      <url>/2019/10/16/cone-edit-%E6%A0%B9%E6%8D%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E7%B1%BB%E5%92%8C%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>最近整理接口对接文档，发现复制粘贴太麻烦了，还是祭出coney edit吧，整理文档变得很轻松，尤其是接口文档的整理。</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>有如下sql脚本</p><pre class="line-numbers language-sql"><code class="language-sql">  <span class="token punctuation">`</span>color001<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo001'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>color002<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo002id'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>color003<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo003'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>color004<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo004'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>color005<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo005'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>color006<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo006'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>color007<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo007'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>color008<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo008'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>color009<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo009'</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在想把字段名 color列和描述列生成对应文档，或者生成JSON对象</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">`</span>color001<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span>  <span class="token string">'descInfo001'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>color002<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo002id'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>color003<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo003'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>color004<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo004'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>color005<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo005'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>color006<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo006'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>color007<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo007'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>color008<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo008'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>color009<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo009'</span><span class="token punctuation">,</span><span class="token number">cc</span><span class="token punctuation">.</span>gc 1w <span class="token number">a</span><span class="token number">cc</span><span class="token punctuation">.</span>gc <span class="token operator">^</span><span class="token operator">-</span>1w <span class="token number">b</span><span class="token comment" spellcheck="true">// 前两行代码为收集第一列和倒数第一列的数据，后面两行代码为组装数据然后打印</span><span class="token string">"$a"</span>:<span class="token string">"$b"</span><span class="token punctuation">,</span><span class="token number">cc</span><span class="token punctuation">.</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>先复制前两行&gt;再复制后两行&gt;再粘贴 会得到以下结果,可见这种方式用来组装JSON是再好不过了。</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token string">"color001"</span>:<span class="token string">"descInfo001"</span><span class="token punctuation">,</span><span class="token string">"color002"</span>:<span class="token string">"descInfo002id"</span><span class="token punctuation">,</span><span class="token string">"color003"</span>:<span class="token string">"descInfo003"</span><span class="token punctuation">,</span><span class="token string">"color004"</span>:<span class="token string">"descInfo004"</span><span class="token punctuation">,</span><span class="token string">"color005"</span>:<span class="token string">"descInfo005"</span><span class="token punctuation">,</span><span class="token string">"color006"</span>:<span class="token string">"descInfo006"</span><span class="token punctuation">,</span><span class="token string">"color007"</span>:<span class="token string">"descInfo007"</span><span class="token punctuation">,</span><span class="token string">"color008"</span>:<span class="token string">"descInfo008"</span><span class="token punctuation">,</span><span class="token string">"color009"</span>:<span class="token string">"descInfo009"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速建立类并添加注释"><a href="#快速建立类并添加注释" class="headerlink" title="快速建立类并添加注释"></a>快速建立类并添加注释</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">`</span>color001<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span>  <span class="token string">'descInfo001'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>color002<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo002id'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>color003<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo003'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>color004<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo004'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>color005<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo005'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>color006<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo006'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>color007<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo007'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>color008<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo008'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>color009<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'descInfo009'</span><span class="token punctuation">,</span><span class="token number">cc</span><span class="token punctuation">.</span>gc 1w <span class="token number">a</span><span class="token number">cc</span><span class="token punctuation">.</span>gc <span class="token operator">^</span><span class="token operator">-</span>1w <span class="token number">b</span><span class="token comment" spellcheck="true">// 前两行代码为收集第一列和倒数第一列的数据，后面两行代码为组装数据然后打印</span><span class="token comment" spellcheck="true">/** $b */</span> private String $<span class="token number">a</span><span class="token punctuation">;</span><span class="token number">cc</span><span class="token punctuation">.</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>像上次之前一样顺序执行，得到结果如下，这样一个类就建立好了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** descInfo001 */</span> <span class="token keyword">private</span> String color001<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** descInfo002id */</span> <span class="token keyword">private</span> String color002<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** descInfo003 */</span> <span class="token keyword">private</span> String color003<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** descInfo004 */</span> <span class="token keyword">private</span> String color004<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** descInfo005 */</span> <span class="token keyword">private</span> String color005<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** descInfo006 */</span> <span class="token keyword">private</span> String color006<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** descInfo007 */</span> <span class="token keyword">private</span> String color007<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** descInfo008 */</span> <span class="token keyword">private</span> String color008<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** descInfo009 */</span> <span class="token keyword">private</span> String color009<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>```</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>后续会继续优化使用用coney edit的快捷方法。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> conyEdit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conyEdit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot启动加载数据库数据</title>
      <link href="/2019/09/27/spring-boot%E5%90%AF%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/09/27/spring-boot%E5%90%AF%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>本文主要介绍如何在spring boot启动过程中初始化数据库数据的方法</p></blockquote><h2 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitSchemeDataConfig</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Resource</span>  <span class="token keyword">private</span> ConfigureRateMapper configureRateMapper<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Resource</span>  OrganizationBasicService organizationBasicService<span class="token punctuation">;</span>  <span class="token annotation punctuation">@PostConstruct</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统启动中。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// DO SOMETHING ........</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@PreDestroy</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统运行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// DO SOMETHING .......</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spring-boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring-boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql优化和SQL特殊用法</title>
      <link href="/2019/09/05/sql%E4%BC%98%E5%8C%96%E5%92%8CSQL%E7%89%B9%E6%AE%8A%E7%94%A8%E6%B3%95/"/>
      <url>/2019/09/05/sql%E4%BC%98%E5%8C%96%E5%92%8CSQL%E7%89%B9%E6%AE%8A%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>本文主要介绍mysql的一些常见关键字使用和注意事项，以及一些SQL优化标准和示例。</p></blockquote><h2 id="常见关键字"><a href="#常见关键字" class="headerlink" title="常见关键字"></a>常见关键字</h2><blockquote><p>JOIN<br>left right inner JOIN 这三个的差别就不多说了，主要用来做连表查询，往往会丢失性能。</p></blockquote><blockquote><p>GROUP BY<br>对查询的数据进行分组</p></blockquote><blockquote><p>BETWEEN AND<br>查询范围数据</p></blockquote><blockquote><p>CASE WHEN<br>条件查询</p></blockquote><blockquote><p>函数 — 函数使用时候需要注意位置，不然可能索引失效，导致查询缓慢</p><ol><li>concat </li><li></li><li></li></ol></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3秒建立枚举类</title>
      <link href="/2019/09/05/3%E7%A7%92%E5%BB%BA%E7%AB%8B%E6%9E%9A%E4%B8%BE%E7%B1%BB/"/>
      <url>/2019/09/05/3%E7%A7%92%E5%BB%BA%E7%AB%8B%E6%9E%9A%E4%B8%BE%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举烦恼风"><a href="#枚举烦恼风" class="headerlink" title="枚举烦恼风"></a>枚举烦恼风</h2><blockquote><p>java枚举是个好动西，但是创建它往往非常麻烦，需要去翻译，复制，写方法;<br>BUT，TODAY，EVERYTHING HAS CHANGED, 鉴于之前建立了太多的JAVA枚举类让我防不胜防，我决定写一个静态类来创建自己需要的枚举类型，别的不说上代码，建立枚举只要几秒钟。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>beiming<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>HttpURLConnection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLEncoder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>pagehelper<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>qcloud<span class="token punctuation">.</span>Utilities<span class="token punctuation">.</span>Json<span class="token punctuation">.</span>JSONArray<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span>var<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author 使用GOOGLE翻译,快速创建枚举类代码 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Translator</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> LANGUAGE_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 枚举类代码结尾部分，这是固定的 可以自己修改   */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CLASS_END <span class="token operator">=</span> <span class="token string">"\r\n\r\nprivate String value;\r\n"</span> <span class="token operator">+</span> <span class="token string">"  private Integer order;\r\n"</span> <span class="token operator">+</span> <span class="token string">"  \r\n"</span>      <span class="token operator">+</span> <span class="token string">"  private PreventIntensificationEnum(String value, Integer order) {\r\n"</span> <span class="token operator">+</span> <span class="token string">"    this.value = value;\r\n"</span> <span class="token operator">+</span> <span class="token string">"    this.order = order;\r\n"</span>      <span class="token operator">+</span> <span class="token string">"  }\r\n"</span> <span class="token operator">+</span> <span class="token string">"\r\n"</span> <span class="token operator">+</span> <span class="token string">"  public String getValue() {\r\n"</span> <span class="token operator">+</span> <span class="token string">"    return value;\r\n"</span> <span class="token operator">+</span> <span class="token string">"  }\r\n"</span> <span class="token operator">+</span> <span class="token string">"  \r\n"</span> <span class="token operator">+</span> <span class="token string">"  public Integer getOrder() {\r\n"</span>      <span class="token operator">+</span> <span class="token string">"    return order;\r\n"</span> <span class="token operator">+</span> <span class="token string">"  }\r\n"</span> <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 初始化语言类   */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"auto"</span><span class="token punctuation">,</span> <span class="token string">"Automatic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"af"</span><span class="token punctuation">,</span> <span class="token string">"Afrikaans"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sq"</span><span class="token punctuation">,</span> <span class="token string">"Albanian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"am"</span><span class="token punctuation">,</span> <span class="token string">"Amharic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ar"</span><span class="token punctuation">,</span> <span class="token string">"Arabic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hy"</span><span class="token punctuation">,</span> <span class="token string">"Armenian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"az"</span><span class="token punctuation">,</span> <span class="token string">"Azerbaijani"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"eu"</span><span class="token punctuation">,</span> <span class="token string">"Basque"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"be"</span><span class="token punctuation">,</span> <span class="token string">"Belarusian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bn"</span><span class="token punctuation">,</span> <span class="token string">"Bengali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bs"</span><span class="token punctuation">,</span> <span class="token string">"Bosnian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bg"</span><span class="token punctuation">,</span> <span class="token string">"Bulgarian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ca"</span><span class="token punctuation">,</span> <span class="token string">"Catalan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ceb"</span><span class="token punctuation">,</span> <span class="token string">"Cebuano"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ny"</span><span class="token punctuation">,</span> <span class="token string">"Chichewa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zh_cn"</span><span class="token punctuation">,</span> <span class="token string">"Chinese Simplified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zh_tw"</span><span class="token punctuation">,</span> <span class="token string">"Chinese Traditional"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"co"</span><span class="token punctuation">,</span> <span class="token string">"Corsican"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hr"</span><span class="token punctuation">,</span> <span class="token string">"Croatian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cs"</span><span class="token punctuation">,</span> <span class="token string">"Czech"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"da"</span><span class="token punctuation">,</span> <span class="token string">"Danish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"nl"</span><span class="token punctuation">,</span> <span class="token string">"Dutch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"en"</span><span class="token punctuation">,</span> <span class="token string">"English"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"eo"</span><span class="token punctuation">,</span> <span class="token string">"Esperanto"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"et"</span><span class="token punctuation">,</span> <span class="token string">"Estonian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"tl"</span><span class="token punctuation">,</span> <span class="token string">"Filipino"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fi"</span><span class="token punctuation">,</span> <span class="token string">"Finnish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fr"</span><span class="token punctuation">,</span> <span class="token string">"French"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fy"</span><span class="token punctuation">,</span> <span class="token string">"Frisian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"gl"</span><span class="token punctuation">,</span> <span class="token string">"Galician"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ka"</span><span class="token punctuation">,</span> <span class="token string">"Georgian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"de"</span><span class="token punctuation">,</span> <span class="token string">"German"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"el"</span><span class="token punctuation">,</span> <span class="token string">"Greek"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"gu"</span><span class="token punctuation">,</span> <span class="token string">"Gujarati"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ht"</span><span class="token punctuation">,</span> <span class="token string">"Haitian Creole"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ha"</span><span class="token punctuation">,</span> <span class="token string">"Hausa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"haw"</span><span class="token punctuation">,</span> <span class="token string">"Hawaiian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"iw"</span><span class="token punctuation">,</span> <span class="token string">"Hebrew"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span> <span class="token string">"Hindi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hmn"</span><span class="token punctuation">,</span> <span class="token string">"Hmong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hu"</span><span class="token punctuation">,</span> <span class="token string">"Hungarian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"is"</span><span class="token punctuation">,</span> <span class="token string">"Icelandic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ig"</span><span class="token punctuation">,</span> <span class="token string">"Igbo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"Indonesian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ga"</span><span class="token punctuation">,</span> <span class="token string">"Irish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"it"</span><span class="token punctuation">,</span> <span class="token string">"Italian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ja"</span><span class="token punctuation">,</span> <span class="token string">"Japanese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"jw"</span><span class="token punctuation">,</span> <span class="token string">"Javanese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"kn"</span><span class="token punctuation">,</span> <span class="token string">"Kannada"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"kk"</span><span class="token punctuation">,</span> <span class="token string">"Kazakh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"km"</span><span class="token punctuation">,</span> <span class="token string">"Khmer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ko"</span><span class="token punctuation">,</span> <span class="token string">"Korean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ku"</span><span class="token punctuation">,</span> <span class="token string">"Kurdish (Kurmanji)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ky"</span><span class="token punctuation">,</span> <span class="token string">"Kyrgyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lo"</span><span class="token punctuation">,</span> <span class="token string">"Lao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"la"</span><span class="token punctuation">,</span> <span class="token string">"Latin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lv"</span><span class="token punctuation">,</span> <span class="token string">"Latvian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lt"</span><span class="token punctuation">,</span> <span class="token string">"Lithuanian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lb"</span><span class="token punctuation">,</span> <span class="token string">"Luxembourgish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mk"</span><span class="token punctuation">,</span> <span class="token string">"Macedonian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mg"</span><span class="token punctuation">,</span> <span class="token string">"Malagasy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ms"</span><span class="token punctuation">,</span> <span class="token string">"Malay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ml"</span><span class="token punctuation">,</span> <span class="token string">"Malayalam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mt"</span><span class="token punctuation">,</span> <span class="token string">"Maltese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mi"</span><span class="token punctuation">,</span> <span class="token string">"Maori"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mr"</span><span class="token punctuation">,</span> <span class="token string">"Marathi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mn"</span><span class="token punctuation">,</span> <span class="token string">"Mongolian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"my"</span><span class="token punctuation">,</span> <span class="token string">"Myanmar (Burmese)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ne"</span><span class="token punctuation">,</span> <span class="token string">"Nepali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"Norwegian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ps"</span><span class="token punctuation">,</span> <span class="token string">"Pashto"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fa"</span><span class="token punctuation">,</span> <span class="token string">"Persian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pl"</span><span class="token punctuation">,</span> <span class="token string">"Polish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pt"</span><span class="token punctuation">,</span> <span class="token string">"Portuguese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ma"</span><span class="token punctuation">,</span> <span class="token string">"Punjabi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ro"</span><span class="token punctuation">,</span> <span class="token string">"Romanian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ru"</span><span class="token punctuation">,</span> <span class="token string">"Russian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sm"</span><span class="token punctuation">,</span> <span class="token string">"Samoan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"gd"</span><span class="token punctuation">,</span> <span class="token string">"Scots Gaelic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sr"</span><span class="token punctuation">,</span> <span class="token string">"Serbian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"st"</span><span class="token punctuation">,</span> <span class="token string">"Sesotho"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sn"</span><span class="token punctuation">,</span> <span class="token string">"Shona"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sd"</span><span class="token punctuation">,</span> <span class="token string">"Sindhi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"si"</span><span class="token punctuation">,</span> <span class="token string">"Sinhala"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sk"</span><span class="token punctuation">,</span> <span class="token string">"Slovak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sl"</span><span class="token punctuation">,</span> <span class="token string">"Slovenian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"so"</span><span class="token punctuation">,</span> <span class="token string">"Somali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"es"</span><span class="token punctuation">,</span> <span class="token string">"Spanish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"su"</span><span class="token punctuation">,</span> <span class="token string">"Sundanese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sw"</span><span class="token punctuation">,</span> <span class="token string">"Swahili"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sv"</span><span class="token punctuation">,</span> <span class="token string">"Swedish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"tg"</span><span class="token punctuation">,</span> <span class="token string">"Tajik"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ta"</span><span class="token punctuation">,</span> <span class="token string">"Tamil"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"te"</span><span class="token punctuation">,</span> <span class="token string">"Telugu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"th"</span><span class="token punctuation">,</span> <span class="token string">"Thai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">,</span> <span class="token string">"Turkish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"uk"</span><span class="token punctuation">,</span> <span class="token string">"Ukrainian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ur"</span><span class="token punctuation">,</span> <span class="token string">"Urdu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"uz"</span><span class="token punctuation">,</span> <span class="token string">"Uzbek"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"vi"</span><span class="token punctuation">,</span> <span class="token string">"Vietnamese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cy"</span><span class="token punctuation">,</span> <span class="token string">"Welsh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"xh"</span><span class="token punctuation">,</span> <span class="token string">"Xhosa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yi"</span><span class="token punctuation">,</span> <span class="token string">"Yiddish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yo"</span><span class="token punctuation">,</span> <span class="token string">"Yoruba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zu"</span><span class="token punctuation">,</span> <span class="token string">"Zulu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">translate</span><span class="token punctuation">(</span>String langFrom<span class="token punctuation">,</span> String langTo<span class="token punctuation">,</span> String word<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    String url <span class="token operator">=</span> <span class="token string">"https://translate.googleapis.com/translate_a/single?"</span> <span class="token operator">+</span> <span class="token string">"client=gtx"</span> <span class="token operator">+</span> <span class="token string">"&amp;sl="</span> <span class="token operator">+</span> langFrom <span class="token operator">+</span> <span class="token string">"&amp;tl="</span> <span class="token operator">+</span> langTo <span class="token operator">+</span> <span class="token string">"&amp;dt=t&amp;q="</span>        <span class="token operator">+</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    URL obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    HttpURLConnection con <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span> obj<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    con<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> <span class="token string">"Mozilla/5.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BufferedReader in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String inputLine<span class="token punctuation">;</span>    StringBuffer response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>inputLine <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      response<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>inputLine<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">parseResult</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">parseResult</span><span class="token punctuation">(</span>String inputJson<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    JSONArray jsonArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONArray</span><span class="token punctuation">(</span>inputJson<span class="token punctuation">)</span><span class="token punctuation">;</span>    JSONArray jsonArray2 <span class="token operator">=</span> <span class="token punctuation">(</span>JSONArray<span class="token punctuation">)</span> jsonArray<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// JSONArray jsonArray3 = (JSONArray) jsonArray2.get(0);</span>    String result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> jsonArray2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>JSONArray<span class="token punctuation">)</span> jsonArray2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 中问翻译为英文   *    * @param chinese   * @return   * @throws Exception   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">translateToEnglish</span><span class="token punctuation">(</span>String chinese<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String english <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      english <span class="token operator">=</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token string">"zh-CN"</span><span class="token punctuation">,</span> <span class="token string">"en"</span><span class="token punctuation">,</span> chinese<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> english<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 处理中文枚举转换为英文大写翻译，然后建立枚举类   *    * @param enumClassName // 你想要建立的枚举类名   * @param chinese // 枚举列值中文说明   *    *    *        简单纠纷 一般纠纷 重大纠纷 疑难纠纷   *    * @param order 枚举排序/可选/不传自动创建排序从1开始 01 02 03 04   * @param desc 枚举描述   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickCreateEnum</span><span class="token punctuation">(</span>String enumClassName<span class="token punctuation">,</span> String chinese<span class="token punctuation">,</span> String order<span class="token punctuation">,</span> String desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String classDesc <span class="token operator">=</span> <span class="token string">"/**\r\n"</span> <span class="token operator">+</span> <span class="token string">" * Desc:YOURDESC\r\n"</span> <span class="token operator">+</span> <span class="token string">" * @author JACKR\r\n"</span> <span class="token operator">+</span> <span class="token string">" *\r\n"</span> <span class="token operator">+</span> <span class="token string">" */ \r\n"</span><span class="token punctuation">;</span>    classDesc <span class="token operator">=</span> classDesc<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"YOURDESC"</span><span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>    String header <span class="token operator">=</span> classDesc <span class="token operator">+</span> <span class="token string">"public enum "</span> <span class="token operator">+</span> enumClassName <span class="token operator">+</span> <span class="token string">" {\r\n"</span><span class="token punctuation">;</span>    chinese <span class="token operator">=</span> chinese<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\r"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 去掉中文换行</span>    String english <span class="token operator">=</span> Translator<span class="token punctuation">.</span><span class="token function">translateToEnglish</span><span class="token punctuation">(</span>chinese<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取翻译后的英文并且转为大写加下划线</span>    String translatedStr <span class="token operator">=</span> english<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> listEnglish <span class="token operator">=</span> <span class="token function">changeStrToList</span><span class="token punctuation">(</span>translatedStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> listChinese <span class="token operator">=</span> <span class="token function">changeStrToList</span><span class="token punctuation">(</span>chinese<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理排序</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      order <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\r"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 去掉排序换行</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> listOrder <span class="token operator">=</span> <span class="token function">initOrder</span><span class="token punctuation">(</span>listChinese<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      listOrder <span class="token operator">=</span> <span class="token function">changeStrToList</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listChinese<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">+=</span> listEnglish<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"("</span> <span class="token operator">+</span> <span class="token string">"\""</span> <span class="token operator">+</span> listChinese<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\", "</span> <span class="token operator">+</span> listOrder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"), "</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">+=</span> <span class="token string">";"</span><span class="token punctuation">;</span>    String finalClass <span class="token operator">=</span> header <span class="token operator">+</span> result <span class="token operator">+</span> CLASS_END<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>finalClass<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">initOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 获取List用\n分割   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">changeStrToList</span><span class="token punctuation">(</span>String chinese<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> chinese<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String enumClassName <span class="token operator">=</span> <span class="token string">"HelloEnum"</span><span class="token punctuation">;</span>    String classDesc <span class="token operator">=</span> <span class="token string">"这是我要新建的枚举类"</span><span class="token punctuation">;</span>    String chineseListStr <span class="token operator">=</span> <span class="token string">"简单纠纷\r\n"</span> <span class="token operator">+</span> <span class="token string">"一般纠纷\r\n"</span> <span class="token operator">+</span> <span class="token string">"重大纠纷\r\n"</span> <span class="token operator">+</span> <span class="token string">"疑难纠纷\r\n"</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>    String orderListStr <span class="token operator">=</span> <span class="token string">"01\r\n"</span> <span class="token operator">+</span> <span class="token string">"02\r\n"</span> <span class="token operator">+</span> <span class="token string">"03\r\n"</span> <span class="token operator">+</span> <span class="token string">"04\r\n"</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token function">quickCreateEnum</span><span class="token punctuation">(</span>enumClassName<span class="token punctuation">,</span> chineseListStr<span class="token punctuation">,</span> null<span class="token punctuation">,</span> classDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>运行main方法，会得到如下结果</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Desc:这是我要新建的枚举类 * @author JACKR * */</span> <span class="token keyword">public</span> <span class="token keyword">enum</span> HelloEnum <span class="token punctuation">{</span>    <span class="token function">SIMPLE_DISPUTE</span><span class="token punctuation">(</span><span class="token string">"简单纠纷"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">GENERAL_DISPUTE</span><span class="token punctuation">(</span><span class="token string">"一般纠纷"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">MAJOR_DISPUTE</span><span class="token punctuation">(</span><span class="token string">"重大纠纷"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">DIFFICULT_DISPUTE</span><span class="token punctuation">(</span><span class="token string">"疑难纠纷"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String value<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer order<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">PreventIntensificationEnum</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> Integer order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>order <span class="token operator">=</span> order<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> order<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>quickCreateEnum方法可以快速创建枚举类代码，只需要三秒</p></blockquote><h2 id="扩充部分"><a href="#扩充部分" class="headerlink" title="扩充部分"></a>扩充部分</h2><blockquote><p>但是光是创建枚举会很累，前端对接也不知道该传什么值，有什么好的解决办法呢，这时候会想到反射，在项目启动的时候初始化枚举到MAP中，前端通过接口传递类型直接调用，则可查看对应的枚举列表。</p></blockquote><blockquote><p>反射枚举类</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>beiming<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileFilter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>JarURLConnection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLDecoder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Enumeration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedHashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>jar<span class="token punctuation">.</span>JarEntry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>jar<span class="token punctuation">.</span>JarFile<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 获取指定包下面所有类方法 *  * @author JACKR * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClazzUtil</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 从包package中获取所有的Class   *    * @param pack   * @return   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">getClasses</span><span class="token punctuation">(</span>String pack<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 第一个class类的集合</span>    Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> classes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否循环迭代</span>    <span class="token keyword">boolean</span> recursive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取包的名字 并进行替换</span>    String packageName <span class="token operator">=</span> pack<span class="token punctuation">;</span>    String packageDirName <span class="token operator">=</span> packageName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义一个枚举的集合 并进行循环来处理这个目录下的things</span>    Enumeration<span class="token operator">&lt;</span>URL<span class="token operator">></span> dirs<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      dirs <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>packageDirName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 循环迭代下去</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>dirs<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取下一个元素</span>        URL url <span class="token operator">=</span> dirs<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 得到协议的名称</span>        String protocol <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果是以文件的形式保存在服务器上</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>protocol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// System.err.println("file类型的扫描");</span>          <span class="token comment" spellcheck="true">// 获取包的物理路径</span>          String filePath <span class="token operator">=</span> URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 以文件的方式扫描整个包下的文件 并添加到集合中</span>          <span class="token function">findAndAddClassesInPackageByFile</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> filePath<span class="token punctuation">,</span> recursive<span class="token punctuation">,</span> classes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"jar"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>protocol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 如果是jar包文件</span>          <span class="token comment" spellcheck="true">// 定义一个JarFile</span>          <span class="token comment" spellcheck="true">// System.err.println("jar类型的扫描");</span>          JarFile jar<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 获取jar</span>          jar <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>JarURLConnection<span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJarFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 从此jar包 得到一个枚举类</span>          Enumeration<span class="token operator">&lt;</span>JarEntry<span class="token operator">></span> entries <span class="token operator">=</span> jar<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 同样的进行循环迭代</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">processClass</span><span class="token punctuation">(</span>entries<span class="token punctuation">,</span> packageDirName<span class="token punctuation">,</span> packageName<span class="token punctuation">,</span> recursive<span class="token punctuation">,</span> classes<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> classes<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Desc: 获取CLASS.   *    * @param entries   * @param packageDirName   * @param packageName   * @param recursive   * @param classes   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">processClass</span><span class="token punctuation">(</span>Enumeration<span class="token operator">&lt;</span>JarEntry<span class="token operator">></span> entries<span class="token punctuation">,</span> String packageDirName<span class="token punctuation">,</span> String packageName<span class="token punctuation">,</span> Boolean recursive<span class="token punctuation">,</span>      Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> classes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取jar里的一个实体 可以是目录 和一些jar包里的其他文件 如META-INF等文件</span>    JarEntry entry <span class="token operator">=</span> entries<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String name <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果是以/开头的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获取后面的字符串</span>      name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果前半部分和定义的包名相同</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>packageDirName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> idx <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 如果以"/"结尾 是一个包</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取包名 把"/"替换成"."</span>        packageName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 如果可以迭代下去 并且是一个包</span>      Boolean flag <span class="token operator">=</span> <span class="token punctuation">(</span>idx <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> recursive<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>entry<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果是一个.class文件 而且不是目录</span>        <span class="token comment" spellcheck="true">// 去掉后面的".class" 获取真正的类名</span>        String className <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>packageName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 添加到classes</span>          classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>packageName <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// log.error("添加用户自定义视图类错误找不到此类的.class文件");</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 以文件的形式来获取包下的所有Class   *    * @param packageName   * @param packagePath   * @param recursive   * @param classes   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">findAndAddClassesInPackageByFile</span><span class="token punctuation">(</span>String packageName<span class="token punctuation">,</span> String packagePath<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> recursive<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> classes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取此包的目录 建立一个File</span>    File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>packagePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果不存在或者 也不是目录就直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// log.warn("用户定义包名 " + packageName + " 下没有任何文件");</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果存在 就获取包下的所有文件 包括目录</span>    File<span class="token punctuation">[</span><span class="token punctuation">]</span> dirfiles <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 自定义过滤规则 如果可以循环(包含子目录) 或则是以.class结尾的文件(编译好的java类文件)</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>recursive <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环所有文件</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> dirfiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果是目录 则继续扫描</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">findAndAddClassesInPackageByFile</span><span class="token punctuation">(</span>packageName <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> recursive<span class="token punctuation">,</span> classes<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果是java类文件 去掉后面的.class 只留下类名</span>        String className <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 添加到集合中去</span>          <span class="token comment" spellcheck="true">// classes.add(Class.forName(packageName + '.' +</span>          <span class="token comment" spellcheck="true">// className));</span>          <span class="token comment" spellcheck="true">// 经过回复同学的提醒，这里用forName有一些不好，会触发static方法，没有使用classLoader的load干净</span>          classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>packageName <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// log.error("添加用户自定义视图类错误 找不到此类的.class文件");</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>初始化枚举数据UTIL类</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>beiming<span class="token punctuation">.</span>nonlitigation<span class="token punctuation">.</span>business<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>beiming<span class="token punctuation">.</span>nonlitigation<span class="token punctuation">.</span>business<span class="token punctuation">.</span>common<span class="token punctuation">.</span>commondto<span class="token punctuation">.</span>TypeResponseDTO<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 获取枚举相关信息的静态类 * @author JACKR * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumsTypeUtil</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_PACKAGE <span class="token operator">=</span> <span class="token string">"com.beiming.nonlitigation.business.common.enums"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 存放类型的枚举数据map   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>TypeResponseDTO<span class="token operator">>></span> typeListMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token punctuation">{</span>    <span class="token function">initAllEnumMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化枚举信息MAP</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 枚举转map结合value作为map的key,description作为map的value 必须有order字段和对应getOrder方法   *   * @param enumT   * @param methodNames   * @return enum mapcolloction   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> TypeResponseDTO<span class="token operator">></span> <span class="token function">enumToMap</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> enumT<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> methodNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> TypeResponseDTO<span class="token operator">></span> enummap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> TypeResponseDTO<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不是枚举类</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>enumT<span class="token punctuation">.</span><span class="token function">isEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> enummap<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    T<span class="token punctuation">[</span><span class="token punctuation">]</span> enums <span class="token operator">=</span> enumT<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>enums <span class="token operator">==</span> null <span class="token operator">||</span> enums<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> enummap<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> methodNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 默认接口value方法 */</span>    String valueMathod <span class="token operator">=</span> <span class="token string">"getValue"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 默认接口typeName方法 */</span>    String desMathod <span class="token operator">=</span> <span class="token string">"getTypeName"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 获取排序的方法 */</span>    String orderMethod <span class="token operator">=</span> <span class="token string">"getOrder"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 扩展方法 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodNames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      valueMathod <span class="token operator">=</span> methodNames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodNames<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      desMathod <span class="token operator">=</span> methodNames<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> enums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      T tobj <span class="token operator">=</span> enums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/** 获取value值 */</span>        Object resultValue <span class="token operator">=</span> <span class="token function">getMethodValue</span><span class="token punctuation">(</span>valueMathod<span class="token punctuation">,</span> tobj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>resultValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/** 获取typeName描述值 */</span>        Object resultDes <span class="token operator">=</span> <span class="token function">getMethodValue</span><span class="token punctuation">(</span>desMathod<span class="token punctuation">,</span> tobj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** 如果描述不存在获取属性值 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>resultDes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          resultDes <span class="token operator">=</span> tobj<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/** 获取顺序 */</span>        Object orderDes <span class="token operator">=</span> <span class="token function">getMethodValue</span><span class="token punctuation">(</span>orderMethod<span class="token punctuation">,</span> tobj<span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer order <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** 获取顺序 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>orderDes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          order <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>orderDes <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TypeResponseDTO dto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeResponseDTO</span><span class="token punctuation">(</span>resultValue <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> resultDes <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>        enummap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>resultDes <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> dto<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> enummap<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 根据反射，通过方法名称获取方法值，忽略大小写的   *   * @param methodName   * @param obj   * @param args   * @return return value   */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Object <span class="token function">getMethodValue</span><span class="token punctuation">(</span>String methodName<span class="token punctuation">,</span> T obj<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object resut <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/********************************* start *****************************************/</span>      <span class="token comment" spellcheck="true">/** 获取方法数组，这里只要共有的方法 */</span>      Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>methods<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> resut<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Method method <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> methods<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/** 忽略大小写取方法 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/** 如果存在，则取出正确的方法名称 */</span>          methodName <span class="token operator">=</span> methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          method <span class="token operator">=</span> methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*************************** end ***********************************************/</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> resut<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/** 方法执行 */</span>      resut <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>resut <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        resut <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/** 返回结果 */</span>      <span class="token keyword">return</span> resut<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> resut<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 通过value值获取对应的描述信息   *   * @param value   * @param enumT   * @param methodNames   * @return enum description   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Object <span class="token function">getEnumDescriotionByValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> enumT<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> methodNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** 不是枚举则返回"" */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>enumT<span class="token punctuation">.</span><span class="token function">isEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** 获取枚举的所有枚举属性，似乎这几句也没啥用，一般既然用枚举，就一定会添加枚举属性 */</span>    T<span class="token punctuation">[</span><span class="token punctuation">]</span> enums <span class="token operator">=</span> enumT<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>enums <span class="token operator">==</span> null <span class="token operator">||</span> enums<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> methodNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 默认获取枚举value方法，与接口方法一致 */</span>    String valueMathod <span class="token operator">=</span> <span class="token string">"getValue"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 默认获取枚举getTypeName方法 */</span>    String desMathod <span class="token operator">=</span> <span class="token string">"getTypeName"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodNames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      valueMathod <span class="token operator">=</span> methodNames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodNames<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      desMathod <span class="token operator">=</span> methodNames<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> enums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      T t <span class="token operator">=</span> enums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/** 获取枚举对象value */</span>        Object resultValue <span class="token operator">=</span> <span class="token function">getMethodValue</span><span class="token punctuation">(</span>valueMathod<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resultValue<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/** 存在则返回对应描述 */</span>          Object resultDes <span class="token operator">=</span> <span class="token function">getMethodValue</span><span class="token punctuation">(</span>desMathod<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> resultDes<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 通过枚举value或者自定义值及方法获取枚举属性值   *   * @param value   * @param enumT   * @param methodNames   * @return enum key   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> String <span class="token function">getEnumKeyByValue</span><span class="token punctuation">(</span>Object value<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> enumT<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> methodNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>enumT<span class="token punctuation">.</span><span class="token function">isEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    T<span class="token punctuation">[</span><span class="token punctuation">]</span> enums <span class="token operator">=</span> enumT<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>enums <span class="token operator">==</span> null <span class="token operator">||</span> enums<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> methodNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 默认方法 */</span>    String valueMathod <span class="token operator">=</span> <span class="token string">"getValue"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 独立方法 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodNames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      valueMathod <span class="token operator">=</span> methodNames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> enums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      T tobj <span class="token operator">=</span> enums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        Object resultValue <span class="token operator">=</span> <span class="token function">getMethodValue</span><span class="token punctuation">(</span>valueMathod<span class="token punctuation">,</span> tobj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/** 存在则返回对应值 */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resultValue <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> resultValue<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> tobj <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 转换成List   *    * @param enumT   * @param methodNames   * @return List&lt;String>   */</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span> <span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getEnumToList</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> enumT<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> methodNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> TypeResponseDTO<span class="token operator">></span> map <span class="token operator">=</span> <span class="token function">enumToMap</span><span class="token punctuation">(</span>enumT<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Desc: 通过枚举类型获取枚举list.   *    * @param enumsType   * @return   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>TypeResponseDTO<span class="token operator">></span> <span class="token function">getTypeList</span><span class="token punctuation">(</span>String enumsType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String enumName <span class="token operator">=</span> DEFAULT_PACKAGE <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> enumsType<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求获取枚："</span> <span class="token operator">+</span> enumName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 直接从MAP中获取</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>typeListMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>enumName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>typeListMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> typeListMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>enumName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>TypeResponseDTO<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Desc:将指定包名下的所有枚举类初始化成MAP .   *   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initAllEnumMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过包名获取所有clazz对象</span>    Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> clazzSet <span class="token operator">=</span> ClazzUtil<span class="token punctuation">.</span><span class="token function">getClasses</span><span class="token punctuation">(</span>DEFAULT_PACKAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    clazzSet<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>TypeResponseDTO<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> TypeResponseDTO<span class="token operator">></span> map <span class="token operator">=</span> <span class="token function">enumToMap</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>TypeResponseDTO dto <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 排序 默认升序</span>      List<span class="token operator">&lt;</span>TypeResponseDTO<span class="token operator">></span> sortedList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o1<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        typeListMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sortedList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">initAllEnumMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>typeListMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>getEnumTypeList返回的DTO对象</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>beiming<span class="token punctuation">.</span>nonlitigation<span class="token punctuation">.</span>business<span class="token punctuation">.</span>common<span class="token punctuation">.</span>commondto<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>ApiModelProperty<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TypeResponseDTO</span>  <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"名字"</span><span class="token punctuation">)</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"值"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> String value<span class="token punctuation">;</span>  <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"顺序"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> Integer order<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>service类中接口</p></blockquote><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> DubboResult <span class="token function">getEnumTypeList</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>TypeResponseDTO<span class="token operator">></span> list <span class="token operator">=</span> EnumsTypeUtil<span class="token punctuation">.</span><span class="token function">getTypeList</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> DubboResultBuilder<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Serializable<span class="token punctuation">)</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>这几个类就可以快速创建枚举，并且为前端提供了一个查询所有枚举的接口，提高了开发效率，后续会进一步优化，准备提供一个读取文件创建枚举类的方法，并且提供一个万能工具箱来创建需要创建的对象。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> enum </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> enum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA调用Google翻译api</title>
      <link href="/2019/09/05/JAVA%E8%B0%83%E7%94%A8Google%E7%BF%BB%E8%AF%91api/"/>
      <url>/2019/09/05/JAVA%E8%B0%83%E7%94%A8Google%E7%BF%BB%E8%AF%91api/</url>
      
        <content type="html"><![CDATA[<h2 id="Java调用Google翻译api，支持多种语言翻译。"><a href="#Java调用Google翻译api，支持多种语言翻译。" class="headerlink" title="Java调用Google翻译api，支持多种语言翻译。"></a>Java调用Google翻译api，支持多种语言翻译。</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>beiming<span class="token punctuation">.</span>nonlitigation<span class="token punctuation">.</span>businessgateway<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>HttpURLConnection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URLEncoder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>qcloud<span class="token punctuation">.</span>Utilities<span class="token punctuation">.</span>Json<span class="token punctuation">.</span>JSONArray<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span>var<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author GOOGLE翻译 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Translator</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> LANGUAGE_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 初始化语言类   */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"auto"</span><span class="token punctuation">,</span> <span class="token string">"Automatic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"af"</span><span class="token punctuation">,</span> <span class="token string">"Afrikaans"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sq"</span><span class="token punctuation">,</span> <span class="token string">"Albanian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"am"</span><span class="token punctuation">,</span> <span class="token string">"Amharic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ar"</span><span class="token punctuation">,</span> <span class="token string">"Arabic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hy"</span><span class="token punctuation">,</span> <span class="token string">"Armenian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"az"</span><span class="token punctuation">,</span> <span class="token string">"Azerbaijani"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"eu"</span><span class="token punctuation">,</span> <span class="token string">"Basque"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"be"</span><span class="token punctuation">,</span> <span class="token string">"Belarusian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bn"</span><span class="token punctuation">,</span> <span class="token string">"Bengali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bs"</span><span class="token punctuation">,</span> <span class="token string">"Bosnian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bg"</span><span class="token punctuation">,</span> <span class="token string">"Bulgarian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ca"</span><span class="token punctuation">,</span> <span class="token string">"Catalan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ceb"</span><span class="token punctuation">,</span> <span class="token string">"Cebuano"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ny"</span><span class="token punctuation">,</span> <span class="token string">"Chichewa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zh_cn"</span><span class="token punctuation">,</span> <span class="token string">"Chinese Simplified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zh_tw"</span><span class="token punctuation">,</span> <span class="token string">"Chinese Traditional"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"co"</span><span class="token punctuation">,</span> <span class="token string">"Corsican"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hr"</span><span class="token punctuation">,</span> <span class="token string">"Croatian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cs"</span><span class="token punctuation">,</span> <span class="token string">"Czech"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"da"</span><span class="token punctuation">,</span> <span class="token string">"Danish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"nl"</span><span class="token punctuation">,</span> <span class="token string">"Dutch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"en"</span><span class="token punctuation">,</span> <span class="token string">"English"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"eo"</span><span class="token punctuation">,</span> <span class="token string">"Esperanto"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"et"</span><span class="token punctuation">,</span> <span class="token string">"Estonian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"tl"</span><span class="token punctuation">,</span> <span class="token string">"Filipino"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fi"</span><span class="token punctuation">,</span> <span class="token string">"Finnish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fr"</span><span class="token punctuation">,</span> <span class="token string">"French"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fy"</span><span class="token punctuation">,</span> <span class="token string">"Frisian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"gl"</span><span class="token punctuation">,</span> <span class="token string">"Galician"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ka"</span><span class="token punctuation">,</span> <span class="token string">"Georgian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"de"</span><span class="token punctuation">,</span> <span class="token string">"German"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"el"</span><span class="token punctuation">,</span> <span class="token string">"Greek"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"gu"</span><span class="token punctuation">,</span> <span class="token string">"Gujarati"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ht"</span><span class="token punctuation">,</span> <span class="token string">"Haitian Creole"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ha"</span><span class="token punctuation">,</span> <span class="token string">"Hausa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"haw"</span><span class="token punctuation">,</span> <span class="token string">"Hawaiian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"iw"</span><span class="token punctuation">,</span> <span class="token string">"Hebrew"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span> <span class="token string">"Hindi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hmn"</span><span class="token punctuation">,</span> <span class="token string">"Hmong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hu"</span><span class="token punctuation">,</span> <span class="token string">"Hungarian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"is"</span><span class="token punctuation">,</span> <span class="token string">"Icelandic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ig"</span><span class="token punctuation">,</span> <span class="token string">"Igbo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"Indonesian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ga"</span><span class="token punctuation">,</span> <span class="token string">"Irish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"it"</span><span class="token punctuation">,</span> <span class="token string">"Italian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ja"</span><span class="token punctuation">,</span> <span class="token string">"Japanese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"jw"</span><span class="token punctuation">,</span> <span class="token string">"Javanese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"kn"</span><span class="token punctuation">,</span> <span class="token string">"Kannada"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"kk"</span><span class="token punctuation">,</span> <span class="token string">"Kazakh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"km"</span><span class="token punctuation">,</span> <span class="token string">"Khmer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ko"</span><span class="token punctuation">,</span> <span class="token string">"Korean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ku"</span><span class="token punctuation">,</span> <span class="token string">"Kurdish (Kurmanji)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ky"</span><span class="token punctuation">,</span> <span class="token string">"Kyrgyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lo"</span><span class="token punctuation">,</span> <span class="token string">"Lao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"la"</span><span class="token punctuation">,</span> <span class="token string">"Latin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lv"</span><span class="token punctuation">,</span> <span class="token string">"Latvian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lt"</span><span class="token punctuation">,</span> <span class="token string">"Lithuanian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lb"</span><span class="token punctuation">,</span> <span class="token string">"Luxembourgish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mk"</span><span class="token punctuation">,</span> <span class="token string">"Macedonian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mg"</span><span class="token punctuation">,</span> <span class="token string">"Malagasy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ms"</span><span class="token punctuation">,</span> <span class="token string">"Malay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ml"</span><span class="token punctuation">,</span> <span class="token string">"Malayalam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mt"</span><span class="token punctuation">,</span> <span class="token string">"Maltese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mi"</span><span class="token punctuation">,</span> <span class="token string">"Maori"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mr"</span><span class="token punctuation">,</span> <span class="token string">"Marathi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mn"</span><span class="token punctuation">,</span> <span class="token string">"Mongolian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"my"</span><span class="token punctuation">,</span> <span class="token string">"Myanmar (Burmese)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ne"</span><span class="token punctuation">,</span> <span class="token string">"Nepali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"Norwegian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ps"</span><span class="token punctuation">,</span> <span class="token string">"Pashto"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fa"</span><span class="token punctuation">,</span> <span class="token string">"Persian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pl"</span><span class="token punctuation">,</span> <span class="token string">"Polish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pt"</span><span class="token punctuation">,</span> <span class="token string">"Portuguese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ma"</span><span class="token punctuation">,</span> <span class="token string">"Punjabi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ro"</span><span class="token punctuation">,</span> <span class="token string">"Romanian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ru"</span><span class="token punctuation">,</span> <span class="token string">"Russian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sm"</span><span class="token punctuation">,</span> <span class="token string">"Samoan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"gd"</span><span class="token punctuation">,</span> <span class="token string">"Scots Gaelic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sr"</span><span class="token punctuation">,</span> <span class="token string">"Serbian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"st"</span><span class="token punctuation">,</span> <span class="token string">"Sesotho"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sn"</span><span class="token punctuation">,</span> <span class="token string">"Shona"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sd"</span><span class="token punctuation">,</span> <span class="token string">"Sindhi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"si"</span><span class="token punctuation">,</span> <span class="token string">"Sinhala"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sk"</span><span class="token punctuation">,</span> <span class="token string">"Slovak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sl"</span><span class="token punctuation">,</span> <span class="token string">"Slovenian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"so"</span><span class="token punctuation">,</span> <span class="token string">"Somali"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"es"</span><span class="token punctuation">,</span> <span class="token string">"Spanish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"su"</span><span class="token punctuation">,</span> <span class="token string">"Sundanese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sw"</span><span class="token punctuation">,</span> <span class="token string">"Swahili"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sv"</span><span class="token punctuation">,</span> <span class="token string">"Swedish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"tg"</span><span class="token punctuation">,</span> <span class="token string">"Tajik"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ta"</span><span class="token punctuation">,</span> <span class="token string">"Tamil"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"te"</span><span class="token punctuation">,</span> <span class="token string">"Telugu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"th"</span><span class="token punctuation">,</span> <span class="token string">"Thai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">,</span> <span class="token string">"Turkish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"uk"</span><span class="token punctuation">,</span> <span class="token string">"Ukrainian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ur"</span><span class="token punctuation">,</span> <span class="token string">"Urdu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"uz"</span><span class="token punctuation">,</span> <span class="token string">"Uzbek"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"vi"</span><span class="token punctuation">,</span> <span class="token string">"Vietnamese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cy"</span><span class="token punctuation">,</span> <span class="token string">"Welsh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"xh"</span><span class="token punctuation">,</span> <span class="token string">"Xhosa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yi"</span><span class="token punctuation">,</span> <span class="token string">"Yiddish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"yo"</span><span class="token punctuation">,</span> <span class="token string">"Yoruba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LANGUAGE_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"zu"</span><span class="token punctuation">,</span> <span class="token string">"Zulu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">translate</span><span class="token punctuation">(</span>String langFrom<span class="token punctuation">,</span> String langTo<span class="token punctuation">,</span> String word<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      String url <span class="token operator">=</span>               <span class="token string">"https://translate.googleapis.com/translate_a/single?"</span> <span class="token operator">+</span>              <span class="token string">"client=gtx"</span> <span class="token operator">+</span>              <span class="token string">"&amp;sl="</span> <span class="token operator">+</span> langFrom <span class="token operator">+</span>              <span class="token string">"&amp;tl="</span> <span class="token operator">+</span> langTo <span class="token operator">+</span>              <span class="token string">"&amp;dt=t&amp;q="</span> <span class="token operator">+</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      URL obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>      HttpURLConnection con <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span> obj<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      con<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> <span class="token string">"Mozilla/5.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      BufferedReader in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String inputLine<span class="token punctuation">;</span>      StringBuffer response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>inputLine <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          response<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>inputLine<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">parseResult</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">parseResult</span><span class="token punctuation">(</span>String inputJson<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      JSONArray jsonArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONArray</span><span class="token punctuation">(</span>inputJson<span class="token punctuation">)</span><span class="token punctuation">;</span>      JSONArray jsonArray2 <span class="token operator">=</span> <span class="token punctuation">(</span>JSONArray<span class="token punctuation">)</span> jsonArray<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    JSONArray jsonArray3 = (JSONArray) jsonArray2.get(0);</span>      String result <span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>var i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> jsonArray2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>JSONArray<span class="token punctuation">)</span> jsonArray2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    String result <span class="token operator">=</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token string">"zh-CN"</span><span class="token punctuation">,</span> <span class="token string">"en"</span><span class="token punctuation">,</span><span class="token string">"你是个猪吗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>个人不推荐百度翻译，大家都懂的。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> translate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> translate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过枚举名称和排序快速建立枚举类</title>
      <link href="/2019/09/04/%E9%80%9A%E8%BF%87%E6%9E%9A%E4%B8%BE%E5%90%8D%E7%A7%B0%E5%92%8C%E6%8E%92%E5%BA%8F%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%8B%E6%9E%9A%E4%B8%BE%E7%B1%BB/"/>
      <url>/2019/09/04/%E9%80%9A%E8%BF%87%E6%9E%9A%E4%B8%BE%E5%90%8D%E7%A7%B0%E5%92%8C%E6%8E%92%E5%BA%8F%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%8B%E6%9E%9A%E4%B8%BE%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="使用coneyEdit-快速建立枚举类"><a href="#使用coneyEdit-快速建立枚举类" class="headerlink" title="使用coneyEdit 快速建立枚举类"></a>使用coneyEdit 快速建立枚举类</h2><h3 id="枚举示例"><a href="#枚举示例" class="headerlink" title="枚举示例"></a>枚举示例</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>beiming<span class="token punctuation">.</span>nonlitigation<span class="token punctuation">.</span>business<span class="token punctuation">.</span>common<span class="token punctuation">.</span>enums<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Desc:案件主状态枚举类 * @author JACKR * */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> CaseStatusEnum <span class="token punctuation">{</span>  <span class="token function">DRAFT</span><span class="token punctuation">(</span><span class="token string">"草稿"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">REGISTERED</span><span class="token punctuation">(</span><span class="token string">"已经登记"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">REGISTRATION_WAS_RETURNED</span><span class="token punctuation">(</span><span class="token string">"登记被退回"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> String value<span class="token punctuation">;</span>  <span class="token keyword">private</span> Integer order<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token function">CaseStatusEnum</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> Integer order<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>order <span class="token operator">=</span> order<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> Integer <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> order<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EXCEL数据示例"><a href="#EXCEL数据示例" class="headerlink" title="EXCEL数据示例"></a>EXCEL数据示例</h3><pre class="line-numbers language-t"><code class="language-t">01    简单纠纷02    一般纠纷03    重大纠纷04    疑难纠纷<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1复制数据然后使用coneyEdit"><a href="#1复制数据然后使用coneyEdit" class="headerlink" title="1复制数据然后使用coneyEdit"></a>1复制数据然后使用coneyEdit</h3><pre><code>// $tx.1 代表说明 $tx.2 代表排序 以此类推demo("$tx.2", $tx.1)cc.p</code></pre><blockquote><p>复制粘贴使conneyedit生效后的结果</p></blockquote><pre class="line-numbers language-t"><code class="language-t">demo("简单纠纷", 01)demo("一般纠纷", 02)demo("重大纠纷", 03)demo("疑难纠纷", 04)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2翻译-，然后删除空行-添加下划线-替换空格，然后转大写"><a href="#2翻译-，然后删除空行-添加下划线-替换空格，然后转大写" class="headerlink" title="2翻译 ，然后删除空行 添加下划线 替换空格，然后转大写"></a>2翻译 ，然后删除空行 添加下划线 替换空格，然后转大写</h3><pre class="line-numbers language-t"><code class="language-t">unsophisticated disputeGeneral disputesMajor disputesDifficult Disputescc.dbl //删除空行unsophisticated disputeGeneral disputesMajor disputesDifficult Disputescc.aac 1v _ // 添加unsophisticated_ disputeGeneral_ disputesMajor_ disputesDifficult_ Disputescc.rs @b //替换空格unsophisticated_disputeGeneral_disputesMajor_disputesDifficult_Disputescc.ml up // 然后转大写UNSOPHISTICATED_DISPUTEGENERAL_DISPUTESMAJOR_DISPUTESDIFFICULT_DISPUTES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3使用VSCODE的批量编辑合并代码-或者使用coney也可以"><a href="#3使用VSCODE的批量编辑合并代码-或者使用coney也可以" class="headerlink" title="3使用VSCODE的批量编辑合并代码 或者使用coney也可以"></a>3使用VSCODE的批量编辑合并代码 或者使用coney也可以</h3><p>UNSOPHISTICATED_DISPUTEdemo(“简单纠纷”, 01)<br>GENERAL_DISPUTESdemo(“一般纠纷”, 02)<br>MAJOR_DISPUTESdemo(“重大纠纷”, 03)<br>DIFFICULT_DISPUTESdemo(“疑难纠纷”, 04)</p><h3 id="4得到所有枚举类型和英文大写显示"><a href="#4得到所有枚举类型和英文大写显示" class="headerlink" title="4得到所有枚举类型和英文大写显示"></a>4得到所有枚举类型和英文大写显示</h3><h2 id="提取数据库表设计信息"><a href="#提取数据库表设计信息" class="headerlink" title="提取数据库表设计信息"></a>提取数据库表设计信息</h2><h3 id="数据库表DDL数据模板一份"><a href="#数据库表DDL数据模板一份" class="headerlink" title="数据库表DDL数据模板一份"></a>数据库表DDL数据模板一份</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'自增'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>login_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户登录名'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>mobile_phone<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'手机号'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>user_type<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户类型'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>id_card<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'身份证'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>card_type<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'证件种类'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>user_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户姓名'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>head_portrait_url<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'头像'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>password<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'密码'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>is_real_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'是否实名'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>is_facial_verify<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'是否完成人脸识别'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>last_login_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'最后登录时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'状态 0 正常 1 删除'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>remark<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'备注'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_user<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建人'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_user<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'修改人'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">timestamp</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>version<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'版本号'</span><span class="token punctuation">,</span>  <span class="token number">cc</span><span class="token punctuation">.</span>gc <span class="token operator">^</span><span class="token operator">-</span>1q <span class="token comment" spellcheck="true">// 获取备注</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>uk_user_mobilePhone<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>mobile_phone<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">202384</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 ROW_FORMAT<span class="token operator">=</span>COMPACT <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'用户表'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>conyEdit可以做很多方便开发的事情，不管是开发在简单的数据处理上更加方便。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> conyEdit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conyEdit </tag>
            
            <tag> Enum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>coneyEdit使用笔记</title>
      <link href="/2019/09/03/coneyEdit%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/09/03/coneyEdit%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>coney edit 是一个很好的协助开发的软件尤其是数据批量处理上有很强大的功能</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>conney edit的一些常使用的示例</p></blockquote><h3 id="字符串列表转大写（驼峰）"><a href="#字符串列表转大写（驼峰）" class="headerlink" title="字符串列表转大写（驼峰）"></a>字符串列表转大写（驼峰）</h3><pre class="line-numbers language-bash"><code class="language-bash">    setempId    setempName    setjob    setsalary    setcity    cc.mc 4ch up // 转为大写且保持驼峰原则<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一维数组-二维数组-先放入数组中然后自己组装"><a href="#一维数组-二维数组-先放入数组中然后自己组装" class="headerlink" title="一维数组 二维数组 先放入数组中然后自己组装"></a>一维数组 二维数组 先放入数组中然后自己组装</h3><pre class="line-numbers language-bash"><code class="language-bash">    private  Date  lastLogin    cc.gc @w arra // 1获取值放入arra数组中    this is lastLogin    cc.gl arrb   // 2获取值放入arrb中    <span class="token variable">$arra</span>.2 <span class="token variable">$arra</span>.3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$arra</span>.2<span class="token punctuation">)</span> objs<span class="token punctuation">[</span><span class="token comment" spellcheck="true">#1]; // $arrb</span>    cc.p  // 组装需要的数据并且打印<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="替换文本正则替换"><a href="#替换文本正则替换" class="headerlink" title="替换文本正则替换"></a>替换文本正则替换</h3><pre class="line-numbers language-bash"><code class="language-bash">    cc.ges /\w+/ a // 正则匹配并且将值放入数组中    cc.rc 5pw <span class="token variable">$a</span>  // 替换文本    cc.rs /field\d+/ <span class="token variable">$a</span> //正则替换文本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="coneyEdit-命令说明"><a href="#coneyEdit-命令说明" class="headerlink" title="coneyEdit 命令说明"></a>coneyEdit 命令说明</h3><pre class="line-numbers language-bash"><code class="language-bash">cc.开头其中的字符代表的含义列操作必须最后加-----c行操作必须最后加-----l字符串必须最后加-----sg --- getb --- beforea --- afterr --- replaced --- deletes --- <span class="token function">sort</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符类型说明"><a href="#字符类型说明" class="headerlink" title="字符类型说明"></a>字符类型说明</h3><table><thead><tr><th>简写</th><th align="center">英文</th><th align="right">说明</th></tr></thead><tbody><tr><td>pw</td><td align="center">programWord</td><td align="right"><strong>程序字</strong></td></tr><tr><td>w</td><td align="center">word</td><td align="right"><strong>单词</strong></td></tr><tr><td>v</td><td align="center">visibleString</td><td align="right"><strong>可视字符串</strong></td></tr><tr><td>b</td><td align="center">blankString</td><td align="right"><strong>空白字符串</strong></td></tr><tr><td>q</td><td align="center">quotedString</td><td align="right"><strong>引用字符串</strong></td></tr><tr><td>dq</td><td align="center">doubleQuotedString</td><td align="right"><strong>双引号字符串</strong></td></tr><tr><td>sq</td><td align="center">singleQuotedString</td><td align="right"><strong>单引号字符串</strong></td></tr><tr><td>p</td><td align="center">punctuationString</td><td align="right">标点字符串</td></tr><tr><td>d</td><td align="center">digitalString</td><td align="right">数字字符串</td></tr><tr><td>i</td><td align="center">int</td><td align="right"><strong>int数字</strong></td></tr><tr><td>f</td><td align="center">float</td><td align="right">浮点数</td></tr><tr><td>a</td><td align="center">lowerCaseLetterString</td><td align="right">小写字母字符串</td></tr><tr><td>A</td><td align="center">upperCaseLetterString</td><td align="right">大写字母字符串</td></tr><tr><td>aA</td><td align="center">letterString</td><td align="right">信笺字符串</td></tr><tr><td>asc</td><td align="center">ascString</td><td align="right">字符串</td></tr><tr><td>nonAsc</td><td align="center">nonAscString</td><td align="right">非字符串</td></tr><tr><td>cjk</td><td align="center">cjkString</td><td align="right">CJK</td></tr><tr><td>z</td><td align="center">cjkString</td><td align="right">CJK</td></tr><tr><td>ch</td><td align="center">char</td><td align="right"><strong>字符</strong></td></tr></tbody></table><h3 id="常用说明"><a href="#常用说明" class="headerlink" title="常用说明"></a>常用说明</h3><pre><code> cc.gc 3w a // 获取第三列 cc.gc 1q  // 获取第一列 cc.dc 1v // 删除第一列 cc.gac 1/\s+/ //获取正则表达式匹配的第一列之后的数据 cc.gl @cjk // 获取包含cjk的行 cc.gs @w // 获取匹配正则w的所有字符串 cc.gc 3w -l /^String/ // 获取第三列匹配正则的值，添加行过滤条件 cc.dc 1:_ //去除数据库字段下划线 cc.mac 1:" ltrim // 去除"后字符串左边的空格 cc.ms @i squo // 匹配的字符串加单引号 quo双引号  cc.gac 1b a // 取空格后的第一个字符串 1b代表空格 cc.p 9 '#&lt;03&gt;, ' 打印，必须有单引号 private String $a // this is $b  //打印 cc.p  private String #001; cc.pnn 6 //打印时候没有换行符 Date updateTime; cc.gc ^-1w  // 获取倒数第一列 cc.rc 3/\w+/ / /正则替换第三列 cc.gc 2i       // 获取第二列的数值 cc.gc 2pw -l /hello/  //获取第二列，添加过滤条件 cc.gc ^-1pw a          // 获取所有DDL脚本的注释 hello:sss; cc.gbc 1:: a           //获取：前面的第一行 private String $tx.1  --- $tx.2 cc.p // 处理表格数据</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> conyEdit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conyEdit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-使用</title>
      <link href="/2019/09/03/mybatis-%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/09/03/mybatis-%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>mybatis很方便，不用像hibernate一样关心太多的关联关系，也不用写JPA<br>本文主要介绍mybatis的一些常用用法和注意事项</p></blockquote><h2 id="EXAMPLE使用"><a href="#EXAMPLE使用" class="headerlink" title="EXAMPLE使用"></a>EXAMPLE使用</h2><pre class="line-numbers language-java"><code class="language-java">    Example example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 排序</span>    example<span class="token punctuation">.</span><span class="token function">setOrderByClause</span><span class="token punctuation">(</span><span class="token string">"yourCode desc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//yourCode 是实体类中的字段名称，非数据库字段名称</span>    example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">"yourCode"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>lawCase<span class="token punctuation">.</span><span class="token function">getMediationMechanismId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>demo<span class="token operator">></span> list <span class="token operator">=</span> demoMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      demo demo <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      disputeDetail<span class="token punctuation">.</span><span class="token function">setMediateOrganization</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token function">getDeptname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mybatis-Generator使用"><a href="#mybatis-Generator使用" class="headerlink" title="mybatis Generator使用"></a>mybatis Generator使用</h2><blockquote><p>mybatis Generator可以很方便的通过数据库生成mapper和相关domain文件, 只需要加一下配置即可，网上有很多教程。<br>  ECLIPSE 推荐命令 mybatis-generator:generate </p></blockquote><h2 id="打包插件"><a href="#打包插件" class="headerlink" title="打包插件"></a>打包插件</h2><pre class="line-numbers language-XML"><code class="language-XML">    <plugin>            <groupId>org.mybatis.generator</groupId>            <artifactId>mybatis-generator-maven-plugin</artifactId>            <version>1.3.5</version>            <configuration>                <verbose>true</verbose>                <overwrite>true</overwrite>            </configuration>            <dependencies>                <!--MyBatis Generator及工具 -->                <dependency>                    <groupId>org.mybatis.generator</groupId>                    <artifactId>mybatis-generator-core</artifactId>                    <version>1.3.5</version>                </dependency>                <dependency>                    <groupId>tk.mybatis</groupId>                    <artifactId>mapper</artifactId>                    <version>3.4.6</version>                </dependency>            </dependencies>        </plugin><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mabatis-常见使用说明"><a href="#mabatis-常见使用说明" class="headerlink" title="mabatis 常见使用说明"></a>mabatis 常见使用说明</h2><h3 id="result数据类型接收问题"><a href="#result数据类型接收问题" class="headerlink" title="result数据类型接收问题"></a>result数据类型接收问题</h3><blockquote><p>resultType 和 resultMap的区别，如果是DTO接收数据则使用resultType,如果没有DTO则使用resultMAP接收。</p></blockquote><h3 id="1-mybatis-ADDBATCH插入数据问题"><a href="#1-mybatis-ADDBATCH插入数据问题" class="headerlink" title="1 mybatis ADDBATCH插入数据问题"></a>1 mybatis ADDBATCH插入数据问题</h3><blockquote><p>如果不设置allowMultiQueries=true, 批量插入时候会出现数据字段丢失问题。</p></blockquote><pre class="line-numbers language-yml"><code class="language-yml">jdbc.url=jdbc:mysql://218.94.1.197:18366/business_dev?useUnicode=yes&characterEncoding=UTF-8&allowMultiQueries=true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="mybatis批量更新数据使用LIST"><a href="#mybatis批量更新数据使用LIST" class="headerlink" title="mybatis批量更新数据使用LIST"></a>mybatis批量更新数据使用LIST</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">updateBatch</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"list"</span><span class="token punctuation">)</span> List<span class="token operator">&lt;</span>YourDto<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBatch<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bean<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            UPDATE green_beans            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>                stock=#{bean.stock}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>                beanUid = #{bean.beanUid}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>mybatis常用注意事项和用法。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK8多线程并发处理</title>
      <link href="/2019/08/28/JDK8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86/"/>
      <url>/2019/08/28/JDK8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>jdk8提供了新的链式编程和多线程并发处理方法，异常统一处理, CompletableFuture。</p></blockquote><h2 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jackromer<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>Thread<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CompletableFuture<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>BiConsumer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 此executor线程池如果不传,CompletableFuture经测试默认只启用最多3个线程,所以最好自己指定线程数量</span>  ExecutorService executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 参数</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> webPageLinks <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token string">"H"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">>></span> pageContentFutures <span class="token operator">=</span> webPageLinks<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>webPageLink <span class="token operator">-</span><span class="token operator">></span> <span class="token function">handle</span><span class="token punctuation">(</span>webPageLink<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> allFutures <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>pageContentFutures<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">[</span>pageContentFutures<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    allFutures<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"所有线程已执行完[{}]"</span><span class="token punctuation">,</span> allFutures<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    allFutures<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BiConsumer</span><span class="token operator">&lt;</span>Void<span class="token punctuation">,</span> Throwable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Void aVoid<span class="token punctuation">,</span> Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行最后一步操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// doSth();</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"耗时:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> 1000L<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// executor 可不传入,则默认最多3个线程</span>  CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">handle</span><span class="token punctuation">(</span>String pageLink<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// int i = 1/0;</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行任务"</span> <span class="token operator">+</span> pageLink<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>Throwable<span class="token punctuation">,</span> Void<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 捕捉异常,不会导致整个流程中断</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> Void <span class="token function">apply</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"线程[{}]发生了异常, 继续执行其他线程,错误详情[{}]"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="atomic包装类在多线程的使用"><a href="#atomic包装类在多线程的使用" class="headerlink" title="atomic包装类在多线程的使用"></a>atomic包装类在多线程的使用</h2><blockquote><p>我们知道AtomicLong、AtomicInteger是基于硬件级别cas实现的保证线程安全的自增类，能保证原子化的自增操作。在多线程下，性能远好于加锁synchronized。</p></blockquote><h3 id="AutomicLong"><a href="#AutomicLong" class="headerlink" title="AutomicLong"></a>AutomicLong</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAtomicLong</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> AtomicLong ai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        MyThread mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Long time <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间："</span> <span class="token operator">+</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ai<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> 100000000L<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已达到1亿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ai<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从automicLong 的add代码可以看出，其每次更新都调用compareAndSet方法，通过死循环的方式CAS到特定的值，达到更新数据的目的.</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">updateAndGet</span><span class="token punctuation">(</span>IntUnaryOperator updateFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> prev<span class="token punctuation">,</span> next<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        prev <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        next <span class="token operator">=</span> updateFunction<span class="token punctuation">.</span><span class="token function">applyAsInt</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LongAdder"><a href="#LongAdder" class="headerlink" title="LongAdder"></a>LongAdder</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLongAdder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LongAdder ai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LongAdder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        MyThread mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Long time <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间："</span> <span class="token operator">+</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mt<span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ai<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> 100000000L<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已达到1亿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ai<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>LongAdder如何保证高并发和效率呢，先看下其ADD方法代码</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Cell<span class="token punctuation">[</span><span class="token punctuation">]</span> as<span class="token punctuation">;</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> v<span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span> Cell a<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>as <span class="token operator">=</span> cells<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">casBase</span><span class="token punctuation">(</span>b <span class="token operator">=</span> base<span class="token punctuation">,</span> b <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> uncontended <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>as <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>m <span class="token operator">=</span> as<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>            <span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span><span class="token function">getProbe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span>            <span class="token operator">!</span><span class="token punctuation">(</span>uncontended <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">cas</span><span class="token punctuation">(</span>v <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">,</span> v <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">longAccumulate</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> null<span class="token punctuation">,</span> uncontended<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其中使用了cell类，看一下源码</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@sun</span><span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Contended <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Cell</span> <span class="token punctuation">{</span>    <span class="token keyword">volatile</span> <span class="token keyword">long</span> value<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// volatile也使用了cas的机制</span>    <span class="token function">Cell</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> value <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">cas</span><span class="token punctuation">(</span><span class="token keyword">long</span> cmp<span class="token punctuation">,</span> <span class="token keyword">long</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> cmp<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Unsafe mechanics</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Unsafe UNSAFE<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            UNSAFE <span class="token operator">=</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Unsafe<span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> ak <span class="token operator">=</span> Cell<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>            valueOffset <span class="token operator">=</span> UNSAFE<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span>                <span class="token punctuation">(</span>ak<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Cell类也使用了CAS机制保证原子性的线程安全，但是为什么LongAdder会在多线程的时候比AtomicLong性能更好呢。回头再看一下其ADD方法，可以大致发现其使用了热点分离的思路对automicLong进行了优化，在CAS竞争激烈的时候,将竞争的数据进行分解.基于这个思路,虽然在CAS操作中没有锁,但是像减少锁粒度这种分离热点的思路依然可以使用。</p></blockquote><blockquote><p>一种可行的方案就是仿造ConcurrengHashMap,将热点数据分离,比如,可以将AtomicInteger的内部核心数据value分离成一个数组,每个线程访问时,通过哈希等算法映射到其中一个数字进行计数,而最终的计数结果,则为这个数组的求和累加。</p></blockquote><blockquote><p>热点数据value被分离成多个单元cell,每个cell独自维护内部的值,当前对象的实际值由所有的cell累计合成,这样,热点就进行了有效的分离,提高了并行度,LongAdder正是使用了这种思想,其中的CELL就想当于ConcurrengHashMap数组中的分段加锁，其真实的数据是多个CELL值得叠加，所以longAdder在多线程并发时候比AtomicLong有更好得性能。</p></blockquote><blockquote><p>实验结果是只有4个线程的情况下，多个线程对一个变量加到1亿时，AtomicLong用了2.1秒，LongAdder用了2.2秒，性能差于AtomicLong。</p></blockquote><blockquote><p>修改线程为50时，AtomicLong用了3秒，LongAdder用了2.3秒。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>JDK提供了更加方便安全得atomic类用于开发人员在多线程并发时候处理数据，同时也提供了CompletableFuture等新的多线程并发处理技术，让多线程处理更加的方便。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JDK8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda处理集合</title>
      <link href="/2019/08/27/lambda%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88/"/>
      <url>/2019/08/27/lambda%E5%A4%84%E7%90%86%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>java8 lambda表达式利用流处理各种集合</p></blockquote><h1 id="处理list"><a href="#处理list" class="headerlink" title="处理list"></a>处理list</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jdk8Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Person<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张1"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p101 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张101"</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张2"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张3"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张4"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张5"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张6"</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p101<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 1.forEach()进行遍历集合         *    item：可以是任意值。类似于for循环中的循环值         */</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//设置值</span>            item<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//输出语句</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 2.stream()流操作         */</span>        <span class="token comment" spellcheck="true">//2.1. 去重 distinct() 去重；collect(Collectors.toList())。封装成集合</span>        List<span class="token operator">&lt;</span>Person<span class="token operator">></span> distinctList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.2 排序  sorted((第一个对象，第二个对象)->返回值)  （升降序看是第几个对象与第几个对象比较）</span>        List<span class="token operator">&lt;</span>Person<span class="token operator">></span> sortedList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.3 过滤 ， filter(item->{})   item为每一项。 按照自己的需求来筛选list中的数据</span>        List<span class="token operator">&lt;</span>Person<span class="token operator">></span> filterList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item<span class="token operator">-</span><span class="token operator">></span>item<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.4 map(), 提取对象中的某一元素.  用每一项来获得属性（也可以直接用  对象::get属性()）</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> mapList1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Person<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> mapList2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item<span class="token operator">-</span><span class="token operator">></span>item<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.5 统计 sum() 。mapToDouble() 转换成double。还有其他类型转换。可以自己研究。</span>        <span class="token comment" spellcheck="true">//           max(),min(),average()</span>        <span class="token keyword">double</span> sum <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToDouble</span><span class="token punctuation">(</span>Person<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.6 分组   Collectors.groupingBy(属性名)</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Person<span class="token operator">>></span> map <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Person<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.7 多重分组 Collectors.groupingBy(属性，Collectors.groupingBy(属性))</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Person<span class="token operator">>>></span> map2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>t<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.8 分组并计算综合        Collectors.summarizingLong()</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> LongSummaryStatistics<span class="token operator">>></span> map3 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>t<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>t<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Collectors<span class="token punctuation">.</span><span class="token function">summarizingLong</span><span class="token punctuation">(</span>Person<span class="token operator">:</span><span class="token operator">:</span>getSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         *  3.  集合比较的简写方式         */</span>        list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HASHMAP底层原理分析</title>
      <link href="/2019/08/27/HASHMAP%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>/2019/08/27/HASHMAP%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍hashmap的原理和说明</p></blockquote><h2 id="hashMap-部分源码说明"><a href="#hashMap-部分源码说明" class="headerlink" title="hashMap 部分源码说明"></a><a href="#hashMap-部分源码说明" title="hashMap 部分源码说明"></a>hashMap 部分源码说明</h2><blockquote><p>put 方法</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>                       <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    e <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                    e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1 for 1st this will change linkList to red-black tree</span>                                <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        p <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// existing mapping for key</span>                    V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span>                        e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                    <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token operator">++</span>modCount<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>                <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>转为TreeNode过程</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/**         * Replaces all linked nodes in bin at index for given hash unless         * table is too small, in which case resizes instead.         */</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">treeifyBin</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> n<span class="token punctuation">,</span> index<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MIN_TREEIFY_CAPACITY<span class="token punctuation">)</span>                <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hd <span class="token operator">=</span> null<span class="token punctuation">,</span> tl <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span>                    TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> <span class="token function">replacementTreeNode</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>tl <span class="token operator">==</span> null<span class="token punctuation">)</span>                        hd <span class="token operator">=</span> p<span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        p<span class="token punctuation">.</span>prev <span class="token operator">=</span> tl<span class="token punctuation">;</span>                        tl<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    tl <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> hd<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    hd<span class="token punctuation">.</span><span class="token function">treeify</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre><code>&gt; TreeNode对象```java        /**         * Entry for Tree bins. Extends LinkedHashMap.Entry (which in turn         * extends Node) so can be used as extension of either regular or         * linked node.         */        static final class TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt; {            TreeNode&lt;K,V&gt; parent;  // red-black tree links            TreeNode&lt;K,V&gt; left;            TreeNode&lt;K,V&gt; right;            TreeNode&lt;K,V&gt; prev;    // needed to unlink next upon deletion            boolean red;            TreeNode(int hash, K key, V val, Node&lt;K,V&gt; next) {                super(hash, key, val, next);            }            /**             * Returns root of tree containing this node.             */            final TreeNode&lt;K,V&gt; root() {                for (TreeNode&lt;K,V&gt; r = this, p;;) {                    if ((p = r.parent) == null)                        return r;                        r = p;                }            }        }</code></pre><hr><blockquote><p>可以看出在链表中容量大于等于8后，链表转为了红黑树以提高hashmap性能，此JDK为1.8。</p></blockquote><h2 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a><a href="#HashMap和Hashtable的区别" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h2><blockquote><p>Hashtable是基于陈旧的Dictionary类的，HashMap是java 1.2引进的Map接口的一个现实。</p></blockquote><blockquote><p>Hashtable是同步的，这个类中的一些方法保证了Hashtable中的对象是线程安全的</p></blockquote><blockquote><p>HashMap则是异步的，因此HashMap中的对象并不是线程安全的，因为同步的要求会影响执行的效率，所以如果你不需要线程安全的结合那么使用HashMap是一个很好的选择，这样可以避免由于同步带来的不必要的性能开销，从而提高效率，我们一般所编写的程序都是异步的，但如果是服务器端的代码除外。</p></blockquote><blockquote><p>HashMap可以将空值作为一个表的条目的key或value, Hashtable不能放入空值（null）.</p></blockquote><h2 id="HashMap说明"><a href="#HashMap说明" class="headerlink" title="HashMap说明"></a><a href="#HashMap说明" title="HashMap说明"></a>HashMap说明</h2><blockquote><p>HashMap 的底层实现是数组，这大大加快了其速率，hashMap的快来源于hash表，而hash表的主干就是数组.</p></blockquote><blockquote><p>hash表为何快呢，hashMap在查找和增加元素时会先通过KEY去hash表中找到其引用的实际存储地址，从而操作该数据,其数据其实是一个ENTRY对象.</p></blockquote><blockquote><p>hash冲突，当对某个元素通过hash计算得到的的存储地址，在插入时发现此地址已经被其他元素占用，则产生hash冲突.</p></blockquote><blockquote><p>哈希冲突的解决方案有多种:开放定址法（发生冲突，继续寻找下一块未被占用的存储地址），再散列函数法，链地址法，而HashMap即是采用了链地址法，也就是数组+链表的方式(JDK7之前)，JDK8采用的是数组+链表/红黑树的方式。当同一个hash值的节点数大于8时，将不再以单链表的形式存储了，会被调整成一颗红黑树，这就是JDK7与JDK8中HashMap实现的最大区别。</p></blockquote><blockquote><p>简单来说，HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的，如果定位到的数组位置不含链表（当前entry的next指向null）,那么对于查找，添加等操作很快，仅需一次寻址即可；</p></blockquote><blockquote><p>如果定位到的数组包含链表，对于添加操作，其时间复杂度为O(n)，首先遍历链表，存在即覆盖，否则新增；对于查找操作来讲，仍需遍历链表，然后通过key对象(比如student)的equals方法逐一比对查找。so，性能考虑，HashMap中的链表出现越少，性能才会越好。</p></blockquote><p><img src="/images/hashmap/hash-link.png" alt=""></p><blockquote><p>hashMap threshold 指当前map容量达到threshold%时对hashMap进行扩容，默认为0.75</p></blockquote><blockquote><p>如何减少hash冲突,使用final对象作为key，并且从写equal方法，hashcode方法，提高hashcode性能。</p></blockquote><h2 id="两个键的hashcode相同，如何获取值对象"><a href="#两个键的hashcode相同，如何获取值对象" class="headerlink" title="两个键的hashcode相同，如何获取值对象"></a><a href="#两个键的hashcode相同，如何获取值对象" title="两个键的hashcode相同，如何获取值对象"></a>两个键的hashcode相同，如何获取值对象</h2><blockquote><p>如果两个键的hashcode相同，即找到bucket位置之后，我们通过key.equals（）找到链表LinkedList中正确的节点，最终找到要找的值对象。</p></blockquote><blockquote><p>object.equal()方法只判断两个引用变量是否为同一个对象，无法真的判断对象在逻辑上是否相等.</p></blockquote><blockquote><p>所以尽量使用不可变的、声明作final的对象，并且采用合适的equals()和hashCode()方法，减少碰撞的发生，提高效率。不可变性使得能够缓存不同键的hashcode，这将提高整个获取对象的速度，使用String，Interger这样的wrapper类作为键是非常好的选择。</p></blockquote><h2 id="CocurrentHashMap为什么线程安全"><a href="#CocurrentHashMap为什么线程安全" class="headerlink" title="CocurrentHashMap为什么线程安全"></a><a href="#CocurrentHashMap为什么线程安全" title="CocurrentHashMap为什么线程安全"></a>CocurrentHashMap为什么线程安全</h2><blockquote><p>CocurrentHashMap使用了分段锁技术：ConcurrentHashMap的主干是个Segment数组，ConcurrentHashMap相比HashTable而言解决的问题就是的它不是锁全部数据，而是锁一部分数据，这样多个线程访问的时候就不会出现竞争关系,不需要排队等待了。</p></blockquote><blockquote><p>ConcurrentHashMap是分段并发分段进行读取数据的,Segment 里面有一个Count字段，用来表示当前Segment中元素的个数它的类型是volatile变量。所有的操作到最后都会在最后一步更新count这个变量，由于volatile变量 happer-before的特性使得get方法能够几乎准确的获取最新的结构更新。</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="#参考" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/hefenglian/article/details/79763634" target="_blank" rel="noopener">HashMap实现原理</a></p><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hashmap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> hashmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA-MONGODB简单使用</title>
      <link href="/2019/08/27/JAVA-MONGODB%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/27/JAVA-MONGODB%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍MongoDB和java简单使用MongoDB，MongoDB作为流行的 NOT ONLY SQL 数据库，和关系型数据库mysql，oracle等的ACID不同，非关系型数据库为分布式系统和大数据的应用提供了良好的支持.当然MONGODB存储的内容是文档型的，这样也就有机会对某些字段建立索引，实现关系数据库的某些功能。</p></blockquote><h2 id="MongoDB的优点"><a href="#MongoDB的优点" class="headerlink" title="MongoDB的优点"></a><a href="#MongoDB的优点" title="MongoDB的优点"></a>MongoDB的优点</h2><blockquote><ul><li>高可扩展性</li><li>分布式计算</li><li>低成本</li><li>架构的灵活性，半结构化数据</li><li>没有复杂的关系</li></ul></blockquote><h2 id="MongoDb的缺点"><a href="#MongoDb的缺点" class="headerlink" title="MongoDb的缺点"></a><a href="#MongoDb的缺点" title="MongoDb的缺点"></a>MongoDb的缺点</h2><blockquote><ul><li>没有标准化</li><li>有限的查询功能（到目前为止）</li><li>最终一致是不直观的程序</li></ul></blockquote><h2 id="MongoDb-无密码连接"><a href="#MongoDb-无密码连接" class="headerlink" title="MongoDb 无密码连接"></a><a href="#MongoDb-无密码连接" title="MongoDb 无密码连接"></a>MongoDb 无密码连接</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>MongoClient<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoDatabase<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoDBJDBC</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">try</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 连接到 mongodb 服务</span>             MongoClient mongoClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoClient</span><span class="token punctuation">(</span> <span class="token string">"localhost"</span> <span class="token punctuation">,</span> <span class="token number">27017</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 连接到数据库</span>             MongoDatabase mongoDatabase <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">"mycol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connect to database successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MongoDB-密码连接"><a href="#MongoDB-密码连接" class="headerlink" title="MongoDB 密码连接"></a><a href="#MongoDB-密码连接" title="MongoDB 密码连接"></a>MongoDB 密码连接</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>      <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>      <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>MongoClient<span class="token punctuation">;</span>      <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>MongoCredential<span class="token punctuation">;</span>      <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>ServerAddress<span class="token punctuation">;</span>      <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoDatabase<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoDBJDBC</span> <span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//连接到MongoDB服务 如果是远程连接可以替换“localhost”为服务器所在IP地址  </span>                <span class="token comment" spellcheck="true">//ServerAddress()两个参数分别为 服务器地址 和 端口  </span>                ServerAddress serverAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token number">27017</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  List<span class="token operator">&lt;</span>ServerAddress<span class="token operator">></span> addrs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ServerAddress<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  addrs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>serverAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//MongoCredential.createScramSha1Credential()三个参数分别为 用户名 数据库名称 密码  </span>                MongoCredential credential <span class="token operator">=</span> MongoCredential<span class="token punctuation">.</span><span class="token function">createScramSha1Credential</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"databaseName"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  List<span class="token operator">&lt;</span>MongoCredential<span class="token operator">></span> credentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>MongoCredential<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  credentials<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>credential<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//通过连接认证获取MongoDB连接  </span>                MongoClient mongoClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoClient</span><span class="token punctuation">(</span>addrs<span class="token punctuation">,</span>credentials<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//连接到数据库  </span>                MongoDatabase mongoDatabase <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">"databaseName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connect to database successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MongoDB-创建集合collection"><a href="#MongoDB-创建集合collection" class="headerlink" title="MongoDB 创建集合collection"></a><a href="#MongoDB-创建集合collection" title="MongoDB 创建集合collection"></a>MongoDB 创建集合collection</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>MongoClient<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoDatabase<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoDBJDBC</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">try</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 连接到 mongodb 服务</span>          MongoClient mongoClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoClient</span><span class="token punctuation">(</span> <span class="token string">"localhost"</span> <span class="token punctuation">,</span> <span class="token number">27017</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 连接到数据库</span>          MongoDatabase mongoDatabase <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">"mycol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connect to database successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mongoDatabase<span class="token punctuation">.</span><span class="token function">createCollection</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MongoDB-获取集合"><a href="#MongoDB-获取集合" class="headerlink" title="MongoDB 获取集合"></a><a href="#MongoDB-获取集合" title="MongoDB 获取集合"></a>MongoDB 获取集合</h2><blockquote><p>我们可以使用com.mongodb.client.MongoDatabase类的 getCollection() 方法来获取一个集合</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> org<span class="token punctuation">.</span>bson<span class="token punctuation">.</span>Document<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>MongoClient<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoCollection<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoDatabase<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoDBJDBC</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">try</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 连接到 mongodb 服务</span>             MongoClient mongoClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoClient</span><span class="token punctuation">(</span> <span class="token string">"localhost"</span> <span class="token punctuation">,</span> <span class="token number">27017</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 连接到数据库</span>             MongoDatabase mongoDatabase <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">"mycol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connect to database successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           MongoCollection<span class="token operator">&lt;</span>Document<span class="token operator">></span> collection <span class="token operator">=</span> mongoDatabase<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合 test 选择成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MongoDB-插入文档"><a href="#MongoDB-插入文档" class="headerlink" title="MongoDB 插入文档"></a><a href="#MongoDB-插入文档" title="MongoDB 插入文档"></a>MongoDB 插入文档</h2><blockquote><p>我们可以使用com.mongodb.client.MongoCollection类的 insertMany() 方法来插入一个文档</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>bson<span class="token punctuation">.</span>Document<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>MongoClient<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoCollection<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoDatabase<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoDBJDBC</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 连接到 mongodb 服务</span>             MongoClient mongoClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoClient</span><span class="token punctuation">(</span> <span class="token string">"localhost"</span> <span class="token punctuation">,</span> <span class="token number">27017</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 连接到数据库</span>             MongoDatabase mongoDatabase <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">"mycol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connect to database successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             MongoCollection<span class="token operator">&lt;</span>Document<span class="token operator">></span> collection <span class="token operator">=</span> mongoDatabase<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合 test 选择成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//插入文档  </span>             <span class="token comment" spellcheck="true">/**              * 1. 创建文档 org.bson.Document 参数为key-value的格式              * 2. 创建文档集合List&lt;Document>              * 3. 将文档集合插入数据库集合中 mongoCollection.insertMany(List&lt;Document>) 插入单个文档可以用 mongoCollection.insertOne(Document)              * */</span>             Document document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"MongoDB"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>               <span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"description"</span><span class="token punctuation">,</span> <span class="token string">"database"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>               <span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"likes"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span>               <span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"by"</span><span class="token punctuation">,</span> <span class="token string">"Fly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               List<span class="token operator">&lt;</span>Document<span class="token operator">></span> documents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Document<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               documents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span>               collection<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span>documents<span class="token punctuation">)</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文档插入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>             System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MongoDB-检索所有文档"><a href="#MongoDB-检索所有文档" class="headerlink" title="MongoDB 检索所有文档"></a><a href="#MongoDB-检索所有文档" title="MongoDB 检索所有文档"></a>MongoDB 检索所有文档</h2><blockquote><p>我们可以使用 com.mongodb.client.MongoCollection 类中的 find() 方法来获取集合中的所有文档。此方法返回一个游标，所以你需要遍历这个游标。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> org<span class="token punctuation">.</span>bson<span class="token punctuation">.</span>Document<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>MongoClient<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>FindIterable<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoCollection<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoCursor<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoDatabase<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoDBJDBC</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 连接到 mongodb 服务</span>             MongoClient mongoClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoClient</span><span class="token punctuation">(</span> <span class="token string">"localhost"</span> <span class="token punctuation">,</span> <span class="token number">27017</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 连接到数据库</span>             MongoDatabase mongoDatabase <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">"mycol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connect to database successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             MongoCollection<span class="token operator">&lt;</span>Document<span class="token operator">></span> collection <span class="token operator">=</span> mongoDatabase<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合 test 选择成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//检索所有文档  </span>             <span class="token comment" spellcheck="true">/**              * 1. 获取迭代器FindIterable&lt;Document>              * 2. 获取游标MongoCursor&lt;Document>              * 3. 通过游标遍历检索出的文档集合              * */</span>               FindIterable<span class="token operator">&lt;</span>Document<span class="token operator">></span> findIterable <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               MongoCursor<span class="token operator">&lt;</span>Document<span class="token operator">></span> mongoCursor <span class="token operator">=</span> findIterable<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">while</span><span class="token punctuation">(</span>mongoCursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mongoCursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>             System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MongoDB-更新文档"><a href="#MongoDB-更新文档" class="headerlink" title="MongoDB 更新文档"></a><a href="#MongoDB-更新文档" title="MongoDB 更新文档"></a>MongoDB 更新文档</h2><blockquote><p>你可以使用 com.mongodb.client.MongoCollection 类中的 updateMany() 方法来更新集合中的文档。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> org<span class="token punctuation">.</span>bson<span class="token punctuation">.</span>Document<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>MongoClient<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>FindIterable<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoCollection<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoCursor<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoDatabase<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Filters<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoDBJDBC</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 连接到 mongodb 服务</span>             MongoClient mongoClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoClient</span><span class="token punctuation">(</span> <span class="token string">"localhost"</span> <span class="token punctuation">,</span> <span class="token number">27017</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 连接到数据库</span>             MongoDatabase mongoDatabase <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">"mycol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connect to database successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             MongoCollection<span class="token operator">&lt;</span>Document<span class="token operator">></span> collection <span class="token operator">=</span> mongoDatabase<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合 test 选择成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//更新文档   将文档中likes=100的文档修改为likes=200   </span>             collection<span class="token punctuation">.</span><span class="token function">updateMany</span><span class="token punctuation">(</span>Filters<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"likes"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token string">"$set"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token string">"likes"</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//检索查看结果  </span>             FindIterable<span class="token operator">&lt;</span>Document<span class="token operator">></span> findIterable <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               MongoCursor<span class="token operator">&lt;</span>Document<span class="token operator">></span> mongoCursor <span class="token operator">=</span> findIterable<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">while</span><span class="token punctuation">(</span>mongoCursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mongoCursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>             System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MongoDB-删除第一个文档"><a href="#MongoDB-删除第一个文档" class="headerlink" title="MongoDB 删除第一个文档"></a><a href="#MongoDB-删除第一个文档" title="MongoDB 删除第一个文档"></a>MongoDB 删除第一个文档</h2><blockquote><p>要删除集合中的第一个文档，首先你需要使用com.mongodb.DBCollection类中的 findOne()方法来获取第一个文档，然后使用remove 方法删除。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> org<span class="token punctuation">.</span>bson<span class="token punctuation">.</span>Document<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>MongoClient<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>FindIterable<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoCollection<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoCursor<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>MongoDatabase<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>client<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Filters<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoDBJDBC</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 连接到 mongodb 服务</span>             MongoClient mongoClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoClient</span><span class="token punctuation">(</span> <span class="token string">"localhost"</span> <span class="token punctuation">,</span> <span class="token number">27017</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 连接到数据库</span>             MongoDatabase mongoDatabase <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string">"mycol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Connect to database successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             MongoCollection<span class="token operator">&lt;</span>Document<span class="token operator">></span> collection <span class="token operator">=</span> mongoDatabase<span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合 test 选择成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//删除符合条件的第一个文档  </span>             collection<span class="token punctuation">.</span><span class="token function">deleteOne</span><span class="token punctuation">(</span>Filters<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"likes"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//删除所有符合条件的文档  </span>             collection<span class="token punctuation">.</span><span class="token function">deleteMany</span> <span class="token punctuation">(</span>Filters<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"likes"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//检索查看结果  </span>             FindIterable<span class="token operator">&lt;</span>Document<span class="token operator">></span> findIterable <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               MongoCursor<span class="token operator">&lt;</span>Document<span class="token operator">></span> mongoCursor <span class="token operator">=</span> findIterable<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">while</span><span class="token punctuation">(</span>mongoCursor<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mongoCursor<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><p>本文简单介绍了MongoDB和MongoDB的简单使用，后面会介绍MongoDB的一些高级用法.</p><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> nosql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPRING TRANSACTIONAL-事务理解和使用</title>
      <link href="/2019/08/27/SPRING-TRANSACTIONAL-%E4%BA%8B%E5%8A%A1%E7%90%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/27/SPRING-TRANSACTIONAL-%E4%BA%8B%E5%8A%A1%E7%90%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<hr><hr><h2 id="SPRING-transactional-简介"><a href="#SPRING-transactional-简介" class="headerlink" title="SPRING transactional 简介"></a><a href="#SPRING-transactional-简介" title="SPRING transactional 简介"></a>SPRING transactional 简介</h2><blockquote><p>事务管理是企业级应用程序开发中必不可少的技术，用来确保数据的完整性和一致性。<br>事务就是一系列的动作，它们被当作一个单独的工作单元，这些动作要么全部完成，要么全部不起作用.</p></blockquote><h2 id="事务的四个关键属性-ACID"><a href="#事务的四个关键属性-ACID" class="headerlink" title="事务的四个关键属性(ACID)"></a><a href="#事务的四个关键属性-ACID" title="事务的四个关键属性(ACID)"></a>事务的四个关键属性(ACID)</h2><blockquote><p>① 原子性(atomicity):事务是一个原子操作，有一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用.<br>② 一致性(consistency):一旦所有事务动作完成，事务就被提交。数据和资源就处于一种满足业务规则的一致性状态中.<br>③ 隔离性(isolation):可能有许多事务会同时处理相同的数据，因此每个事物都应该与其他事务隔离开来，防止数据损坏.<br>④ 持久性(durability):一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响。通常情况下，事务的结果被写到持久化存储器中.  </p></blockquote><h2 id="事务回滚的触发机制"><a href="#事务回滚的触发机制" class="headerlink" title="事务回滚的触发机制"></a><a href="#事务回滚的触发机制" title="事务回滚的触发机制"></a>事务回滚的触发机制</h2><h3 id="1-transaction注解说明"><a href="#1-transaction注解说明" class="headerlink" title="1 @transaction注解说明"></a><a href="#1-transaction注解说明" title="1 @transaction注解说明"></a>1 @transaction注解说明</h3><pre class="line-numbers language-java"><code class="language-java">        This annotation type is generally directly comparable to Spring's        <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>RuleBasedTransactionAttribute<span class="token punctuation">}</span>        <span class="token keyword">class</span><span class="token punctuation">,</span> and in fact <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> AnnotationTransactionAttributeSource<span class="token punctuation">}</span> will directly        convert the data to the latter <span class="token keyword">class</span><span class="token punctuation">,</span> so that Spring's transaction support code        does not have to know about annotations<span class="token punctuation">.</span> If no rules are relevant to the exception<span class="token punctuation">,</span>        it will be treated like        <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>DefaultTransactionAttribute<span class="token punctuation">}</span>        <span class="token punctuation">(</span>rolling back on <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> RuntimeException<span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> Error<span class="token punctuation">}</span> but not on checked        exceptions<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>星号包裹部分明确指出：事务<strong>默认</strong>会在runtimeException 和 error 回滚，但是checked exception 不会回滚.</p></blockquote><h3 id="2-Checked-exception-和-Unchecked-exception"><a href="#2-Checked-exception-和-Unchecked-exception" class="headerlink" title="2 Checked exception 和 Unchecked exception"></a><a href="#2-Checked-exception-和-Unchecked-exception" title="2 Checked exception 和 Unchecked exception"></a>2 Checked exception 和 Unchecked exception</h3><h4 id="1-CheckedException已检查异常"><a href="#1-CheckedException已检查异常" class="headerlink" title="1.CheckedException已检查异常"></a><a href="#1-CheckedException已检查异常" title="1.CheckedException已检查异常"></a>1.CheckedException已检查异常</h4><blockquote><p>CheckedException继承自Exception，程序内部无法控制，必须做处理，要么使用try-atch块捕获，要么throws抛给上一层。<br>正确的程序在运行中，很容易出现的、情理可容的异常状况。可查异常虽然是异常状况，但在一定程度上它的发生是可以预计的，而且一旦发生这种异常状况，就必须采取某种方式进行处理。</p></blockquote><blockquote><p>除了RuntimeException及其子类以外，其他的Exception类及其子类都属于可查异常。这种异常的特点是Java编译器会检查它，<br>也就是说，当程序中可能出现这类异常，要么用try-catch语句捕获它，要么用throws子句声明抛出它，否则编译不会通过。</p></blockquote><h4 id="2-UnCheckedException未检查异常"><a href="#2-UnCheckedException未检查异常" class="headerlink" title="2.UnCheckedException未检查异常"></a><a href="#2-UnCheckedException未检查异常" title="2.UnCheckedException未检查异常"></a>2.UnCheckedException未检查异常</h4><blockquote><p>UnCheckedException继承自RuntimeException，一般是程序的逻辑问题引起的异常，不需要捕获，也不需要处理, 比如空指针异常等,包括运行时异常(RuntimeException与其子类)和错误(Error)。</p></blockquote><blockquote><p>运行时异常：都是RuntimeException类及其子类异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，这些异常是不检查异常，程序中可以选择捕&gt;获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</p></blockquote><blockquote><p>运行时异常的特点是Java编译器不会检查它，也就是说，当程序中可能出现这类异常，即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过。</p></blockquote><blockquote><p>非运行时异常 (编译异常)：是RuntimeException以外的异常，类型上都属于Exception类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。</p></blockquote><h3 id="3-异常的继承结构"><a href="#3-异常的继承结构" class="headerlink" title="3 异常的继承结构"></a><a href="#3-异常的继承结构" title="3 异常的继承结构"></a>3 异常的继承结构</h3><p><img src="/images/transaction/exception.png" alt=""></p><blockquote><p>当方法抛出runtimeException 或者error时 事务会回滚.</p></blockquote><h3 id="4-如何在事务回滚前trycatch异常，处理后再回滚-可以尝试下面的这三种方式"><a href="#4-如何在事务回滚前trycatch异常，处理后再回滚-可以尝试下面的这三种方式" class="headerlink" title="4 如何在事务回滚前trycatch异常，处理后再回滚,可以尝试下面的这三种方式"></a><a href="#4-如何在事务回滚前trycatch异常，处理后再回滚-可以尝试下面的这三种方式" title="4 如何在事务回滚前trycatch异常，处理后再回滚,可以尝试下面的这三种方式"></a>4 如何在事务回滚前trycatch异常，处理后再回滚,可以尝试下面的这三种方式</h3><pre class="line-numbers language-java"><code class="language-java">       SessionFactory sessionFactory <span class="token operator">=</span> hibernateTemplate<span class="token punctuation">.</span><span class="token function">getSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Session session <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Transaction tx  <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开启事务</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//do something</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//do something 比如记录日志</span>                <span class="token comment" spellcheck="true">//第一种方式 </span>                tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//手动回滚事务</span>                <span class="token comment" spellcheck="true">//第二种方式</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"runtime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重新抛出触发事务回滚机制的异常类 RuntimeException 或者 error</span>          <span class="token comment" spellcheck="true">//第三种方式</span>          TransactionAspectSupport<span class="token punctuation">.</span><span class="token function">currentTransactionStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Transactional-注解添加到类级上的使用"><a href="#5-Transactional-注解添加到类级上的使用" class="headerlink" title="5 @Transactional 注解添加到类级上的使用"></a><a href="#5-Transactional-注解添加到类级上的使用" title="5 @Transactional 注解添加到类级上的使用"></a>5 @Transactional 注解添加到类级上的使用</h3><blockquote><p>当把@Transactional 注解放在类级别时，表示所有该类的公共方法都配置相同的事务属性信息，EmployeeService 的所有方法都支持事务并且是只读。</p></blockquote><blockquote><p>当类级别配置了@Transactional，方法级别也配置了@Transactional时，应用程序会以方法级别的事务属性信息来管理事务。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">      <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span> Propagation<span class="token punctuation">.</span>SUPPORTS<span class="token punctuation">,</span>readOnly<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span>readOnly<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//方法级别的事务属性信息会覆盖类级别的相关配置信息。</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span>readOnly<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-Spring-的注解方式的事务实现机制"><a href="#6-Spring-的注解方式的事务实现机制" class="headerlink" title="6 Spring 的注解方式的事务实现机制"></a><a href="#6-Spring-的注解方式的事务实现机制" title="6 Spring 的注解方式的事务实现机制"></a>6 Spring 的注解方式的事务实现机制</h3><blockquote><p>在应用系统调用声明@Transactional 的目标方法时，Spring Framework默认使用AOP代理，在代码运行时生成一个代理对象，根据@Transactional的属性配置信息，这个代理对象决定该声明@Transactional的目标方法是否由拦截器 TransactionInterceptor 来使用拦截。</p></blockquote><blockquote><p>在TransactionInterceptor 拦截时，会在在目标方法开始执行之前创建并加入事务，并执行目标方法的逻辑, 最后根据执行情况是否出现异常，利用抽象事务管理器AbstractPlatformTransactionManager 操作数据源DataSource提交或回滚事务.</p></blockquote><h2 id="Spring-AOP-代理"><a href="#Spring-AOP-代理" class="headerlink" title="Spring AOP 代理"></a><a href="#Spring-AOP-代理" title="Spring AOP 代理"></a>Spring AOP 代理</h2><blockquote><p>Spring AOP 代理有CglibAopProxy和JdkDynamicAopProxy两种。</p></blockquote><blockquote><p>对于 CglibAopProxy，需要调用其内部类的DynamicAdvisedInterceptor的intercept方法。</p></blockquote><blockquote><p>对于 JdkDynamicAopProxy，需要调用其invoke方法。</p></blockquote><blockquote><p>正如上文提到的，事务管理的框架是由抽象事务管理器 AbstractPlatformTransactionManager来提供的，而具体的底层事务处理实现，由 PlatformTransactionManager 的具体实现类来实现，如事务管理器 DataSourceTransactionManager。</p></blockquote><blockquote><p>不同的事务管理器管理不同的数据资源DataSource，比如 DataSourceTransactionManager管理JDBC的Connection。</p></blockquote><h2 id="transactional-的属性和使用"><a href="#transactional-的属性和使用" class="headerlink" title="transactional 的属性和使用"></a><a href="#transactional-的属性和使用" title="transactional 的属性和使用"></a>transactional 的属性和使用</h2><blockquote><p>name 当在配置文件中有多个 TransactionManager , 可以用该属性指定选择哪个事务管理器。</p></blockquote><blockquote><p>propagation 事务的传播行为，默认值为 REQUIRED。</p></blockquote><blockquote><p>isolation 事务的隔离度，默认值采用 DEFAULT。</p></blockquote><blockquote><p>timeout 事务的超时时间，默认值为-1。如果超过该时间限制但事务还没有完成，则自动回滚事务。</p></blockquote><blockquote><p>read-only 指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true。</p></blockquote><blockquote><p>rollback-for 用于指定能够触发事务回滚的异常类型，如果有多个异常类型需要指定，各类型之间可以通过逗号分隔。</p></blockquote><blockquote><p>no-rollback- for 抛出no-rollback-for指定的异常类型，不回滚事务。</p></blockquote><h3 id="1-正确的设置-Transactional-的-propagation-属性"><a href="#1-正确的设置-Transactional-的-propagation-属性" class="headerlink" title="1 正确的设置@Transactional 的 propagation 属性"></a><a href="#1-正确的设置-Transactional-的-propagation-属性" title="1 正确的设置@Transactional 的 propagation 属性"></a>1 正确的设置@Transactional 的 propagation 属性</h3><blockquote><p>需要注意下面三种 propagation 可以不启动事务。本来期望目标方法进行事务管理，但若是错误的配置这三种 propagation，事务将不会发生回滚。</p></blockquote><blockquote><p>1 TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</p></blockquote><blockquote><p>2 TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</p></blockquote><blockquote><p>3 TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</p></blockquote><h3 id="2-正确的设置-Transactional-的-rollbackFor-属性"><a href="#2-正确的设置-Transactional-的-rollbackFor-属性" class="headerlink" title="2 正确的设置@Transactional 的 rollbackFor 属性"></a><a href="#2-正确的设置-Transactional-的-rollbackFor-属性" title="2 正确的设置@Transactional 的 rollbackFor 属性"></a>2 正确的设置@Transactional 的 rollbackFor 属性</h3><pre><code> @Transactional(propagation= Propagation.REQUIRED,rollbackFor= MyException.class)</code></pre><blockquote><p>默认情况下，如果在事务中抛出了未检查异常(继承自 RuntimeException 的异常)或者Error，则Spring将回滚事务；除此之外，Spring 不会回滚事务。</p></blockquote><blockquote><p>如果在事务中抛出其他类型的异常，并期望Spring能够回滚事务，可以指定rollbackFor。</p></blockquote><blockquote><p>通过分析 Spring 源码可以知道，若在目标方法中抛出的异常是rollbackFor指定的异常的子类，事务同样会回滚。</p></blockquote><h2 id="Transactional注解应用到public方法，才能进行事务管理。"><a href="#Transactional注解应用到public方法，才能进行事务管理。" class="headerlink" title="@Transactional注解应用到public方法，才能进行事务管理。"></a><a href="#Transactional注解应用到public方法，才能进行事务管理。" title="@Transactional注解应用到public方法，才能进行事务管理。"></a>@Transactional注解应用到<strong>public</strong>方法，才能进行事务管理。</h2><blockquote><p>这是因为在使用 Spring AOP代理时，Spring在调用TransactionInterceptor 在目标方法执行前后进行拦截之前,DynamicAdvisedInterceptor(CglibAopProxy的内部类)的intercept方法或JdkDynamicAopProxy的invoke方法.</p></blockquote><blockquote><p>这会间接调用AbstractFallbackTransactionAttributeSource的computeTransactionAttribute方法获取@Transactional注解的事务属性配置属性信息。</p></blockquote><blockquote><p>这个方法会检查目标方法的修饰符是不是public，若不是public，就不会获取@Transactional 的属性配置信息，最终会造成不会用 TransactionInterceptor 来拦截该目标方法进行事务管理,则事务失效。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">protected</span> TransactionAttribute <span class="token function">computeTransactionAttribute</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Don't allow no-public methods as required.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">allowPublicMethodsOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AOP事务自调用问题"><a href="#AOP事务自调用问题" class="headerlink" title="AOP事务自调用问题"></a><a href="#AOP事务自调用问题" title="AOP事务自调用问题"></a>AOP事务自调用问题</h2><blockquote><p>在 Spring的AOP代理下，只有目标方法由<strong>外部</strong>调用，目标方法才由Spring生成的代理对象来管理，不然会造成自调用问题。</p></blockquote><blockquote><p>若<strong>同一类中</strong>的其他<strong>没有@Transactional注解</strong>的方法内部调用<strong>有@Transactional注解</strong>的方法，有@Transactional注解的方法的事务被忽略，不会发生回滚。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Service</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">insertOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同一类，insertOrder方法由insert调用，insert没有事务注解，导致insertOrder注解失效</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Transactional</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//do something</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>insertOrder尽管有@Transactional注解，但它被内部方法insert调用，事务被忽略，出现异常事务不会发生回滚。</p></blockquote><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a><a href="#解决办法" title="解决办法"></a>解决办法</h3><blockquote><p>上面的两个问题@Transactional注解只应用到<strong>public</strong>方法和自调用问题，是由于使用 Spring AOP 代理造成的。</p></blockquote><blockquote><p>为解决这两个问题，使用AspectJ取代Spring AOP代理。</p></blockquote><h4 id="1-增加ASPECTJ-XML配置"><a href="#1-增加ASPECTJ-XML配置" class="headerlink" title="1 增加ASPECTJ.XML配置"></a><a href="#1-增加ASPECTJ-XML配置" title="1 增加ASPECTJ.XML配置"></a>1 增加ASPECTJ.XML配置</h4><blockquote><p>添加ASPECTJ.XML配置</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aspectj<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.transaction.aspectj.AnnotationTransactionAspect<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aspectOf<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-更改pom-xml文件"><a href="#2-更改pom-xml文件" class="headerlink" title="2 更改pom.xml文件"></a><a href="#2-更改pom-xml文件" title="2 更改pom.xml文件"></a>2 更改pom.xml文件</h4><blockquote><p>同时在Maven的pom.xml文件中加入spring-aspects和aspectjrt的dependency以及aspectj-maven-plugin。</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjrt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.mojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectj-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>showWeaveInfo</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>showWeaveInfo</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aspectLibraries</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aspectLibrary</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aspectLibrary</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aspectLibraries</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>test-compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>以上是关于spring事务的一些机制和使用,以及aop的一些説明.</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> transactional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NETTY-NIO</title>
      <link href="/2019/08/27/NETTY-NIO/"/>
      <url>/2019/08/27/NETTY-NIO/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="什么是netty"><a href="#什么是netty" class="headerlink" title="什么是netty"></a><a href="#什么是netty" title="什么是netty"></a>什么是netty</h2><blockquote><p>Netty是一个NIO网络编程框架，快速开发高性能、高可靠性的网络服务器/客户端程序。 极大地简化了TCP和UDP等网络编程。是一个异步事件驱动的网络框架，快速、高性能。<br>RPC（pigeon、dubbo、HSF）Hadoop、Spark MQ（swallow、RocketMQ）Zookeeper等, 几乎所有的基于java的分布式中间件都是采用netty作为通信工具的，使用的是epoll模型</p></blockquote><h2 id="epoll-io-模型"><a href="#epoll-io-模型" class="headerlink" title="epoll io 模型"></a><a href="#epoll-io-模型" title="epoll io 模型"></a>epoll io 模型</h2><h3 id="epoll-原理"><a href="#epoll-原理" class="headerlink" title="epoll 原理"></a><a href="#epoll-原理" title="epoll 原理"></a>epoll 原理</h3><blockquote><p>相对于select和poll来说，epoll更加灵活，没有描述符限制，epoll使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。</p></blockquote><pre><code>//创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大int epoll_create(int size)；//对指定描述符fd执行op操作。epfd：是epoll_create()的返回值，op：表示op操作，fd：是需要监听的fd，epoll_event：是告诉内核需要监听什么事int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；//等待epfd上的io事件，最多返回maxevents个事件。int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</code></pre><blockquote><p>在select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll事先通过epoll_ctl()来注册一 个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait() 时便得到通知。</p></blockquote><h3 id="epoll-优点"><a href="#epoll-优点" class="headerlink" title="epoll 优点"></a><a href="#epoll-优点" title="epoll 优点"></a>epoll 优点</h3><blockquote><p>epoll监视的描述符数量不受限制，它所支持的FD上限是最大可以打开文件的数目,IO的效率不会随着监视fd的数量的增长而下降。<br>epoll不同于select和poll轮询的方式，而是通过每个fd定义的回调函数来实现的,只有就绪的fd才会执行回调函数,随着监视的描述符数量的增长，其效率也不会出现线性下降。</p></blockquote><h2 id="netty-的几个核心组件"><a href="#netty-的几个核心组件" class="headerlink" title="netty 的几个核心组件"></a><a href="#netty-的几个核心组件" title="netty 的几个核心组件"></a>netty 的几个核心组件</h2><blockquote><ol><li>Bootstrap：netty的辅助启动器，netty客户端和服务器的入口，Bootstrap是创建客户端连接的启动器，ServerBootstrap是监听服务端端口的启动器，跟tomcat的Bootstrap类似，程序的入口。</li></ol></blockquote><blockquote><ol start="2"><li>Channel：关联jdk原生socket的组件，常用的是NioServerSocketChannel和NioSocketChannel，NioServerSocketChannel负责监听一个tcp端口，有连接进来通过boss reactor创建一个NioSocketChannel将其绑定到worker reactor，然后worker reactor负责这个NioSocketChannel的读写等io事件。</li></ol></blockquote><blockquote><ol start="3"><li>EventLoop：netty最核心的几大组件之一，就是我们常说的reactor，人为划分为boss reactor和worker reactor。通过EventLoopGroup（Bootstrap启动时会设置EventLoopGroup）生成，最常用的是nio的NioEventLoop，就如同EventLoop的名字，EventLoop内部有一个无限循环，维护了一个selector，处理所有注册到selector上的io操作，在这里实现了一个线程维护多条连接的工作。</li></ol></blockquote><blockquote><ol start="4"><li>ChannelPipeline：netty最核心的几大组件之一，ChannelHandler的容器，netty处理io操作的通道，与ChannelHandler组成责任链。write、read、connect等所有的io操作都会通过这个ChannelPipeline，依次通过ChannelPipeline上面的ChannelHandler处理，这就是netty事件模型的核心。ChannelPipeline内部有两个节点，head和tail，分别对应着ChannelHandler链的头和尾。</li></ol></blockquote><blockquote><ol start="5"><li>ChannelHandler：netty最核心的几大组件之一，netty处理io事件真正的处理单元，开发者可以创建自己的ChannelHandler来处理自己的逻辑，完全控制事件的处理方式。ChannelHandler和ChannelPipeline组成责任链，使得一组ChannelHandler像一条链一样执行下去。ChannelHandler分为inBound和outBound，分别对应io的read和write的执行链。ChannelHandler用ChannelHandlerContext包裹着，有prev和next节点，可以获取前后ChannelHandler，read时从ChannelPipeline的head执行到tail，write时从tail执行到head，所以head既是read事件的起点也是write事件的终点，与io交互最紧密。</li></ol></blockquote><blockquote><ol start="6"><li>Unsafe：顾名思义这个类就是不安全的意思，但并不是说这个类本身不安全，而是不要在应用程序里面直接使用Unsafe以及他的衍生类对象，实际上Unsafe操作都是在reactor线程中被执行。Unsafe是Channel的内部类，并且是protected修饰的，所以在类的设计上已经保证了不被用户代码调用。Unsafe的操作都是和jdk底层相关。EventLoop轮询到read或accept事件时，会调用unsafe.read()，unsafe再调用ChannelPipeline去处理事件；当发生write事件时，所有写事件都会放在EventLoop的task中，然后从ChannelPipeline的tail传播到head，通过Unsafe写到网络中。</li></ol></blockquote><h2 id="如何创建TCP-netty-server-服务器"><a href="#如何创建TCP-netty-server-服务器" class="headerlink" title="如何创建TCP netty server 服务器"></a><a href="#如何创建TCP-netty-server-服务器" title="如何创建TCP netty server 服务器"></a>如何创建TCP netty server 服务器</h2><h3 id="1-initTcpServer"><a href="#1-initTcpServer" class="headerlink" title="1. initTcpServer"></a><a href="#1-initTcpServer" title="1. initTcpServer"></a>1. initTcpServer</h3><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/**         * 初始化TCP server        * @Description:        * @param gatewayInitParameter        * @param isLast         */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initTcpServer</span><span class="token punctuation">(</span>GatewayDataChannelParameter gatewayInitParameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            EventLoopGroup         acceptor       <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用于设置服务器端接受客户端的连接</span>            EventLoopGroup         worker           <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用于网络事件处理</span>            EventExecutorGroup     worker2     <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventExecutorGroup</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ServerBootstrap     bootstrap     <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// bootstrap用于设置服务端的启动相关参数</span>            bootstrap<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>acceptor<span class="token punctuation">,</span> worker<span class="token punctuation">)</span><span class="token punctuation">;</span>            bootstrap<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TcpServerChannelInitializer initializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TcpServerChannelInitializer</span><span class="token punctuation">(</span>gatewayInitParameter<span class="token punctuation">,</span> worker2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始化数据通道list</span>            bootstrap<span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span>initializer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> port  <span class="token operator">=</span> gatewayInitParameter<span class="token punctuation">.</span><span class="token function">getGatewayBaseData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                ChannelFuture channelFuture <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 绑定端口启动服务事件</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span>ChannelFuture future<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"tcp port is bound!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//此处sync()会阻塞main方法</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span>ChannelFuture future<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"all threads end ,main thread end！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 正常状态此打印信息不执行上一行代码会阻塞MAIN函数</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                acceptor<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//netty server关闭时才会执行</span>                worker<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                worker2<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TCP netty closed！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-TcpServerChannelInitializer"><a href="#2-TcpServerChannelInitializer" class="headerlink" title="2. TcpServerChannelInitializer"></a><a href="#2-TcpServerChannelInitializer" title="2. TcpServerChannelInitializer"></a>2. TcpServerChannelInitializer</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>sefon<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>baseModule<span class="token punctuation">.</span>gatewayServer<span class="token punctuation">.</span>gatewayBase<span class="token punctuation">.</span>GatewayDataChannelParameter<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelInboundHandlerAdapter<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelInitializer<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelPipeline<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>string<span class="token punctuation">.</span>StringDecoder<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>string<span class="token punctuation">.</span>StringEncoder<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>timeout<span class="token punctuation">.</span>IdleStateHandler<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>EventExecutorGroup<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TcpServerChannelInitializer2</span> <span class="token keyword">extends</span>  <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span>  <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//tcp此处为socketChannel</span>        <span class="token keyword">private</span> GatewayDataChannelParameter gatewayInitParameter<span class="token punctuation">;</span>        <span class="token keyword">private</span> EventExecutorGroup group <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * @param gatewayInitParameter         * @param group         */</span>        <span class="token keyword">public</span> <span class="token function">TcpServerChannelInitializer2</span><span class="token punctuation">(</span>GatewayDataChannelParameter gatewayInitParameter<span class="token punctuation">,</span> EventExecutorGroup group<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>gatewayInitParameter <span class="token operator">=</span> gatewayInitParameter<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>group <span class="token operator">=</span> group<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel arg0<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            ChannelPipeline pipeline <span class="token operator">=</span> arg0<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//pipeline 相当于ChannelHandler的容器，下面的stringDecoder也是一个handler</span>            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"docode"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加的顺序非常重要</span>            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"encode"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IdleStateHandler</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置channel超时时间180秒</span>            ChannelInboundHandlerAdapter adapter <span class="token operator">=</span> gatewayInitParameter<span class="token punctuation">.</span><span class="token function">getSimpleChannelInboundHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此adapter是具体处理消息的handler类</span>            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token string">"server"</span><span class="token punctuation">,</span> adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-TCP处理数据的handler"><a href="#3-TCP处理数据的handler" class="headerlink" title="3. TCP处理数据的handler"></a><a href="#3-TCP处理数据的handler" title="3. TCP处理数据的handler"></a>3. TCP处理数据的handler</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>ByteBuf<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>Unpooled<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelHandler<span class="token punctuation">.</span>Sharable<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelHandlerContext<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>SimpleChannelInboundHandler<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>CharSequenceValueConverter<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>timeout<span class="token punctuation">.</span>IdleStateEvent<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>CharsetUtil<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * @Description:    处理netty的handler    * @author: jackromer    * @version: 1.0, Jul 24, 2018    */</span>    <span class="token annotation punctuation">@Sharable</span><span class="token comment" spellcheck="true">//可共享的CHANNEL</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TcpChannelHandler2</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//数据到达</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    CharSequence initialResult <span class="token operator">=</span> CharSequenceValueConverter<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span><span class="token function">convertObject</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// MSG先转为charSequence</span>                    ByteBuf result <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span>initialResult<span class="token punctuation">,</span> CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 再转为byteBuf</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        String reportStr     <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                        result<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// reportStr使用后立马释放资源</span>              String tcpReplyMsg <span class="token operator">=</span> <span class="token string">"hello client , i am tcp server."</span><span class="token punctuation">;</span>              Channel <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>tcpReplyMsg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给客户端写消息</span>                    <span class="token punctuation">}</span>                 <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当新连接接入</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerAdded</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//channel事件超时</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userEventTriggered</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object evt<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>evt <span class="token keyword">instanceof</span> <span class="token class-name">IdleStateEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                IdleStateEvent idleStateEvent <span class="token operator">=</span> <span class="token punctuation">(</span>IdleStateEvent<span class="token punctuation">)</span> evt<span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>idleStateEvent<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> READER_IDLE<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>读空闲                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> WRITER_IDLE<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>写空闲                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> ALL_IDLE<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>读写空闲                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当连接断开</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerRemoved</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//客户端连接</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//连接断开</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelInactive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//异常</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如何创建UDP-NETTY-SERVER"><a href="#如何创建UDP-NETTY-SERVER" class="headerlink" title="如何创建UDP NETTY SERVER"></a><a href="#如何创建UDP-NETTY-SERVER" title="如何创建UDP NETTY SERVER"></a>如何创建UDP NETTY SERVER</h2><h3 id="1-initUdpServer"><a href="#1-initUdpServer" class="headerlink" title="1. initUdpServer"></a><a href="#1-initUdpServer" title="1. initUdpServer"></a>1. initUdpServer</h3><blockquote><p>注意事项：<br>UDP使用的bootstrap 而不是ServerBootstrap。<br>UDP channelHandler使用的是SimpleChannelInboundHandler，TCP使用的是其他的。<br>且UDP是无连接的，因此不需要调用channel.close()方法,如果调用会触发UDP server 的绑定关闭事件导致UDP服务器关闭。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/**         * 初始化TCP server        * @Description:        * @param gatewayInitParameter        * @param isLast         */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initUdpServer</span><span class="token punctuation">(</span>GatewayDataChannelParameter gatewayInitParameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            EventLoopGroup         acceptor     <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用于设置服务器端接受客户端的连接</span>            EventExecutorGroup     worker         <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventExecutorGroup</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Bootstrap             bootstrap     <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// bootstrap用于设置服务端的启动相关参数，此处需要用Bootstrap和tcp不同</span>            bootstrap<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>acceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>            bootstrap<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioDatagramChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            UdpServerChannelInitializer initializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UdpServerChannelInitializer</span><span class="token punctuation">(</span>gatewayInitParameter<span class="token punctuation">,</span> worker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始化数据通道list</span>            bootstrap<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>initializer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> port  <span class="token operator">=</span> gatewayInitParameter<span class="token punctuation">.</span><span class="token function">getGatewayBaseData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                ChannelFuture channelFuture <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 绑定端口启动服务事件</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span>ChannelFuture future<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"tcp port is bound!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//此处sync()会阻塞main方法</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span>ChannelFuture future<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"all threads end ,main thread end！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 正常状态此打印信息不执行上一行代码会阻塞MAIN函数</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                acceptor<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//netty server关闭时才会执行</span>                worker<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                worker2<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-TcpServerChannelInitializer-1"><a href="#2-TcpServerChannelInitializer-1" class="headerlink" title="2. TcpServerChannelInitializer"></a><a href="#2-TcpServerChannelInitializer-1" title="2. TcpServerChannelInitializer"></a>2. TcpServerChannelInitializer</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>sefon<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>baseModule<span class="token punctuation">.</span>gatewayServer<span class="token punctuation">.</span>gatewayBase<span class="token punctuation">.</span>GatewayDataChannelParameter<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelInboundHandlerAdapter<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelInitializer<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelPipeline<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>string<span class="token punctuation">.</span>StringDecoder<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>string<span class="token punctuation">.</span>StringEncoder<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>timeout<span class="token punctuation">.</span>IdleStateHandler<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>EventExecutorGroup<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UdpServerChannelInitializer</span> <span class="token keyword">extends</span>  <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>NioDatagramChannel<span class="token operator">></span>  <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//udp此处为NioDatagramChannel</span>        <span class="token keyword">private</span> GatewayDataChannelParameter gatewayInitParameter<span class="token punctuation">;</span>        <span class="token keyword">private</span> EventExecutorGroup group <span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * @param gatewayInitParameter         * @param group         */</span>        <span class="token keyword">public</span> <span class="token function">TcpServerChannelInitializer2</span><span class="token punctuation">(</span>GatewayDataChannelParameter gatewayInitParameter<span class="token punctuation">,</span> EventExecutorGroup group<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>gatewayInitParameter <span class="token operator">=</span> gatewayInitParameter<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>group <span class="token operator">=</span> group<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel arg0<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            ChannelPipeline pipeline <span class="token operator">=</span> arg0<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//pipeline 相当于ChannelHandler的容器，下面的stringDecoder也是一个handler</span>            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"docode"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加的顺序非常重要</span>            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"encode"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//pipeline.addLast(new IdleStateHandler(60 * 1000, 60 * 1000 , 60 * 1000 ,TimeUnit.SECONDS));//UDP是无状态连接不需要设置</span>            ChannelInboundHandlerAdapter adapter <span class="token operator">=</span> gatewayInitParameter<span class="token punctuation">.</span><span class="token function">getSimpleChannelInboundHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此adapter是具体处理消息的handler类</span>            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token string">"server"</span><span class="token punctuation">,</span> adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-UDP处理数据的handler"><a href="#3-UDP处理数据的handler" class="headerlink" title="3. UDP处理数据的handler"></a><a href="#3-UDP处理数据的handler" title="3. UDP处理数据的handler"></a>3. UDP处理数据的handler</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>sefon<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>baseModule<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>CheckChannelMsgException<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>sefon<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>baseModule<span class="token punctuation">.</span>gatewayServer<span class="token punctuation">.</span>checkChannelMsg<span class="token punctuation">.</span>ChannelMsgChecker<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>sefon<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>baseModule<span class="token punctuation">.</span>gatewayServer<span class="token punctuation">.</span>gatewayBase<span class="token punctuation">.</span>GatewayBaseData<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>sefon<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>baseModule<span class="token punctuation">.</span>poolsAndThreads<span class="token punctuation">.</span>messageProcessors<span class="token punctuation">.</span>TcpOrUdpMsgProcessor<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>sefon<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>baseModule<span class="token punctuation">.</span>poolsAndThreads<span class="token punctuation">.</span>processorPool<span class="token punctuation">.</span>TcpOrUdpMessagePool<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelHandler<span class="token punctuation">.</span>Sharable<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelHandlerContext<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>SimpleChannelInboundHandler<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>DatagramPacket<span class="token punctuation">;</span>    <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>CharsetUtil<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * @Description:    处理通用设备协议的TCP包数据    * @author: jackromer    * @version: 1.0, Jul 24, 2018    */</span>    <span class="token annotation punctuation">@Sharable</span><span class="token comment" spellcheck="true">//可共享的CHANNEL</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UdpChannelHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token operator">&lt;</span>DatagramPacket<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//此处需要用DatagramPacket</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> DatagramPacket  dataPacket<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            String result <span class="token operator">=</span> dataPacket<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//udp发送数据给客户端</span>        String udpReplyMsg <span class="token operator">=</span> <span class="token string">"hello client , i am udp server."</span><span class="token punctuation">;</span>        DatagramPacket pac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span>udpReplyMsg<span class="token punctuation">,</span> CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                hannelFuture channelFuture <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>pac<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="netty-ctx-的fire相关方法"><a href="#netty-ctx-的fire相关方法" class="headerlink" title="netty ctx 的fire相关方法"></a><a href="#netty-ctx-的fire相关方法" title="netty ctx 的fire相关方法"></a>netty ctx 的fire相关方法</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">></span> file 方法  <span class="token operator">></span> `` ` ``java  <span class="token operator">></span> <span class="token comment" spellcheck="true">/**> >      * A {@link Channel} is active now, which means it is connected.>      *>      * This will result in having the  {@link ChannelInboundHandler#channelActive(ChannelHandlerContext)} method>      * called of the next  {@link ChannelInboundHandler} contained in the  {@link ChannelPipeline} of the>      * {@link Channel}.>      */</span><span class="token operator">></span>         ChannelInboundInvoker <span class="token function">fireChannelActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用pipline中的handler列表中的下一个handler的channelActive方法，后面的方法类似</span>    <span class="token annotation punctuation">@Override</span>    ChannelHandlerContext <span class="token function">fireChannelRegistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    ChannelHandlerContext <span class="token function">fireChannelUnregistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    ChannelHandlerContext <span class="token function">fireChannelActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    ChannelHandlerContext <span class="token function">fireChannelInactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    ChannelHandlerContext <span class="token function">fireExceptionCaught</span><span class="token punctuation">(</span>Throwable cause<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    ChannelHandlerContext <span class="token function">fireUserEventTriggered</span><span class="token punctuation">(</span>Object evt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    ChannelHandlerContext <span class="token function">fireChannelRead</span><span class="token punctuation">(</span>Object msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    ChannelHandlerContext <span class="token function">fireChannelReadComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    ChannelHandlerContext <span class="token function">fireChannelWritabilityChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ## netty 的http和https支持    <span class="token operator">></span>http 和https和netty的tcp比较类似，不同处在于：    <span class="token operator">></span><span class="token number">1</span><span class="token punctuation">.</span>ChannelInitializer<span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span> 的initChannel方法重写不一样<span class="token punctuation">.</span>    <span class="token number">2</span><span class="token punctuation">.</span>handler数据处理方式不一样<span class="token punctuation">.</span>    ### 重写<span class="token annotation punctuation">@Override</span> initChannel 方法    ```java    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ChannelPipeline ph <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        添加sslhandler        SSLEngine sslEngine <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createSSLEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sslEngine<span class="token punctuation">.</span><span class="token function">setUseClientMode</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sslEngine<span class="token punctuation">.</span><span class="token function">setNeedClientAuth</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//双向认证</span>        ph<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SslHandler</span><span class="token punctuation">(</span>sslEngine<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//处理http服务的关键handler</span>        ph<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"codec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpServerCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ph<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"compressor"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpContentCompressor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ph<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"decoder"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HttpRequestDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ph<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"encoder"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HttpResponseEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ph<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"aggregator"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpObjectAggregator</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ChannelInboundHandlerAdapter adapter <span class="token operator">=</span> gatewayInitParameter<span class="token punctuation">.</span><span class="token function">getHttpsSimpleChannelInboundHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token string">"httpsServer"</span><span class="token punctuation">,</span> adapter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 处理空指针异常,必须保证观察者中只返回一个对象</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="handler处理数据"><a href="#handler处理数据" class="headerlink" title="handler处理数据"></a><a href="#handler处理数据" title="handler处理数据"></a>handler处理数据</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      <span class="token function">send</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">,</span> HttpResponseStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>      String result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">FullHttpRequest</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token string">"未知请求!"</span><span class="token punctuation">;</span>            <span class="token function">send</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> result<span class="token punctuation">,</span> HttpResponseStatus<span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//return;</span>        <span class="token punctuation">}</span>        FullHttpRequest httpRequest <span class="token operator">=</span> <span class="token punctuation">(</span>FullHttpRequest<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String path <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//获取路径</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"url is ："</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>            String body <span class="token operator">=</span> <span class="token function">getBody</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//获取参数</span>            HttpMethod method <span class="token operator">=</span> httpRequest<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取请求方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到:"</span> <span class="token operator">+</span> method <span class="token operator">+</span> <span class="token string">" 请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果是GET请求</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>GET<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//接受到的消息，做业务逻辑处理...</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"body:"</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> <span class="token string">"GET请求"</span><span class="token punctuation">;</span>                <span class="token function">send</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> result<span class="token punctuation">,</span> HttpResponseStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//return;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果是POST请求</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>POST<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//接受到的消息，做业务逻辑处理...</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"body:"</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> <span class="token string">"POST请求"</span><span class="token punctuation">;</span>                <span class="token function">send</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> result<span class="token punctuation">,</span> HttpResponseStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//return;</span>            <span class="token punctuation">}</span>            ctx<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理请求失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//释放请求</span>            httpRequest<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><a href="#注意事项" title="注意事项"></a>注意事项</h2><blockquote><p>netty服务的关闭在官网写的很明确,就是当EventLoopGroups关闭时会触发服务关闭,TCP和UDP不同，当调用udp的ctx.channel.close()方法时会导致udp服务EventLoopGroups关闭,而调用tcp的ctx.channel.close()方法时只会关闭连接上的当前channel.</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    Shutting Down Your Application    Shutting down a Netty application is usually as simple as shutting down all EventLoopGroups you created via <span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>     It returns a Future that notifies you when the EventLoopGroup has been terminated completely and all Channels that belong to the group have been closed<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>netty NIO机制支持高并发，在很多JAVA的分布式框架中都有使用.在数据处理方面TCP和UDP不同，由于TCP是有连接的在数据传输过程中可能出现粘包阻包问题，处理数据的时候需要根据协议单独处理，保证数据的完整性,而UDP是无连接的所以不需要处理粘包阻包问题，收到什么数据就是什么数据.同时NETTY也可以集成http和https,具体实现可参照官方文档。  </p></blockquote><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THREAD-POOL-多线程并发</title>
      <link href="/2019/08/27/THREAD-POOL-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91/"/>
      <url>/2019/08/27/THREAD-POOL-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="多线程简介"><a href="#多线程简介" class="headerlink" title="多线程简介"></a><a href="#多线程简介" title="多线程简介"></a>多线程简介</h3><blockquote><p>多线程适合多种开发语言的开发, 这是一种思想，基于的是操作系统底层的CPU调度.<br>此篇介绍线程、多线程、和线程池的使用和机制。  </p></blockquote><h3 id="进程-线程"><a href="#进程-线程" class="headerlink" title="进程\线程"></a><a href="#进程-线程" title="进程\线程"></a>进程\线程</h3><ol><li><p>进程</p><blockquote><p>1 进程 是指在系统中正在运行的一个应用程序, 每一个进程都有一个PID， 当进程占用太多资源或者卡死的时候，CPU会强杀掉进程。<br>2 每个进程之间是独立的，每个进程均运行在其专用的且受保护的内存空间内。</p></blockquote></li><li><p>线程</p><blockquote><p>1 个进程由多个线程组成(1个进程至少要有1个线程)。<br>2 线程是进程的基本执行单元，一个进程的所有任务都在线程中执行。</p></blockquote></li></ol><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a><a href="#多线程" title="多线程"></a>多线程</h3><ol><li><p>多线程</p><blockquote><p>1个进程中可以开启多个线程，多个线程可以同时执行不同的任务, 多线程一般情况下可以提高程序的执行效率。</p></blockquote></li><li><p>多线程原理</p><blockquote><p>对于单核CPU来说，同一时间，CPU只能处理1个线程，只有1个线程正在执行，现在大部分CPU都是4核8线程。<br>多线程同时执行的本质：是CPU快速的在多个线程之间的切换，这个时间非常的短在毫秒级别，以至于用户无法察觉。<br>CPU调度线程的时间足够快，就造成了多线程的“同时”执行。<br>如果线程数非常多，CPU会在n个线程之间切换，消耗大量的CPU资源，每个线程被调度的次数会降低，线程的执行效率降低。</p></blockquote></li><li><p>多线程的优点</p><blockquote><p>能适当提高程序的执行效率，但是在业务简单时，单线程会比多线程更快。<br>能适当提高资源的利用率(CPU、内存)。<br>线程上的任务执行完成后，线程会自动销毁。</p></blockquote></li><li><p>多线程的缺点</p><blockquote><p>开启线程需要占用一定的内存空间(默认情况下，每一个线程都占用512KB)，如果开启大量的线程，会占用大量的内存空间，降低程序的性能。<br>线程越多，CPU在调用线程上的开销就越大。<br>程序设计更加复杂，比如线程间的通信、多线程的数据共享。</p></blockquote></li><li><p>主线程</p><blockquote><p>一个程序运行后，默认会开启1个线程，称为“主线程”或“UI线程”，java中的main方法就是一个程序的主线程，如果这个方法体中的业务逻辑存在while循环、线程池<br>、websorcket等阻塞程序的，那么会使main方法阻塞，程序则不会退出，这也是程序正常运行不退出的原因；一些简单类的main方法会退出是因为并没有阻塞main方法。<br>主线程一般用来刷新UI界面，处理UI事件。<br>主线程使用注意：别将耗时的操作放到主线程中，因为耗时操作会卡住主线程，严重影响UI的流畅度，给用户一种卡的坏体验。</p></blockquote></li></ol><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a><a href="#同步和异步" title="同步和异步"></a>同步和异步</h3><ol><li><p>同步执行</p><blockquote><p>写程序的时候都是从上到下，从左到右，代码执行顺序也是从上到下从右到左。<br>1个线程执行多个任务，也是依次执行a-&gt;b-&gt;c。<br>1个线程同一时间执行1个任务。</p></blockquote></li><li><p>异步执行</p><blockquote><p>多个线程可以同时执行多个任务。<br>多个线程执行多个任务可以同时执行a，b，c。</p></blockquote></li><li><p>synchronized</p><blockquote><p>同步块大家都比较熟悉，通过 synchronized 关键字来实现；所有加上 synchronized 的方法和块语句，在多线程访问的时候，同一时刻只能有一个线程能够访问。</p></blockquote></li><li><p>wait()、notify()、notifyAll()</p><blockquote><p>这三个方法是 java.lang.Object 的 final native 方法，任何继承 java.lang.Object 的类都有这三个方法。<br>它们是Java语言提供的实现线程间阻塞和控制进程内调度的底层机制，平时我们会很少用到的。</p></blockquote></li><li><p>wait()：</p><blockquote><p>导致线程进入等待状态，直到它被其他线程通过notify()或者notifyAll唤醒，该方法只能在同步方法中调用。</p></blockquote></li><li><p>notify()：</p><blockquote><p>随机选择一个在该对象上调用wait方法的线程，解除其阻塞状态，该方法只能在同步方法或同步块内部调用。</p></blockquote></li><li><p>notifyAll()：</p><blockquote><p>解除所有那些在该对象上调用wait方法的线程的阻塞状态，同样该方法只能在同步方法或同步块内部调用。<br>调用这三个方法中任意一个，当前线程必须是锁的持有者，如果不是会抛出一个 IllegalMonitorStateException 异常。</p></blockquote></li><li><p>wait()与Thread.sleep(long time)的区别</p><blockquote><p>sleep() ：方法在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），该线程不丢失任何监视器的所属权，sleep() 是 Thread 类专属的静态方法，针对一个特定的线程。<br>wait() : 方法使实体所处线程暂停执行，从而使对象进入等待状态，直到被 notify() 方法通知或者 wait() 的等待的时间到。<br>sleep() : 方法使持有的线程暂停运行，从而使线程进入休眠状态，直到用interrupt 方法来打断他的休眠或者 sleep 的休眠的时间到。<br>wait() : 方法进入等待状态时<strong>会释放同步锁</strong>，而 sleep() 方法<strong>不会释放同步锁</strong>。所以，当一个线程无限 sleep 时又没有任何人去 interrupt 它的时候，程序就产生大麻烦了。<br>notify() : 是用来通知线程，但在 notify() 之前线程是需要获得 lock 的。另个意思就是必须写在 synchronized(lockobj) {…} 之中。<br>wait() : 也是这个样子，一个线程需要释放某个 lock，也是在其获得 lock 情况下才能够释放，所以 wait() 也需要放在 synchronized(lockobj) {…} 之中。</p></blockquote></li><li><p>volatile 关键字</p><blockquote><p>volatile 是一个特殊的修饰符，只有成员变量才能使用它。在Java并发程序缺少同步类的情况下，多线程对成员变量的操作对其它线程是透明的。<br>volatile 变量可以保证下一个读取操作会在前一个写操作之后发生。线程都会直接从内存中读取该变量并且不缓存它。这就确保了线程读取到的变量是同内存中是一致的。</p></blockquote></li><li><p>ThreadLocal 变量</p><blockquote><p>ThreadLocal 是Java里一种特殊的变量。每个线程都有一个 ThreadLocal 就是每个线程都拥有了自己独立的一个变量，竞争条件被彻底消除了。<br>如果为每个线程提供一个自己独有的变量拷贝，将大大提高效率。首先，通过复用减少了代价高昂的对象的创建个数。<br>其次，你在没有使用高代价的同步或者不变性的情况下获得了线程安全。</p></blockquote></li><li><p>Join() 方法</p><blockquote><p>join() 方法定义在 Thread 类中，所以调用者必须是一个线程，join() 方法主要是让调用该方法的 Thread 完成 run() 方法里面的东西后，再执行 join() 方法后面的代码。</p></blockquote></li></ol><pre class="line-numbers language-java"><code class="language-java">            Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>计数线程一<span class="token punctuation">)</span><span class="token punctuation">;</span>              Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>计数线程二<span class="token punctuation">)</span><span class="token punctuation">;</span>              t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等待计数线程一执行完成，再执行计数线程二</span>            t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&gt; 启动 t1 后，调用了 join() 方法，直到 t1 的计数任务结束，才轮到 t2 启动，然后 t2 才开始计数任务，两个线程是按着严格的顺序来执行的。  &gt; 如果 t2 的执行需要依赖于 t1 中的完整数据的时候，这种方法就可以很好的确保两个线程的同步性。</code></pre><ol start="12"><li><p>Thread.yield() 方法</p><blockquote><p>Thread.sleep(long time)：线程暂时终止执行（睡眠）一定的时间。<br>Thread.yield()：线程放弃运行，将CPU的控制权让出。<br>这两个方法都会将当前运行线程的CPU控制权让出来，但 sleep() 方法在指定的睡眠时间内一定不会再得到运行机会，直到它的睡眠时间完成；<br>而 yield() 方法让出控制权后，还有可能马上被系统的调度机制选中来运行，比如，执行yield()方法的线程优先级高于其他的线程，那么这个线程即使执行了 yield() 方法也可能不能起到让出CPU控制权的效果，因为它让出控制权后，进入排队队列，调度机制将&gt;从等待运行的线程队列中选出一个等级最高的线程来运行，那么它又（很可能）被选中来运行。</p></blockquote></li></ol><h3 id="Java-多线程的实现的三种方式"><a href="#Java-多线程的实现的三种方式" class="headerlink" title="Java 多线程的实现的三种方式"></a><a href="#Java-多线程的实现的三种方式" title="Java 多线程的实现的三种方式"></a>Java 多线程的实现的三种方式</h3><ol><li>继承thread方式</li></ol><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">newThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//do something</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//do something</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&gt; Thread 类中的 start() 和 run() 方法有什么区别  &gt; 调用 start() 方法才会启动新线程；如果直接调用 Thread 的 run() 方法，它的行为就会和普通的方法一样；为了在新的线程中执行我们的代码，必须使用 Thread.start() 方法。</code></pre><ol start="2"><li>实现runable接口方式</li></ol><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//do something</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>继承thread其实也是实现runable接口的方式实现的<br><img src="/images/pool/thread.png" alt=""></li><li>实现callable接口</li></ol><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewCallableThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//String 是线程的返回值类型</span>            <span class="token keyword">private</span> String threadName<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> Object obj<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token function">NewCallableThread</span><span class="token punctuation">(</span>String threadName<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>threadName <span class="token operator">=</span> threadName<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>obj   <span class="token operator">=</span> obj<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        count <span class="token operator">++</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadName <span class="token operator">+</span> <span class="token string">">count>"</span> <span class="token operator">+</span> count <span class="token operator">+</span><span class="token string">"object is "</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token string">"这是返回值"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//callable接口可以返回线程的执行结果,也可以抛出异常，例如此线程处理完的数据结果可返回给调用者，但是线程不会释放资源直到拿到返回值，所以如果不需要返回return null即可</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                NewCallableThread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewCallableThread</span><span class="token punctuation">(</span><span class="token string">"thread1"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                thread1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                NewCallableThread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewCallableThread</span><span class="token punctuation">(</span><span class="token string">"thread2"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                thread2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>单线程和多线程演示</li></ol><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> String threadName<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> Object obj<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//obj 是任何类型的可将此对象传入线程中使用</span>            <span class="token keyword">public</span> <span class="token function">NewThread</span><span class="token punctuation">(</span>String threadName<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>threadName <span class="token operator">=</span> threadName<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>obj   <span class="token operator">=</span> obj<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        count <span class="token operator">++</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadName <span class="token operator">+</span> <span class="token string">">count>"</span> <span class="token operator">+</span> count <span class="token operator">+</span><span class="token string">"object is "</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                NewThread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewThread</span><span class="token punctuation">(</span><span class="token string">"thread1"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                thread1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                NewThread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewThread</span><span class="token punctuation">(</span><span class="token string">"thread2"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                thread2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&gt; thread1、thread2都是单独的一个线程,都是由CPU调度执行</code></pre><ol start="6"><li>附runable和callable的接口源码</li></ol><pre class="line-numbers language-java"><code class="language-java">         <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>             <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>             V <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li><p>runable和callable的对比</p><blockquote><p>Callable 接口下的方法是 call()，Runnable 接口的方法是 run()。<br>Callable 的任务执行后可返回值，而 Runnable 的任务是不能返回值的。<br>call() 方法可以抛出异常，run()方法不可以的。<br>运行 Callable 任务可以拿到一个 Future 对象，表示异步计算的结果。它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。<br>通过 Future 对象可以了解任务执行情况，可取消任务的执行，还可获取执行结果。</p></blockquote></li><li><p>附future接口的源码</p></li></ol><pre class="line-numbers language-java"><code class="language-java">         <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Future</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>             <span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mayInterruptIfRunning<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">boolean</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             V <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">;</span>             V <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">,</span> TimeoutException<span class="token punctuation">;</span>         <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>boolean cancel(boolean mayInterruptIfRunning);<br>此方法试图取消对此任务的执行。<strong>[任务已完成、已取消，或者由于某些其他原因而无法取消，则此尝试将失败，cancel调用成功后，isCancelled和isDone将始终返回true]</strong>，<br>mayInterruptIfRunning 参数确定是否应该使用试图停止任务的方式来中断执行此任务的线程</p></blockquote><blockquote><p>boolean isCancelled(); 如果在任务正常完成前将其取消，则返回 true</p></blockquote><blockquote><p>boolean isDone(); 任务是否已完成</p></blockquote><blockquote><p>V get() throws InterruptedException, ExecutionException; 如有必要等待线程执行完毕，获取返回结果</p></blockquote><blockquote><p>V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException; 在规定时间内等待线程执行完毕，获取返回结果</p></blockquote><ol start="9"><li>FutureTask-Thread的设计优化</li></ol><pre class="line-numbers language-java"><code class="language-java">             <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">RunnableFuture</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>                 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token punctuation">}</span>             <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RunnableFuture</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span> Future<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>                 <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>FutureTask 实现了 Runnable 和 Future，所以兼顾两者优点，既可以在 Thread 中使用，又可以在 ExecutorService 中使用。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">            Callable<span class="token operator">&lt;</span>String<span class="token operator">></span> callable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token string">"something"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            FutureTask<span class="token operator">&lt;</span>String<span class="token operator">></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 启动线程</span>            task<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取消线程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用 FutureTask 的好处是 FutureTask 弥补了Thread 的不足，它可以让调用者准确地知道线程什么时候执行完成并获得线程执行完成后的返回结果。<br>FutureTask 是一种可以取消的异步的计算任务，它的计算是通过 Callable 实现的，它等价于可以携带结果的 Runnable，并且有三个状态：等待、运行和完成。<br>完成包括所有计算以任意的方式结束，包括正常结束、取消和异常。</p></blockquote><hr><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a><a href="#线程池" title="线程池"></a>线程池</h3><ol><li><p>线程池简介</p><blockquote><p>Java里面线程池的顶级接口是 Executor，不过真正的线程池接口是 ExecutorService， ExecutorService 的默认实现是 ThreadPoolExecutor；<br>普通类 Executors 里面调用的就是 ThreadPoolExecutor。</p></blockquote></li><li><p>线程池的优点</p><blockquote><p>1 避免线程的创建和销毁带来的性能开销。<br>2 避免大量的线程间因互相抢占系统资源导致的阻塞现象。<br>3 能够对线程进行简单的管理并提供定时执行、间隔执行等功能。</p></blockquote></li><li><p>如何初始化一个线程池</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewPool</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> corePoolSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> maximumPoolSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">static</span> BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> ExecutorService pool <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化线程池</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>            pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> 0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span> workQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//或者使用Executors创建线程池</span>            <span class="token comment" spellcheck="true">//pool = Executors.newSingleThreadExecutor();</span>            <span class="token comment" spellcheck="true">//pool = Executors.newCachedThreadPool();</span>            <span class="token comment" spellcheck="true">//pool = Executors.newFixedThreadPool(5);</span>            <span class="token comment" spellcheck="true">//pool = Executors.newScheduledThreadPool(5);</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//当有新的数据时调用poolAddThread(String,int,Object obj)处理传入的数据，</span>        <span class="token comment" spellcheck="true">//例如如obj, object就相当于数据</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">poolAddThread</span><span class="token punctuation">(</span>String threadName<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            NewThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewThread</span><span class="token punctuation">(</span>threadName<span class="token punctuation">,</span> count<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>            NewCallableThread callThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewCallableThread</span><span class="token punctuation">(</span>threadName<span class="token punctuation">,</span> count<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>callThread<span class="token punctuation">)</span><span class="token punctuation">;</span>            pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>            <span class="token function">initPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> execute 和submit的区别在于submit可以抛出异常和返回结果，给外部调用者处理，例如某一个task失败则终止其他task执行，或者shutdown线程池.</p></blockquote></li><li><p>线程池分类及比较-Executors 提供四种线程池</p><blockquote><p>newCachedThreadPool<br>可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。对于执行很多短期异步任务的程序而言，这些线程池通常可提高程序性能。<br>调用 execute() 将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中,<br>终止并从缓存中移除那些已有 60 秒钟未被使用的线程。<br>因此，长时间保持空闲的线程池不会使用任&gt;何资源。注意，可以使用 ThreadPoolExecutor 构造方法创建具有类似属性但细节不同（例如超时参数）的线程池。</p></blockquote><blockquote><p>newSingleThreadExecutor<br>创建一个单线程池，也就是该线程池只有一个线程在工作，所有的任务是串行执行的，如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它，<br>此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</p></blockquote><blockquote><p>newFixedThreadPool<br>创建固定大小的线程池，每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小，线程池的大小一旦达到最大值就会保持不变，<br>如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</p></blockquote><blockquote><p>newScheduledThreadPool<br>创建一个大小无限的线程池，此线程池支持定时以及周期性执行任务的需求。</p></blockquote></li></ol><pre class="line-numbers language-java"><code class="language-java">             <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>                 <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ExecutorService</span> <span class="token keyword">extends</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>                 <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 List<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">boolean</span> <span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">boolean</span> <span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">,</span> T result<span class="token punctuation">)</span><span class="token punctuation">;</span>                 Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token punctuation">}</span>             <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Executors</span> <span class="token punctuation">{</span>                 <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> 60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                          <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>                 <span class="token comment" spellcheck="true">//...</span>             <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>ThreadPoolExecutor构造函数</li></ol><pre class="line-numbers language-java"><code class="language-java">             <span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                                     <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                                     <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                                     TimeUnit unit<span class="token punctuation">,</span>                                     BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                                     ThreadFactory threadFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span>                      threadFactory<span class="token punctuation">,</span> defaultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&gt; 1 corePoolSize：线程池的核心线程数，一般情况下不管有没有任务都会一直在线程池中一直存活，只有在 ThreadPoolExecutor 中的方法  &gt; allowCoreThreadTimeOut(boolean value) 设置为 true 时，闲置的核心线程会存在超时机制，如果在指定时间没有新任务来时，  &gt; 核心线程也会被终止，而这个时间间隔由第3个属性 keepAliveTime 指定。&gt; 2 maximumPoolSize：线程池所能容纳的最大线程数，当活动的线程数达到这个值后，后续的新任务将会被阻塞。&gt; 3 keepAliveTime：控制线程闲置时的超时时长，超过则终止该线程。一般情况下用于非核心线程，  &gt; 只有在 ThreadPoolExecutor 中的方法 allowCoreThreadTimeOut(boolean value) 设置为 true时，也作用于核心线程。&gt; 4 unit：用于指定 keepAliveTime 参数的时间单位，TimeUnit 是个 enum 枚举类型，常用的有：TimeUnit.HOURS(小时)、TimeUnit.MINUTES(分钟)、  &gt; TimeUnit.SECONDS(秒) 和TimeUnit.MILLISECONDS(毫秒)等。&gt; 5 workQueue：线程池的任务队列，通过线程池的 execute(Runnable command) 方法会将任务 Runnable 存储在队列中，之后我会出一个submit和excute的详细对比。&gt; 6 threadFactory：线程工厂，它是一个接口，用来为线程池创建新线程的。</code></pre><ol start="6"><li><p>线程池的关闭</p><blockquote><p>ThreadPoolExecutor 提供了两个方法，用于线程池的关闭，分别是 shutdown() 和 shutdownNow()。<br>shutdown()：不会立即的终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务。<br>shutdownNow()：立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务。</p></blockquote></li></ol><hr><p><a href="https://www.jianshu.com/p/b8197dd2934c" target="_blank" rel="noopener">参考https://www.jianshu.com/p/b8197dd2934c</a></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> thread-pool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STORM介绍，集群搭建以及topology使用</title>
      <link href="/2019/08/27/STORM%E4%BB%8B%E7%BB%8D%EF%BC%8C%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8Atopology%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/27/STORM%E4%BB%8B%E7%BB%8D%EF%BC%8C%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8Atopology%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<hr><p>本文主要介绍STORM，以及storm集群的安装和使用</p><h2 id="什么是storm"><a href="#什么是storm" class="headerlink" title="什么是storm"></a><a href="#什么是storm" title="什么是storm"></a>什么是storm</h2><blockquote><p>Apache Storm是自由开源的分布式实时计算系统，擅长处理海量数据，适用于数据实时处理而非批处理。<br>批处理使用的大多是鼎鼎大名的hadoop或者hive，作为一个批处理系统，hadoop以其吞吐量大、自动容错等优点，在海量数据处理上得到了广泛的使用。但是，hadoop不擅长实时计算，因为它天然就是为批处理而生的，这也是业界一致的共识。否则最近几年也不会有s4,storm,puma这些实时计算系统如雨后春笋般冒出来啦。STORM就是为了处理及时的消费者请求而生，在用户给出需求时及时的处理数据并给出响应的结果。</p></blockquote><h2 id="storm处理流程"><a href="#storm处理流程" class="headerlink" title="storm处理流程"></a><a href="#storm处理流程" title="storm处理流程"></a>storm处理流程</h2><p><img src="/images/storm/storm.jpg" alt=""></p><blockquote><p>可以看出storm的数据处理是交给ZK处理分发的，由nimbus管理supervisor，supervis管理worker，worker才是真正做数据处理的进程，worker提交TASK，类似多线程提交任务，整个流程达到消息的实时处理能力。</p></blockquote><h2 id="spout和bolt"><a href="#spout和bolt" class="headerlink" title="spout和bolt"></a><a href="#spout和bolt" title="spout和bolt"></a>spout和bolt</h2><h3 id="spout"><a href="#spout" class="headerlink" title="spout"></a><a href="#spout" title="spout"></a>spout</h3><blockquote><p>spout是数据源，例如spout可以调用 Twitter API 得到一个微博数据流，就是从外部数据源（队列、数据库等）中读取数据，封装成元组，形成STREAM数据流。<br><img src="/images/storm/spout1.png" alt=""></p></blockquote><h3 id="bolt"><a href="#bolt" class="headerlink" title="bolt"></a><a href="#bolt" title="bolt"></a>bolt</h3><blockquote><p>bolt是用来处理数据的，可以对一些数据流（不只一个数据流）进行处理，可能会产生新的STREAM数据流。对一些复杂的数据流变换，<br>比如从一个微博流中计算一个热门话题流，就需要很多步骤，因此就有多个bolt，因此bolt中就有很多处理，比如运行函数，做流式聚合，流式链接，访问数据库等等。<br><img src="/images/storm/tuple.jpg" alt=""><br>不同的bolt可以订阅相同的spout来达到消息共享的目的，比如来了一条数据，bolt1是做数据入库处理，bolt2只是做简单的日志记录，bolt3….<br><img src="/images/storm/spout-bolt.png" alt=""></p></blockquote><h3 id="topology"><a href="#topology" class="headerlink" title="topology"></a><a href="#topology" title="topology"></a>topology</h3><blockquote><p>如上图所示 topology就是spout 和 bolt组成的网络拓扑图，Topology就是最高层的逻辑抽象，可以直接送到 Storm 集群去执行。一个Topology图就是流式转换，每个节点是 spout 或者 bolt，图中的每条边就是 bolt 订阅了流，当一个 spout或者 bolt 产生一个元组到一个流时，它就发送元组到订阅了流的每个 bolt。</p></blockquote><h2 id="自定义topology并提交topology到storm集群"><a href="#自定义topology并提交topology到storm集群" class="headerlink" title="自定义topology并提交topology到storm集群"></a><a href="#自定义topology并提交topology到storm集群" title="自定义topology并提交topology到storm集群"></a>自定义topology并提交topology到storm集群</h2><h3 id="1-首先需要实现storm的spout和bolt接口实现对stream流数据的接收和处理"><a href="#1-首先需要实现storm的spout和bolt接口实现对stream流数据的接收和处理" class="headerlink" title="1.首先需要实现storm的spout和bolt接口实现对stream流数据的接收和处理"></a><a href="#1-首先需要实现storm的spout和bolt接口实现对stream流数据的接收和处理" title="1.首先需要实现storm的spout和bolt接口实现对stream流数据的接收和处理"></a>1.首先需要实现storm的spout和bolt接口实现对stream流数据的接收和处理</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">package</span> cn<span class="token punctuation">.</span>xpleaf<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>remote<span class="token punctuation">;</span>    <span class="token keyword">import</span> cn<span class="token punctuation">.</span>xpleaf<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>StormUtil<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>Config<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>LocalCluster<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>StormSubmitter<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>generated<span class="token punctuation">.</span>StormTopology<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>spout<span class="token punctuation">.</span>SpoutOutputCollector<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>task<span class="token punctuation">.</span>OutputCollector<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>task<span class="token punctuation">.</span>TopologyContext<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>OutputFieldsDeclarer<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>TopologyBuilder<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseRichBolt<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseRichSpout<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Fields<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Values<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 1°、实现数字累加求和的案例：数据源不断产生递增数字，对产生的数字累加求和。     * &lt;p>     * Storm组件：Spout、Bolt、数据是Tuple，使用main中的Topology将spout和bolt进行关联     * MapReduce的组件：Mapper和Reducer、数据是Writable，通过一个main中的job将二者关联     * &lt;p>     * 适配器模式（Adapter）：BaseRichSpout，其对继承接口中一些没必要的方法进行了重写，但其重写的代码没有实现任何功能。     * 我们称这为适配器模式     */</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StormSumTopology</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 数据源         */</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OrderSpout</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRichSpout</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> Map conf<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 当前组件配置信息</span>            <span class="token keyword">private</span> TopologyContext context<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前组件上下文对象</span>            <span class="token keyword">private</span> SpoutOutputCollector collector<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 发送tuple的组件</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span>Map conf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span> SpoutOutputCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>conf <span class="token operator">=</span> conf<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>collector <span class="token operator">=</span> collector<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/**             * 接收数据的核心方法             */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextTuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    num<span class="token operator">++</span><span class="token punctuation">;</span>                    StormUtil<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间"</span> <span class="token operator">+</span> StormUtil<span class="token punctuation">.</span>df_yyyyMMddHHmmss<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"产生的订单金额："</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/**             * 是对发送出去的数据的描述schema             */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"order_cost"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 计算和的Bolt节点         */</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SumBolt</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRichBolt</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> Map conf<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 当前组件配置信息</span>            <span class="token keyword">private</span> TopologyContext context<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前组件上下文对象</span>            <span class="token keyword">private</span> OutputCollector collector<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 发送tuple的组件</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span>Map stormConf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span> OutputCollector collector<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>conf <span class="token operator">=</span> conf<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>collector <span class="token operator">=</span> collector<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">private</span> Long sumOrderCost <span class="token operator">=</span> 0L<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 处理数据的核心方法             */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple input<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Long orderCost <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getLongByField</span><span class="token punctuation">(</span><span class="token string">"order_cost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sumOrderCost <span class="token operator">+=</span> orderCost<span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"商城网站到目前"</span> <span class="token operator">+</span> StormUtil<span class="token punctuation">.</span>df_yyyyMMddHHmmss<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的商品总交易额"</span> <span class="token operator">+</span> sumOrderCost<span class="token punctuation">)</span><span class="token punctuation">;</span>                StormUtil<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/**             * 如果当前bolt为最后一个处理单元，该方法可以不用管             */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 构建拓扑，相当于在MapReduce中构建Job         */</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            TopologyBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopologyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 设置spout和bolt的dag（有向无环图）             */</span>            builder<span class="token punctuation">.</span><span class="token function">setSpout</span><span class="token punctuation">(</span><span class="token string">"id_order_spout"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OrderSpout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"id_sum_bolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SumBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span><span class="token string">"id_order_spout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过不同的数据流转方式，来指定数据的上游组件</span>            <span class="token comment" spellcheck="true">// 使用builder构建topology</span>            StormTopology topology <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String topologyName <span class="token operator">=</span> StormSumTopology<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 拓扑的名称</span>            Config config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Config()对象继承自HashMap，但本身封装了一些基本的配置</span>            <span class="token comment" spellcheck="true">// 启动topology，本地启动使用LocalCluster，集群启动使用StormSubmitter</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">==</span> null <span class="token operator">||</span> args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 没有参数时使用本地模式，有参数时使用集群模式</span>                LocalCluster localCluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 本地开发模式，创建的对象为LocalCluster</span>                localCluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span>topologyName<span class="token punctuation">,</span> config<span class="token punctuation">,</span> topology<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                StormSubmitter<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span>topologyName<span class="token punctuation">,</span> config<span class="token punctuation">,</span> topology<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-将spout和bolt接口以及其他配置类组成的topology的jar包放入到指定的目录中（最好放在storm的nimbus节点下），注意打包方式确保JAR包下有storm-core相关依赖包"><a href="#2-将spout和bolt接口以及其他配置类组成的topology的jar包放入到指定的目录中（最好放在storm的nimbus节点下），注意打包方式确保JAR包下有storm-core相关依赖包" class="headerlink" title="2.将spout和bolt接口以及其他配置类组成的topology的jar包放入到指定的目录中（最好放在storm的nimbus节点下），注意打包方式确保JAR包下有storm-core相关依赖包."></a><a href="#2-将spout和bolt接口以及其他配置类组成的topology的jar包放入到指定的目录中（最好放在storm的nimbus节点下），注意打包方式确保JAR包下有storm-core相关依赖包" title="2.将spout和bolt接口以及其他配置类组成的topology的jar包放入到指定的目录中（最好放在storm的nimbus节点下），注意打包方式确保JAR包下有storm-core相关依赖包."></a>2.将spout和bolt接口以及其他配置类组成的topology的jar包放入到指定的目录中（最好放在storm的nimbus节点下），注意打包方式确保JAR包下有storm-core相关依赖包.</h3><h3 id="3-执行命令提交topology的JAR到storm的集群"><a href="#3-执行命令提交topology的JAR到storm的集群" class="headerlink" title="3.执行命令提交topology的JAR到storm的集群"></a><a href="#3-执行命令提交topology的JAR到storm的集群" title="3.执行命令提交topology的JAR到storm的集群"></a>3.执行命令提交topology的JAR到storm的集群</h3><pre><code>  #先切换到strom 的bin目录，然后执行以下命令  bin/storm kill topology #执行KILL操作时候可能会报没有此topology错误,可以不用理会    sleep 5  # 类似JAVA -JAR 方式启动JAR包，后面的bootstrap-servers根据业务而定，可要可不要.    bin/storm jar topology/topology-1.0.0.jar  com.company.ApplicationLoader --bootstrap-serverIp1=ip1:9092,serverIp2:9092,serverIp3:9092</code></pre><h3 id="4-通过nimbus的UI端口查看topology的运行情况，以及异常情况"><a href="#4-通过nimbus的UI端口查看topology的运行情况，以及异常情况" class="headerlink" title="4.通过nimbus的UI端口查看topology的运行情况，以及异常情况"></a><a href="#4-通过nimbus的UI端口查看topology的运行情况，以及异常情况" title="4.通过nimbus的UI端口查看topology的运行情况，以及异常情况"></a>4.通过nimbus的UI端口查看topology的运行情况，以及异常情况</h3><p><img src="/images/storm/stormui.png" alt=""></p><h2 id="storm-核心逻辑"><a href="#storm-核心逻辑" class="headerlink" title="storm 核心逻辑"></a><a href="#storm-核心逻辑" title="storm 核心逻辑"></a>storm 核心逻辑</h2><blockquote><p>Nimbus：Storm集群主节点，负责资源分配和任务调度。我们提交任务和截止任务都是在Nimbus上操作的。一个Storm集群只有一个Nimbus节点。<br>Supervisor：Storm集群工作节点，接受Nimbus分配任务，管理所有Worker。<br>Worker：工作进程，每个工作进程中都有多个Task。<br>Task：任务，每个Spout和Bolt都是一个任务，每个任务都是一个线程。<br>Topology：计算拓扑，包含了应用程序的逻辑。<br>Stream：消息流，关键抽象，是没有边界的Tuple序列。<br>Spout：消息流的源头，Topology的消息生产者。<br>Bolt：消息处理单元，可以过滤、聚合、查询数据库。<br>Stream grouping：消息分发策略，一共6种，定义每个Bolt接受何种输入。<br>Reliability：可靠性，Storm保证每个Tuple都会被处理。</p></blockquote><h2 id="Storm安装部署"><a href="#Storm安装部署" class="headerlink" title="Storm安装部署"></a><a href="#Storm安装部署" title="Storm安装部署"></a>Storm安装部署</h2><h3 id="zookeeper集群安装"><a href="#zookeeper集群安装" class="headerlink" title="zookeeper集群安装"></a><a href="#zookeeper集群安装" title="zookeeper集群安装"></a>zookeeper集群安装</h3><blockquote><p>略，请自行查看文档安装，这个比较简单</p></blockquote><h3 id="搭建storm集群"><a href="#搭建storm集群" class="headerlink" title="搭建storm集群"></a><a href="#搭建storm集群" title="搭建storm集群"></a>搭建storm集群</h3><p><a href="http://storm.apache.org/index.html" target="_blank" rel="noopener">下载storm包,目前已经更新到2.0版本，下载地址&gt;http://storm.apache.org/index.html</a></p><h3 id="1-解压"><a href="#1-解压" class="headerlink" title="1.解压"></a><a href="#1-解压" title="1.解压"></a>1.解压</h3><pre class="line-numbers language-s"><code class="language-s">    [uplooking@uplooking01 soft]$ tar -zxvf apache-storm-1.0.2.tar.gz -C ../app/    [uplooking@uplooking01 app]$ mv apache-storm-1.0.2/ storm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-修改配置文件-storm-env-sh"><a href="#2-修改配置文件-storm-env-sh" class="headerlink" title="2.修改配置文件 storm-env.sh"></a><a href="#2-修改配置文件-storm-env-sh" title="2.修改配置文件 storm-env.sh"></a>2.修改配置文件 storm-env.sh</h3><pre class="line-numbers language-s"><code class="language-s">    export JAVA_HOME=/opt/jdk    export STORM_CONF_DIR="/home/uplooking/app/storm/conf"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-修改storm-yaml"><a href="#3-修改storm-yaml" class="headerlink" title="3. 修改storm.yaml"></a><a href="#3-修改storm-yaml" title="3. 修改storm.yaml"></a>3. 修改storm.yaml</h3><pre class="line-numbers language-s"><code class="language-s">    storm.zookeeper.servers:        - "uplooking01"        - "uplooking02"        - "uplooking03"    nimbus.seeds: ["uplooking01", "uplooking02"]    storm.local.dir: "/home/uplooking/data/storm" # 日志目录    supervisor.slots.ports:        - 6700        - 6701        - 6702        - 6703    storm.zookeeper.port: 2181 #zookeeper端口配置    ui.port: 8000 #ui 端口设置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建storm-local-dir"><a href="#4-创建storm-local-dir" class="headerlink" title="4.创建storm.local.dir"></a><a href="#4-创建storm-local-dir" title="4.创建storm.local.dir"></a>4.创建storm.local.dir</h3><pre class="line-numbers language-s"><code class="language-s">    mkdir -p /home/uplooing/data/storm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-配置环境变量"><a href="#5-配置环境变量" class="headerlink" title="5.配置环境变量"></a><a href="#5-配置环境变量" title="5.配置环境变量"></a>5.配置环境变量</h3><pre class="line-numbers language-s"><code class="language-s">    # .bash_profile    export STORM_HOME=/home/uplooking/app/storm    export PATH=$PATH:$STORM_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-将其同步到其它节点"><a href="#6-将其同步到其它节点" class="headerlink" title="6.将其同步到其它节点"></a><a href="#6-将其同步到其它节点" title="6.将其同步到其它节点"></a>6.将其同步到其它节点</h3><pre class="line-numbers language-s"><code class="language-s">    scp .bash_profile uplooking@uplooking02:/home/uplooking    scp .bash_profile uplooking@uplooking03:/home/uplooking<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-复制storm安装目录到其它节点"><a href="#7-复制storm安装目录到其它节点" class="headerlink" title="7.复制storm安装目录到其它节点"></a><a href="#7-复制storm安装目录到其它节点" title="7.复制storm安装目录到其它节点"></a>7.复制storm安装目录到其它节点</h3><pre class="line-numbers language-s"><code class="language-s">    scp -r storm/ uplooking@uplooking02:/home/uplooking/app    scp -r storm/ uplooking@uplooking03:/home/uplooking/app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-启动storm集群"><a href="#8-启动storm集群" class="headerlink" title="8.启动storm集群"></a><a href="#8-启动storm集群" title="8.启动storm集群"></a>8.启动storm集群</h3><pre class="line-numbers language-s"><code class="language-s">    # uplooking01    storm nimbus &    storm ui &    # uplooking02    storm nimbus &    storm supervisor &    # uplooking03    storm supervisor &<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-启动logviewer（可选）"><a href="#9-启动logviewer（可选）" class="headerlink" title="9.启动logviewer（可选）"></a><a href="#9-启动logviewer（可选）" title="9.启动logviewer（可选）"></a>9.启动logviewer（可选）</h3><pre><code>在所有从节点执行"nohup bin/storm logviewer &gt;/dev/null 2&gt;&amp;1 &amp;"启动log后台程序，并放到后台执行。(nimbus节点可以不用启动logviewer进程，因为logviewer进程主要是为了方便查看任务的执行日志，这些执行日志都在supervisor节点上)。</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>storm作为一款高效的数据流实时处理框架得到了广泛的使用，解决了Hadoop、spark在数据处理方面的性能问题，对JAVA良好的支持使得其在商业上应用更加广泛.<br>此文是自己学习和使用了storm集群的一些理解和体会，如有错误，欢迎指正.</p></blockquote><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> cluster </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> storm </tag>
            
            <tag> topology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hibernate.jdbc.work高性能处理批量数据</title>
      <link href="/2019/08/27/%E4%BD%BF%E7%94%A8hibernate-jdbc-work%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%84%E7%90%86%E6%89%B9%E9%87%8F%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/08/27/%E4%BD%BF%E7%94%A8hibernate-jdbc-work%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%84%E7%90%86%E6%89%B9%E9%87%8F%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>本文介绍如何使用Hibernate.jdbc.Work批量处理大量的数据（QCUD）  </p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><a href="#简介" title="简介"></a>简介</h2><blockquote><p>为何使用原生的批量处理数据操作而不用现有的hibernate框架实现呢，因为hibernate对插入和更新的处理方式在大量数据插入式并不能更好的支持。</p></blockquote><blockquote><p>需求分析，如果你希望将一个对象的集合全部插入到数据库，但使用hibernate框架的批处理速度回比较慢，hibernate其实是一条一条的插入数据的，JDBC的BATCH不同是JDBC的bactch会先将sql预编译，再将集合的值SET进去，大大节省了编译SQL的时间。</p></blockquote><blockquote><p>经过测试：使用hibernate插入10条数据，需要预编译SQL10次，而原始JDBC的batch只需要预编译一次，且随着需要插入的数据增长需要的时间区别也越来越大，使用hibernate默认batch插入10000条数据需要1-2秒，优化后只需要200毫秒左右.</p></blockquote><h2 id="hibernate-de-persist-he-merge"><a href="#hibernate-de-persist-he-merge" class="headerlink" title="hibernate de persist he merge"></a><a href="#hibernate-de-persist-he-merge" title="hibernate de persist he merge"></a>hibernate de persist he merge</h2><pre class="line-numbers language-java"><code class="language-java">     <span class="token comment" spellcheck="true">/**         * Make an instance managed and persistent.         * @param entity  entity instance         * @throws EntityExistsException if the entity already exists.         * (If the entity already exists, the &lt;code>EntityExistsException&lt;/code> may         * be thrown when the persist operation is invoked, or the         * &lt;code>EntityExistsException&lt;/code> or another &lt;code>PersistenceException&lt;/code> may be         * thrown at flush or commit time.)         * @throws IllegalArgumentException if the instance is not an         *         entity         * @throws TransactionRequiredException if invoked on a         *         container-managed entity manager of type         *         &lt;code>PersistenceContextType.TRANSACTION&lt;/code> and there is         *         no transaction         */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">persist</span><span class="token punctuation">(</span>Object entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * Merge the state of the given entity into the         * current persistence context.         * @param entity  entity instance         * @return the managed instance that the state was merged to         * @throws IllegalArgumentException if instance is not an         *         entity or is a removed entity         * @throws TransactionRequiredException if invoked on a         *         container-managed entity manager of type         *         &lt;code>PersistenceContextType.TRANSACTION&lt;/code> and there is         *         no transaction         */</span>        <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">merge</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过Hibernate的缓存进行批量插入"><a href="#通过Hibernate的缓存进行批量插入" class="headerlink" title="通过Hibernate的缓存进行批量插入"></a><a href="#通过Hibernate的缓存进行批量插入" title="通过Hibernate的缓存进行批量插入"></a>通过Hibernate的缓存进行批量插入</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HibernateTest</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            SessionFactory sessionFactory <span class="token operator">=</span> hibernateTemplate<span class="token punctuation">.</span><span class="token function">getSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Session session <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Transaction tx  <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开启事务</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Usertable user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Usertable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                session<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">100</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    session<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      session<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            ts<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            HibernateSessionFactory<span class="token punctuation">.</span><span class="token function">closeSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="直接调用JDBC"><a href="#直接调用JDBC" class="headerlink" title="直接调用JDBC"></a><a href="#直接调用JDBC" title="直接调用JDBC"></a>直接调用JDBC</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> RpcServiceResult <span class="token function">createSubThings</span><span class="token punctuation">(</span>ArrayNode insertArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>            SessionFactory sessionFactory <span class="token operator">=</span> hibernateTemplate<span class="token punctuation">.</span><span class="token function">getSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Session session <span class="token operator">=</span> sessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Transaction tx  <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开启事务</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//do something</span>                String sqlStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO  table       ( `attribute1`,"</span>                                                                    <span class="token operator">+</span> <span class="token string">" `attribute2`, "</span>                                                                    <span class="token operator">+</span> <span class="token string">" `attribute3`"</span>                                                                    <span class="token operator">+</span> <span class="token string">") "</span>                                        <span class="token operator">+</span>  <span class="token string">"VALUES (?, ?, ?);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Work work <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//Contract for performing a discrete piece of org.hibernate.jdbc.Work;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>                        PreparedStatement statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> insertArray<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            JsonNode subThingJsonNode <span class="token operator">=</span> insertArray<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                            String value1     <span class="token operator">=</span> subThingJsonNode<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            String value2   <span class="token operator">=</span> subThingJsonNode<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            String value3   <span class="token operator">=</span> subThingJsonNode<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            statement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>                            statement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span>                            statement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>value3<span class="token punctuation">)</span><span class="token punctuation">;</span>                            statement<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        statement<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                session<span class="token punctuation">.</span><span class="token function">doWork</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>                tx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//提交事务</span>                ObjectNode responseNode <span class="token operator">=</span> JsonNodeFactory<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">objectNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RpcServiceResult</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>SC_OK<span class="token punctuation">,</span> responseNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>HibernateException en<span class="token punctuation">)</span> <span class="token punctuation">{</span>                tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to save the ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RpcServiceResult</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>SC_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> en<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to save the ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tx<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RpcServiceResult</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>SC_INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>使用此方法批量提交插入操作，不仅可以提高效率，也可以防止SQL注入, 同时UPDATE, DELETE 等操作也可以使用此方式.</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hibernate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KAFKA介绍和集群搭建安装</title>
      <link href="/2019/08/27/KAFKA%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%AE%89%E8%A3%85/"/>
      <url>/2019/08/27/KAFKA%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><a href="#简介" title="简介"></a>简介</h2><p>本文介绍KAFKA的特性和集群安装以及配合ACTIVEMQ使用  </p><h2 id="什么是KAFKA"><a href="#什么是KAFKA" class="headerlink" title="什么是KAFKA"></a><a href="#什么是KAFKA" title="什么是KAFKA"></a>什么是KAFKA</h2><blockquote><p>Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据。 这种动作（网页浏览，搜索和其他用户的行动）是在现代网络上的许多社会功能的一个关键因素。 这些数据通常是由于吞吐量的要求而通过处理日志和日志聚合来解决。 对于像Hadoop一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka的目的是通过Hadoop的并行加载机制来统一线上和离线的消息处理，也是为了通过集群来提供实时的消息。</p></blockquote><h2 id="为什么使用KAFKA"><a href="#为什么使用KAFKA" class="headerlink" title="为什么使用KAFKA"></a><a href="#为什么使用KAFKA" title="为什么使用KAFKA"></a>为什么使用KAFKA</h2><blockquote><p>当数据是由上游模块产生，上游模块，使用上游模块的数据计算、统计、分析，这个时候就可以使用消息系统，尤其是分布式消息系统！kafka主要用来存储和接收上游或者下游的数据，也可以自己处理数据.下图是KAFKA和其他分布式消息系统的对比.<br><img src="/images/kafka/kafka-01.png" alt=""></p></blockquote><h2 id="KAFKA-协议AMOP"><a href="#KAFKA-协议AMOP" class="headerlink" title="KAFKA 协议AMOP"></a><a href="#KAFKA-协议AMOP" title="KAFKA 协议AMOP"></a>KAFKA 协议AMOP</h2><blockquote><p>Advanced Message Queuing Protocol （高级消息队列协议）<br>The Advanced Message Queuing Protocol (AMQP)：是一个标准开放的应用层的消息中间件（Message Oriented Middleware）协议。AMQP定义了通过网络发送的字节流的数据格式。<br>因此兼容性非常好，任何实现AMQP协议的程序都可以和与AMQP协议兼容的其他程序交互，可以很容易做到跨语言，跨平台。</p></blockquote><h2 id="KAFKA特性"><a href="#KAFKA特性" class="headerlink" title="KAFKA特性"></a><a href="#KAFKA特性" title="KAFKA特性"></a>KAFKA特性</h2><blockquote><p>通过O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以TB的消息存储也能够保持长时间的稳定性能。<br>高吞吐量 ：即使是非常普通的硬件Kafka也可以支持每秒数百万的消息。<br>支持通过Kafka服务器和消费机集群来分区消息。<br>支持Hadoop并行数据加载。<br>KAFAK数据备份保证了再其他机器down机的时候，集群的稳定性，同时消息会replication备份，保证数据不丢失，且保证了消息的唯一性。<br>但是KAFKA尚未确保消息的发送与接收绝对可靠(比如,消息重发,消息发送丢失等)，消息消费失败时需要consumer手动重置offset来重新消费该条消息。</p></blockquote><h2 id="KAFKA如何能支持消息数据的高并发"><a href="#KAFKA如何能支持消息数据的高并发" class="headerlink" title="KAFKA如何能支持消息数据的高并发"></a><a href="#KAFKA如何能支持消息数据的高并发" title="KAFKA如何能支持消息数据的高并发"></a>KAFKA如何能支持消息数据的高并发</h2><h3 id="1、持久性"><a href="#1、持久性" class="headerlink" title="1、持久性"></a><a href="#1、持久性" title="1、持久性"></a>1、持久性</h3><blockquote><p>kafka使用文件存储消息,这就直接决定kafka在性能上严重依赖文件系统的本身特性.且无论任何OS下,对文件系统本身的优化几乎没有可能.文件缓存/直接内存映射等是常用的手段.因为kafka是对日志文件进行append操作,因此磁盘检索的开支是较小的;同时为了减少磁盘写入的次数,broker会将消息暂时buffer起来,当消息的个数(或尺寸)达到一定阀值时,再flush到磁盘,这样减少了磁盘IO调用的次数.</p></blockquote><h3 id="2、性能"><a href="#2、性能" class="headerlink" title="2、性能"></a><a href="#2、性能" title="2、性能"></a>2、性能</h3><blockquote><p>需要考虑的影响性能点很多,除磁盘IO之外,我们还需要考虑网络IO,这直接关系到kafka的吞吐量问题.kafka并没有提供太多高超的技巧;对于producer端,可以将消息buffer起来,当消息的条数达到一定阀值时,批量发送给broker;对于consumer端也是一样,批量fetch多条消息.不过消息量的大小可以通过配置文件来指定.对于kafka broker端,似乎有个sendfile系统调用可以潜在的提升网络IO的性能:将文件的数据映射到系统内存中,socket直接读取相应的内存区域即可,而无需进程再次copy和交换. 其实对于producer/consumer/broker三者而言,CPU的开支应该都不大,因此启用消息压缩机制是一个良好的策略;压缩需要消耗少量的CPU资源,不过对于kafka而言,网络IO更应该需要考虑.可以将任何在网络上传输的消息都经过压缩.kafka支持gzip/snappy等多种压缩方式.</p></blockquote><h3 id="3、生产者"><a href="#3、生产者" class="headerlink" title="3、生产者"></a><a href="#3、生产者" title="3、生产者"></a>3、生产者</h3><blockquote><p>负载均衡: producer将会和Topic下所有partition leader保持socket连接;消息由producer直接通过socket发送到broker,中间不会经过任何”路由层”.事实上,消息被路由到哪个partition上,有producer客户端决定.比如可以采用”random””key-hash””轮询”等,如果一个topic中有多个partitions,那么在producer端实现”消息均衡分发”是必要的.<br>其中partition leader的位置(host:port)注册在zookeeper中,producer作为zookeeper client,已经注册了watch用来监听partition leader的变更事件.<br>异步发送：将多条消息暂且在客户端buffer起来，并将他们批量的发送到broker，小数据IO太多，会拖慢整体的网络延迟，批量延迟发送事实上提升了网络效率。不过这也有一定的隐患，比如说当producer失效时，那些尚未发送的消息将会丢失。</p></blockquote><h3 id="4、消费者"><a href="#4、消费者" class="headerlink" title="4、消费者"></a><a href="#4、消费者" title="4、消费者"></a>4、消费者</h3><blockquote><p>consumer端向broker发送”fetch”请求,并告知其获取消息的offset;此后consumer将会获得一定条数的消息;consumer端也可以重置offset来重新消费消息.</p></blockquote><h2 id="KAFKA-术语分析"><a href="#KAFKA-术语分析" class="headerlink" title="KAFKA 术语分析"></a><a href="#KAFKA-术语分析" title="KAFKA 术语分析"></a>KAFKA 术语分析</h2><blockquote><p>Broker：Kafka集群包含一个或多个服务器，这种服务器被称为broker<br>Topic：每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic。（<br>物理上不同Topic的消息分开存储，逻辑上一个Topic的消息虽然保存于一个或多个broker上但用户只需指定消息的Topic即可生产或消费数据而不必关心数据存于何处）<br>Partition:Partition是物理上的概念，每个Topic包含一个或多个Partition,数据也是按partition来存储的，简称为分区.<br>Producer:负责发布消息到Kafka broker<br>Consumer:消息消费者，向Kafka broker读取消息的客户端。<br>Consumer Group：每个Consumer属于一个特定的Consumer Group（可为每个Consumer指定group name，若不指定group name则属于默认的group）。</p></blockquote><h2 id="KAFKA架构"><a href="#KAFKA架构" class="headerlink" title="KAFKA架构"></a><a href="#KAFKA架构" title="KAFKA架构"></a>KAFKA架构</h2><p><img src="/images/kafka/kafka-02.png" alt=""></p><blockquote><p>kafka集群中的消息，是通过Topic（主题）来进行组织的，一个Topic可以认为是一类消息，每个topic将被分成多个partition(区),每个partition在存储层面是append log文件。任何发布到此partition的消息都会被直接追加到log文件的尾部，每条消息在文件中的位置称为offset（偏移量），offset为一个long型数字，它是唯一标记一条消息。它唯一的标记一条消息。kafka并没有提供其他额外的索引机制来存储offset，因为在kafka中几乎不允许对消息进行“随机读写”，其结构如下图：<br><img src="/images/kafka/kafka-03.png" alt=""></p></blockquote><h2 id="搭建KAFKA集群"><a href="#搭建KAFKA集群" class="headerlink" title="搭建KAFKA集群"></a><a href="#搭建KAFKA集群" title="搭建KAFKA集群"></a>搭建KAFKA集群</h2><h3 id="1-下载KAFKA并解压-假设zookeeper集群已经搭建好了"><a href="#1-下载KAFKA并解压-假设zookeeper集群已经搭建好了" class="headerlink" title="1. 下载KAFKA并解压(假设zookeeper集群已经搭建好了)"></a><a href="#1-下载KAFKA并解压-假设zookeeper集群已经搭建好了" title="1. 下载KAFKA并解压(假设zookeeper集群已经搭建好了)"></a>1. 下载KAFKA并解压(假设zookeeper集群已经搭建好了)</h3><p><a href="http://kafka.apache.org/downloads.html" target="_blank" rel="noopener">下载KAFKAhttp://kafka.apache.org/downloads.html</a></p><h3 id="2-修改配置文件kafka-config-server-properties"><a href="#2-修改配置文件kafka-config-server-properties" class="headerlink" title="2. 修改配置文件kafka/config/server.properties"></a><a href="#2-修改配置文件kafka-config-server-properties" title="2. 修改配置文件kafka/config/server.properties"></a>2. 修改配置文件kafka/config/server.properties</h3><pre class="line-numbers language-t"><code class="language-t">    #    #node1下    broker.id=3    advertised.listeners=PLAINTEXT:////your.host.name:9092    log.dirs=/home/hadoop/kafka_log    zookeeper.connect=192.168.80.123:2181,192.168.80.124:2181,192.168.80.125:2181    #node2下    broker.id=2    advertised.listeners=PLAINTEXT:////your.host.name:9092    log.dirs=/home/hadoop/kafka_log    zookeeper.connect=192.168.80.123:2181,192.168.80.124:2181,192.168.80.125:2181    #node3下    broker.id=3    advertised.listeners=PLAINTEXT:////your.host.name:9092    log.dirs=/home/hadoop/kafka_log    zookeeper.connect=192.168.80.123:2181,192.168.80.124:2181,192.168.80.125:2181<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-启动zookeeper和kafka集群"><a href="#3-启动zookeeper和kafka集群" class="headerlink" title="3.启动zookeeper和kafka集群"></a><a href="#3-启动zookeeper和kafka集群" title="3.启动zookeeper和kafka集群"></a>3.启动zookeeper和kafka集群</h3><pre class="line-numbers language-t"><code class="language-t">    启动zookeeper    bin/zookeeper-server-start.sh config/zookeeper.properties    启动kafka        bin/kafka-server-start.sh config/server.properties(集群下需要三台都启动)    ###创建主题    bin/kafka-topics.sh --create --zookeeper 131.10.10.202:2181,131.10.10.203:2181,131.10.10.204:2181 --replication-factor 3 --partitions 8 --topic ff    ###查看主题    bin/kafka-topics.sh --list --zookeeper 131.10.10.202:2181,131.10.10.203:2181,131.10.10.204:2181    ###删除主题    bin/kafka-topics.sh --delete --zookeeper 131.10.10.202:2181,131.10.10.203:2181,131.10.10.204:2181 --topic test    启动生产着      bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test    启动消费者      bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test    发送消息（模拟kafka发送消息）：    ./kafka-console-producer.sh --broker-list 131.10.10.202:9092,131.10.10.203:9092,131.10.10.204:9092 –topic    test    接收消息：    ./kafka-console-consumer.sh -zookeeper 131.10.10.202:2181,131.10.10.203:2181,131.10.10.204:2181  --topic test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用postman提交配置和删除查看配置"><a href="#使用postman提交配置和删除查看配置" class="headerlink" title="使用postman提交配置和删除查看配置"></a><a href="#使用postman提交配置和删除查看配置" title="使用postman提交配置和删除查看配置"></a>使用postman提交配置和删除查看配置</h2><blockquote><p>由于Kafka Connect的目的是作为一个服务运行，提供了一个用于管理connector的REST API。默认情况下，此服务的端口是8083。以下是当前支持的终端入口：</p></blockquote><h3 id="创建topic提交的数据"><a href="#创建topic提交的数据" class="headerlink" title="创建topic提交的数据"></a><a href="#创建topic提交的数据" title="创建topic提交的数据"></a>创建topic提交的数据</h3><blockquote><p>com.company.connector.sink.ActiveMQSinkConnector是自定义的类，并添加JAR到kafka的libs目录中供使用</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"iot-data-kafka-mqtt-source"</span><span class="token punctuation">,</span>        <span class="token string">"config"</span><span class="token operator">:</span><span class="token punctuation">{</span>                    <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"iot-data-kafka-mqtt-source"</span><span class="token punctuation">,</span>                    <span class="token string">"connector.class"</span><span class="token operator">:</span><span class="token string">"com.company.connector.source.ActiveMQSourceConnector"</span><span class="token punctuation">,</span>                    <span class="token string">"topics"</span><span class="token operator">:</span><span class="token string">"ThingsUpstreamSourceTopic"</span><span class="token punctuation">,</span>                    <span class="token string">"tasks.max"</span><span class="token operator">:</span><span class="token string">"10"</span><span class="token punctuation">,</span>                    <span class="token string">"activemq.server_uris"</span><span class="token operator">:</span><span class="token string">"failover:(tcp://131.10.10.68:50000)?randomize=false"</span><span class="token punctuation">,</span>                    <span class="token string">"activemq.destination"</span><span class="token operator">:</span><span class="token string">"Consumer.Iot-Hub-Kafka-Mqtt.VirtualTopic.conpany.v1.things.*.>"</span><span class="token comment" spellcheck="true">//订阅的MQTT的topic</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//--------------------------------------------------------------------------------------</span>    <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"iot-data-kafka-mqtt-sink"</span><span class="token punctuation">,</span>        <span class="token string">"config"</span><span class="token operator">:</span><span class="token punctuation">{</span>                    <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"iot-data-kafka-mqtt-sink"</span><span class="token punctuation">,</span>                    <span class="token string">"connector.class"</span><span class="token operator">:</span><span class="token string">"com.company.connector.sink.ActiveMQSinkConnector"</span><span class="token punctuation">,</span>                    <span class="token string">"topics"</span><span class="token operator">:</span><span class="token string">"ThingsDownstreamMqttSinkTopic"</span><span class="token punctuation">,</span>                    <span class="token string">"tasks.max"</span><span class="token operator">:</span><span class="token string">"10"</span><span class="token punctuation">,</span>                    <span class="token string">"activemq.server_uris"</span><span class="token operator">:</span><span class="token string">"failover:(tcp://131.10.10.68:50000)?randomize=false"</span>                <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用的rest接口"><a href="#常用的rest接口" class="headerlink" title="常用的rest接口"></a><a href="#常用的rest接口" title="常用的rest接口"></a>常用的rest接口</h3><pre class="line-numbers language-t"><code class="language-t">    GET /connectors                  返回活跃的connector列表。    POST /connectors                 请求的主体是包含name字段和对象config字段（connector的配置参数）的JSON对象。    GET /connectors/{name}           获取指定connector的信息。    GET /connectors/{name}/config    获取指定connector的配置参数。    PUT /connectors/{name}/config    更新指定connector的配置参数。    GET /connectors/{name}/status    获取connector的当前状态，包括它是否正在运行，失败，暂停等。    GET /connectors/{name}/tasks     获取当前正在运行的connector的任务列表。    GET /connectors/{name}/tasks/{taskid}/status       获取任务的当前状态，包括是否是运行中的，失败的，暂停的等。    PUT /connectors/{name}/pause                       暂停连接器和它的任务，停止消息处理，直到connector恢复。    PUT /connectors/{name}/resume                      恢复暂停的connector（如果connector没有暂停，则什么都不做）。    POST /connectors/{name}/restart                    重启connector（connector已故障）。    POST /connectors/{name}/tasks/{taskId}/restart     重启单个任务 (通常这个任务已失败)。    DELETE /connectors/{name}                          删除connector, 停止所有的任务并删除其配置。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h1><p>KAFKA作为支持高并发，高可用的分布式消息系统现在广泛的应用在各大商业平台，如果你需要对消息处理做高并发的支持，并且希望消息日志和消息具有高可靠性，可以选用KAFAKA做分布式消息系统，其结合其他分布式消息系统可组成一套高可用、高并发的消息处理流程，例如activeMQ做上游消息处理，kafka集群做中间层持久化数据和消息分发，使用storm做消息的实时处理.</p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> cluster </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-PyInstaller安装和使用</title>
      <link href="/2019/08/27/python-PyInstaller%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/27/python-PyInstaller%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><p>本文主要介绍pyinstaller的安装和使用，目前Python的打包工具主要有py2exe、cxfreeze、PyInstaller三种，经过测试py2exe和cxfreeze的安装过程比较麻烦，且对高版本PYTHON3.7支持不好，使用也比较复杂,虽然pyinstaller打包后文件相对较大，但是其安装的简单性和易用性得到广大Python使用者的青睐.</p><h2 id="如何安装pyinstaller"><a href="#如何安装pyinstaller" class="headerlink" title="如何安装pyinstaller"></a><a href="#如何安装pyinstaller" title="如何安装pyinstaller"></a>如何安装pyinstaller</h2><blockquote><p>如果已经安装了Python3.7且安装了PIP，则可以直接使用PIP命令安装pyintaller,注意可能安装失败，有几种原因，如果你之前安装了其他版本的Python但是其pip相关文件未清除干净，可能会安装失败，会有提示文件夹信息，可能是pip出现了为，把之前的旧pip文件清除，再重新执行命令.总的来说就是保证Python的环境和pip是正确的.</p><pre><code>pip install pyintaller</code></pre></blockquote><h2 id="如何使用pyinstaller打包"><a href="#如何使用pyinstaller打包" class="headerlink" title="如何使用pyinstaller打包"></a><a href="#如何使用pyinstaller打包" title="如何使用pyinstaller打包"></a>如何使用pyinstaller打包</h2><blockquote><p>确保PyInstaller安装成功,如果你要打包的文件为hello.py, 则运行CMD或者bash命令窗，切换到该文件的目录下，然后运行如下命令，然后会看到如下页面.</p><pre><code>pyinstaller -F hello.py</code></pre><p><img src="/images/python/python-pyinstaller.png" alt=""></p></blockquote><blockquote><p>然后在当前文件夹下会自动生成<strong>dist</strong>目录和<strong>build</strong>目录，生成的exe文件则在<strong>dist</strong>目录中，这样通过pyinstaller打包exe的工作就完成了.</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>总的来说，pyinstaller还是挺方便好用的，相对其他两类对高版本的Python支持也比较好,现在你可以尝试将自己的Python脚本编译成exe文件啦.</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> installer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP和HTTPS的区别</title>
      <link href="/2019/08/27/HTTP%E5%92%8CHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/08/27/HTTP%E5%92%8CHTTPS%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><p>本文主要介绍JAVA对https的支持，为何使用https呢，https相当于是http的升级版本，具有http不具备的安全性.</p><h2 id="什么是https"><a href="#什么是https" class="headerlink" title="什么是https"></a><a href="#什么是https" title="什么是https"></a>什么是https</h2><blockquote><p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer 或 Hypertext Transfer Protocol Secure，超文本传输安全协议），是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。<br>HTTP协议传输的数据都是未加密的，也就是明文的，因此使用HTTP协议传输隐私信息非常不安全，为了保证这些隐私数据能加密传输，于是网景公司设计了SSL（Secure Sockets Layer）协议用于对HTTP协议传输的数据进行加密，从而就诞生了HTTPS。简单来说，HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全。</p></blockquote><h2 id="http和https的区别"><a href="#http和https的区别" class="headerlink" title="http和https的区别"></a><a href="#http和https的区别" title="http和https的区别"></a>http和https的区别</h2><blockquote><p>1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p></blockquote><blockquote><p>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p></blockquote><blockquote><p>3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p></blockquote><blockquote><p>4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p></blockquote><h2 id="Https协议的特点"><a href="#Https协议的特点" class="headerlink" title="Https协议的特点"></a><a href="#Https协议的特点" title="Https协议的特点"></a>Https协议的特点</h2><blockquote><p>Https的通信端口由SSL和TSL代替了，它是一种应用层协议，一般的情况下http直接和Tcp进行通信，当使用了SSL之后，就会变成先和SSL通信，SSL再和Tcp进行通信，如下图<br><img src="/images/https/https-ssl.png" alt=""><br>采用了SSL协议之后，Http协议就具备了加密、证书、完整性保护三大功能，SSL是独立于Http存在的，它是现存的广泛使用的网络安全技术。</p></blockquote><h2 id="Https协议采用的加密技术"><a href="#Https协议采用的加密技术" class="headerlink" title="Https协议采用的加密技术"></a><a href="#Https协议采用的加密技术" title="Https协议采用的加密技术"></a>Https协议采用的加密技术</h2><blockquote><p>https协议加密技术按类型分为两类，对称加密和非对称加密</p></blockquote><h3 id="https对称加密技术SSL"><a href="#https对称加密技术SSL" class="headerlink" title="https对称加密技术SSL"></a><a href="#https对称加密技术SSL" title="https对称加密技术SSL"></a>https对称加密技术SSL</h3><p>为什么说SSL是对称加密呢，因为SSL也叫共享密钥加密，当客户端传递消息给服务端时其消息和密钥都是加密了的，但是其中的密钥一但被监听，消息也可能被破解.是一种看似安全，但存在一定风险的消息传输技术.<br><img src="/images/https/SSL.png" alt=""></p><pre><code>client-----publicKey----&gt; server #通过publicKey加密解密过程client&lt;----publicKey----- server #通过publicKey加密解密过程</code></pre><h3 id="https非对称加密技术"><a href="#https非对称加密技术" class="headerlink" title="https非对称加密技术"></a><a href="#https非对称加密技术" title="https非对称加密技术"></a>https非对称加密技术</h3><blockquote><p>“非对称加密”使用的时候有两把锁，一把叫做“私有密钥”，一把是“公开密钥”。<br>运行原理:服务器首先告诉客户端按照自己给定的公开密钥进行加密处理，客户端按照公开密钥加密以后，服务器接受到信息再通过自己的私有密钥进行解密，这样做的好处就是解密的钥匙根本就不会进行传输，因此也就避免了被挟持的风险。就算公开密钥被窃听者拿到了，它也很难进行解密，因为解密过程是对离散对数求值，这可不是轻而易举就能做到的事。以下是非对称加密的原理图：<br><img src="/images/https/https-fdc.png" alt=""></p><pre><code>client-----publicKey----&gt; server use privateKey #先通过publicKey加密解密再通过privateKey解密client&lt;----publicKey----- server use privateKey #先通过publicKey加密解密再通过privateKey解密</code></pre></blockquote><h3 id="非称加密方式的缺点："><a href="#非称加密方式的缺点：" class="headerlink" title="非称加密方式的缺点："></a><a href="#非称加密方式的缺点：" title="非称加密方式的缺点："></a>非称加密方式的缺点：</h3><blockquote><p>第一个是：如何保证接收端向发送端发出公开秘钥的时候，发送端确保收到的是预先要发送的，而不会被挟持。只要是发送密钥，就有可能有被挟持的风险。</p></blockquote><blockquote><p>第二个是：非对称加密的方式效率比较低，它处理起来更为复杂，通信过程中使用就有一定的效率问题而影响通信速度<br>非称加密方式的缺点</p></blockquote><h3 id="Https的安全通信机制"><a href="#Https的安全通信机制" class="headerlink" title="Https的安全通信机制"></a><a href="#Https的安全通信机制" title="Https的安全通信机制"></a>Https的安全通信机制</h3><blockquote><p>基于上述单个加密方式的不足,Https采用混合机制的加密方式,https则综合了公开密钥加密和共享密钥加密的两种方式，充分利用两者的优势，在最初的连接的时候使用非对称密钥的加密方式保证连接的安全性，之后稳定的通讯采用对称加密的方式，稳定的通讯是指确保交换的密钥是安全的。</p></blockquote><blockquote><p>公钥很可能存在被挟持的情况，无法保证客户端收到的公开密钥就是服务器发行的公开密钥。此时就引出了公开密钥证书机制。数字证书认证机构是客户端与服务器都可信赖的第三方机构。证书的具体传播过程如下：<br><img src="/images/https/https-zhongheSSL.png" alt=""></p></blockquote><blockquote><ol><li>服务器的开发者携带公开密钥，向数字证书认证机构提出公开密钥的申请，数字证书认证机构在认清申请者的身份，审核通过以后，会对开发者申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将密钥放在证书里面，绑定在一起</li><li>服务器将这份数字证书发送给客户端，因为客户端也认可证书机构，客户端可以通过数字证书中的数字签名来验证公钥的真伪，来确保服务器传过来的公开密钥是真实的。一般情况下，证书的数字签名是很难被伪造的，这取决于认证机构的公信力。一旦确认信息无误之后，客户端就会通过公钥对报文进行加密发送，服务器接收到以后用自己的私钥进行解密.</li></ol></blockquote><h2 id="为什么还有很多网站不使用Https"><a href="#为什么还有很多网站不使用Https" class="headerlink" title="为什么还有很多网站不使用Https"></a><a href="#为什么还有很多网站不使用Https" title="为什么还有很多网站不使用Https"></a>为什么还有很多网站不使用Https</h2><blockquote><p>1：加密通信会消耗一定的cpu和服务器资源,如果每次通信都加密，就会消耗更多的资源.<br>2: 如果所有的信息都采用https加密，这无疑是一种浪费。非敏感信息就算被窃取了，也无伤大雅。可以在其传输敏感信息的时候，采用https协议进行加密.<br>3：向认证机构购买证书的开销也是一笔很大的费用。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>本文主要介绍了HTTPS和其通信机制，现在更加注重信息安全，预计未来https的应用场景将会更广.</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA调用HTTPS接口</title>
      <link href="/2019/08/27/JAVA%E8%B0%83%E7%94%A8HTTPS%E6%8E%A5%E5%8F%A3/"/>
      <url>/2019/08/27/JAVA%E8%B0%83%E7%94%A8HTTPS%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍JAVA实现https接口调用包括忽略本地证书方式和加载本地证书方式两种.</p></blockquote><h2 id="第一种：忽略本地证书方式"><a href="#第一种：忽略本地证书方式" class="headerlink" title="第一种：忽略本地证书方式"></a><a href="#第一种：忽略本地证书方式" title="第一种：忽略本地证书方式"></a>第一种：忽略本地证书方式</h2><blockquote><p>忽略本地证书方式就是服务器不对客户端证书做校验的网站比如 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>,<br>和其他https网站不一样，其他网站需要客户端本地拥有证书文件，在客户端调用的时候加载.</p></blockquote><h3 id="1-编写HttpClientUtil工具类"><a href="#1-编写HttpClientUtil工具类" class="headerlink" title="1.编写HttpClientUtil工具类"></a><a href="#1-编写HttpClientUtil工具类" title="1.编写HttpClientUtil工具类"></a>1.编写HttpClientUtil工具类</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpEntity<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpResponse<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>HttpClient<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>HttpPost<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>StringEntity<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>message<span class="token punctuation">.</span>BasicHeader<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>params<span class="token punctuation">.</span>CoreConnectionPNames<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>util<span class="token punctuation">.</span>EntityUtils<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *     * @Description:    利用HttpClient进行post请求的工具类    * @author: jackromer    * @version: 1.0, Jan 25, 2019     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpClientUtil</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger        logger    <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>HttpClientUtil<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 发送post消息        * @Description:        * @param url        * @param jsonstr        * @param charset        * @return         */</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span>String jsonstr<span class="token punctuation">,</span>String charset<span class="token punctuation">)</span><span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"POST MESSAGE:"</span> <span class="token operator">+</span> jsonstr<span class="token punctuation">)</span><span class="token punctuation">;</span>            HttpClient httpClient <span class="token operator">=</span> null<span class="token punctuation">;</span>            HttpPost httpPost <span class="token operator">=</span> null<span class="token punctuation">;</span>            String result <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SSLClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                httpClient<span class="token punctuation">.</span><span class="token function">getParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span>CoreConnectionPNames<span class="token punctuation">.</span>CONNECTION_TIMEOUT<span class="token punctuation">,</span> <span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                httpPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                httpPost<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                StringEntity se <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringEntity</span><span class="token punctuation">(</span>jsonstr<span class="token punctuation">)</span><span class="token punctuation">;</span>                se<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                se<span class="token punctuation">.</span><span class="token function">setContentEncoding</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                httpPost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>se<span class="token punctuation">)</span><span class="token punctuation">;</span>                HttpResponse response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpPost<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    HttpEntity resEntity <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>resEntity <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        result <span class="token operator">=</span> EntityUtils<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>resEntity<span class="token punctuation">,</span>charset<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"POST MSG ERROR."</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"POST  RESULT:"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"POST RESULT IS NULL."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-编写https的SSLClient类"><a href="#2-编写https的SSLClient类" class="headerlink" title="2.编写https的SSLClient类"></a><a href="#2-编写https的SSLClient类" title="2.编写https的SSLClient类"></a>2.编写https的SSLClient类</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**    * @Description:    用于进行Https请求的HttpClient      * @author: jackromer    * @version: 1.0, Jan 24, 2019    */</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>cert<span class="token punctuation">.</span>CertificateException<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>cert<span class="token punctuation">.</span>X509Certificate<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>HostnameVerifier<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>HttpsURLConnection<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>SSLContext<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>SSLSession<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>TrustManager<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>X509TrustManager<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>ClientConnectionManager<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>scheme<span class="token punctuation">.</span>Scheme<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>scheme<span class="token punctuation">.</span>SchemeRegistry<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>SSLSocketFactory<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>client<span class="token punctuation">.</span>DefaultHttpClient<span class="token punctuation">;</span>      <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SSLClient</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultHttpClient</span><span class="token punctuation">{</span>          <span class="token keyword">public</span> <span class="token function">SSLClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>              <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              SSLContext ctx <span class="token operator">=</span> SSLContext<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"TLS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              X509TrustManager tm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509TrustManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token annotation punctuation">@Override</span>                      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkClientTrusted</span><span class="token punctuation">(</span>X509Certificate<span class="token punctuation">[</span><span class="token punctuation">]</span> chain<span class="token punctuation">,</span>                              String authType<span class="token punctuation">)</span> <span class="token keyword">throws</span> CertificateException <span class="token punctuation">{</span>                      <span class="token punctuation">}</span>                      <span class="token annotation punctuation">@Override</span>                      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkServerTrusted</span><span class="token punctuation">(</span>X509Certificate<span class="token punctuation">[</span><span class="token punctuation">]</span> chain<span class="token punctuation">,</span>                              String authType<span class="token punctuation">)</span> <span class="token keyword">throws</span> CertificateException <span class="token punctuation">{</span>                      <span class="token punctuation">}</span>                      <span class="token annotation punctuation">@Override</span>                      <span class="token keyword">public</span> X509Certificate<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAcceptedIssuers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token keyword">return</span> null<span class="token punctuation">;</span>                      <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">;</span>              ctx<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TrustManager</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>tm<span class="token punctuation">}</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>              HostnameVerifier ignoreHostnameVerifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HostnameVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">verify</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> SSLSession sslsession<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WARNING: Hostname is not matched for cert."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//忽略本地证书文件校验</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            HttpsURLConnection<span class="token punctuation">.</span><span class="token function">setDefaultHostnameVerifier</span><span class="token punctuation">(</span>ignoreHostnameVerifier<span class="token punctuation">)</span><span class="token punctuation">;</span>            HttpsURLConnection<span class="token punctuation">.</span><span class="token function">setDefaultSSLSocketFactory</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">getSocketFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SSLSocketFactory ssf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SSLSocketFactory</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span>SSLSocketFactory<span class="token punctuation">.</span>ALLOW_ALL_HOSTNAME_VERIFIER<span class="token punctuation">)</span><span class="token punctuation">;</span>              ClientConnectionManager ccm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              SchemeRegistry sr <span class="token operator">=</span> ccm<span class="token punctuation">.</span><span class="token function">getSchemeRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              sr<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Scheme</span><span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">,</span> <span class="token number">443</span><span class="token punctuation">,</span> ssf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建POST请求测试"><a href="#3-创建POST请求测试" class="headerlink" title="3. 创建POST请求测试"></a><a href="#3-创建POST请求测试" title="3. 创建POST请求测试"></a>3. 创建POST请求测试</h3><pre class="line-numbers language-java"><code class="language-java">      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String httpsUrl <span class="token operator">=</span> <span class="token string">"https://ip:post/restName"</span><span class="token punctuation">;</span>            String postJson <span class="token operator">=</span> <span class="token string">"{\"test\":\"hello\"}"</span><span class="token punctuation">;</span>            HttpClientUtil<span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>httpsUrl<span class="token punctuation">,</span> postJson<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二种：加载本地证书和key的方式"><a href="#第二种：加载本地证书和key的方式" class="headerlink" title="第二种：加载本地证书和key的方式"></a><a href="#第二种：加载本地证书和key的方式" title="第二种：加载本地证书和key的方式"></a>第二种：加载本地证书和key的方式</h2><h3 id="1-创建httpsClient"><a href="#1-创建httpsClient" class="headerlink" title="1.创建httpsClient"></a><a href="#1-创建httpsClient" title="1.创建httpsClient"></a>1.创建httpsClient</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**    * @Description:        * @author: zhouqiang    * @version: 1.0, Jan 25, 2019    */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpsClient</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> String CONTENT_LENGTH <span class="token operator">=</span> <span class="token string">"Content-Length"</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> CloseableHttpClient closeableHttpClient<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 初始化证书         */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initSSLConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//加载证书</span>                InputStream selfInputStream <span class="token operator">=</span> HttpsClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>GatewayNbConstants<span class="token punctuation">.</span>PKCS12_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//PKCS12文件地址</span>                InputStream caInputStream <span class="token operator">=</span> HttpsClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>GatewayNbConstants<span class="token punctuation">.</span>JKS_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JKS证书文件地址</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>selfInputStream <span class="token operator">==</span> null <span class="token operator">||</span> caInputStream <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                KeyStore pksKeyStore <span class="token operator">=</span> KeyStore<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"pkcs12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pksKeyStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>selfInputStream<span class="token punctuation">,</span> GatewayNbConstants<span class="token punctuation">.</span>PKCS12_PASSWORD<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                selfInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                KeyManagerFactory keyManagerFactory <span class="token operator">=</span> KeyManagerFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"sunx509"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                keyManagerFactory<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>pksKeyStore<span class="token punctuation">,</span> GatewayNbConstants<span class="token punctuation">.</span>PKCS12_PASSWORD<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//PKCS12的密码</span>                KeyStore jksKeyStore <span class="token operator">=</span> KeyStore<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"jks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                jksKeyStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>caInputStream<span class="token punctuation">,</span> GatewayNbConstants<span class="token punctuation">.</span>JKS_PASSWORD<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JKS的密码</span>                caInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                TrustManagerFactory trustManagerFactory <span class="token operator">=</span> TrustManagerFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"sunx509"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                trustManagerFactory<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>jksKeyStore<span class="token punctuation">)</span><span class="token punctuation">;</span>                SSLContext sslContext <span class="token operator">=</span> SSLContext<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"TLS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sslContext<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>keyManagerFactory<span class="token punctuation">.</span><span class="token function">getKeyManagers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> trustManagerFactory<span class="token punctuation">.</span><span class="token function">getTrustManagers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                SSLConnectionSocketFactory ssf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SSLConnectionSocketFactory</span><span class="token punctuation">(</span>sslContext<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HostnameVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">verify</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> SSLSession sslSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                closeableHttpClient <span class="token operator">=</span> HttpClients<span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSSLSocketFactory</span><span class="token punctuation">(</span>ssf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> en<span class="token punctuation">)</span><span class="token punctuation">{</span>                en<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * @Description: post请求         * @param url https路径         * @param headerMap  请求头信息         * @param params 请求参数         * @param contentType 请求类型         * @return CloseableHttpResponse         */</span>        <span class="token keyword">public</span> CloseableHttpResponse <span class="token function">post</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headerMap<span class="token punctuation">,</span> String params<span class="token punctuation">,</span> ContentType contentType<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>            HttpPost request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">addRequestHeader</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> headerMap<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEntity</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> closeableHttpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * @Description: post请求         * @param url https路径         * @param params 请求参数         * @return CloseableHttpResponse         */</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> CloseableHttpResponse <span class="token function">post</span><span class="token punctuation">(</span>String url<span class="token punctuation">,</span>  List params<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>            HttpPost request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UrlEncodedFormEntity</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> closeableHttpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**         * 添加请求头参数        * @Description:        * @param request        * @param headerMap         */</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addRequestHeader</span><span class="token punctuation">(</span>HttpUriRequest request<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headerMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>headerMap <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String headerName <span class="token operator">:</span> headerMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>CONTENT_LENGTH<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>headerName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                request<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span>headerName<span class="token punctuation">,</span> headerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>headerName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-加载p12文件"><a href="#2-加载p12文件" class="headerlink" title="2.加载p12文件"></a><a href="#2-加载p12文件" title="2.加载p12文件"></a>2.加载p12文件</h3><blockquote><p>如果使用的是springboot，则需要在application.properties文件中添加如下配置，这是为了让springboot启动时自动加载这些参数和文件到springboot context中去.具体配置可参照springboot官网对HTTPS SSL的支持.</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    server<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>key<span class="token operator">-</span>store<span class="token operator">-</span>type<span class="token operator">=</span>PKCS12    server<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>key<span class="token operator">-</span>store<span class="token operator">=</span>classpath<span class="token operator">:</span>server<span class="token punctuation">.</span>p12 #server<span class="token punctuation">.</span>p12文件最好放在更目录中以保证springboot加载正确<span class="token punctuation">.</span>    server<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>key<span class="token operator">-</span>store<span class="token operator">-</span>password<span class="token operator">=</span>yourpassword<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-编写TestService发送post请求"><a href="#3-编写TestService发送post请求" class="headerlink" title="3.编写TestService发送post请求"></a><a href="#3-编写TestService发送post请求" title="3.编写TestService发送post请求"></a>3.编写TestService发送post请求</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpEntity<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>NameValuePair<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>client<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>CloseableHttpResponse<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>ContentType<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>message<span class="token punctuation">.</span>BasicNameValuePair<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpStatus<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Async<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>node<span class="token punctuation">.</span>ObjectNode<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>sefon<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>NbHuaweiHttpsModule<span class="token punctuation">.</span>common<span class="token punctuation">.</span>HttpsClient<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>sefon<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>NbHuaweiHttpsModule<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>StreamUtil<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * @Description:        * @author: jackromer    * @version: 1.0, Jan 25, 2019    */</span>    <span class="token annotation punctuation">@Component</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>TestService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> HttpsClient httpsClient<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">TestService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>httpsClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpsClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>httpsClient<span class="token punctuation">.</span><span class="token function">initSSLConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 用list参数请求        * @Description:         */</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                String postUrl <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//your post url</span>                List<span class="token operator">&lt;</span>NameValuePair<span class="token operator">></span> postParas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                postParas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicNameValuePair</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                postParas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicNameValuePair</span><span class="token punctuation">(</span><span class="token string">"name2"</span><span class="token punctuation">,</span><span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                CloseableHttpResponse response <span class="token operator">=</span> httpsClient<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>postUrl<span class="token punctuation">,</span> postParas<span class="token punctuation">)</span><span class="token punctuation">;</span>                String responseBody <span class="token operator">=</span> <span class="token function">getResponseContent</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"post result"</span><span class="token punctuation">,</span> responseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> en<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"post error"</span><span class="token punctuation">,</span> en<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 用json或其他类型请求        * @Description:        * @param postJson         */</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@Async</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postJsonStr</span><span class="token punctuation">(</span>ObjectNode postJson<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//封装应用命令下发的头信息</span>                String postUrl <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//your post url</span>                Map headers <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//your header</span>                      CloseableHttpResponse httpResponse <span class="token operator">=</span> httpsClient<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>postUrl<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> postJson<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ContentType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> statusCode <span class="token operator">=</span> httpResponse<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> HttpStatus<span class="token punctuation">.</span>CREATED<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"post success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> en<span class="token punctuation">)</span><span class="token punctuation">{</span>                en<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 获取返回数据        * @Description:        * @param closeableHttpResponse        * @return        * @throws IOException         */</span>        <span class="token keyword">private</span> String <span class="token function">getResponseContent</span><span class="token punctuation">(</span>CloseableHttpResponse closeableHttpResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>            String content <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>closeableHttpResponse <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    HttpEntity httpEntity <span class="token operator">=</span> closeableHttpResponse<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>httpEntity <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> httpEntity<span class="token punctuation">.</span><span class="token function">isStreaming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        String encoding <span class="token operator">=</span> httpEntity<span class="token punctuation">.</span><span class="token function">getContentEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span> httpEntity<span class="token punctuation">.</span><span class="token function">getContentEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>                        content <span class="token operator">=</span> StreamUtil<span class="token punctuation">.</span><span class="token function">inputStream2String</span><span class="token punctuation">(</span>httpEntity<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    closeableHttpResponse<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> content<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-测试TestService发送请求"><a href="#4-测试TestService发送请求" class="headerlink" title="4. 测试TestService发送请求"></a><a href="#4-测试TestService发送请求" title="4. 测试TestService发送请求"></a>4. 测试TestService发送请求</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>sefon<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>NbHuaweiHttpsModule<span class="token punctuation">.</span>service<span class="token punctuation">.</span>TestService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * @Description:        * @author: jackromer    * @version: 1.0, Jan 25, 2019    */</span>    <span class="token annotation punctuation">@Component</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPost</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span>  TestService testService<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 通过TestService 调用https接口        * @Description:         */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//testService.postList();</span>                testService<span class="token punctuation">.</span><span class="token function">postJsonStr</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//your json Str</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h1><blockquote><p>以上就是JAVA调用https的两种方式，第一种不需要验证本地证书，第二种则为混合加密方式，需要验证本地证书和key是否正确。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> https </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux自动打包脚本</title>
      <link href="/2019/08/27/Linux%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC/"/>
      <url>/2019/08/27/Linux%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍如何使用一些linux脚本</p></blockquote><h2 id="linux启动项目脚本"><a href="#linux启动项目脚本" class="headerlink" title="linux启动项目脚本"></a><a href="#linux启动项目脚本" title="linux启动项目脚本"></a>linux启动项目脚本</h2><blockquote><p>启动脚本名startup.bash</p><pre class="line-numbers language-s"><code class="language-s"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><pre><code>#!/bin/bashstart_monitor() {    nohup java -cp KafkaOffsetMonitor-assembly-0.4.1-SNAPSHOT.jar com.quantifind.kafka.offsetapp.OffsetGetterWeb \    --offsetStorage kafka \    --kafkaBrokers 131.10.10.50:9092,131.10.10.51:9092,131.10.10.52:9092 \    --zk 131.10.10.50:2181,131.10.10.51:2181,131.10.10.52:2181 \    --port 8090 \    --refresh 30.seconds \    --retain 7.days &gt;monitor.out 2&gt;&amp;1 &lt; /dev/null &amp;}start_zk() {    cd /opt/cluster/zookeeper  # 调用另一个启动命令启动ZK    bin/zkServer.sh start     sleep 5    cd -&gt;/dev/null}start_kafka() {    cd /opt/cluster/kafka  # 调用另一个启动命令启动KAFKA    bin/kafka-server-start.sh -daemon config/server.properties    sleep 10    cd -&gt;/dev/null}start_connect() {    cd /opt/cluster/kafka  # 调用另一个启动命令启动CONNECT    bin/connect-distributed.sh -daemon config/connect-distributed.properties    sleep 10    cd -&gt;/dev/null}# nohup命令主要用于重定向输出日志文件，且使程序在后台运行，默认输出文件为nohup.outstart_storm() {    cd /opt/cluster/storm    if read -n 1 -p '是否为 nimbus 主机？[Y/N]:' op; then        if [[ $op == [Yy] ]]; then #判断输入是否为y            echo -e "\n\e[0;31;1m nimbus is starting...\e[0m"            nohup bin/storm nimbus &gt;nimbus.out 2&gt;&amp;1 &lt; /dev/null &amp;            sleep 5            echo -e "\n\e[0;31;1m ui is starting...\e[0m"            nohup bin/storm ui &gt;ui.out 2&gt;&amp;1 &lt; /dev/null &amp;            sleep 5        elif [[ $op == [Nn] ]]; then            echo -e "\n\e[0;31;1m supervisor is starting...\e[0m"            nohup bin/storm supervisor &gt;supervisor.out 2&gt;&amp;1 &lt; /dev/null &amp;            sleep 5        else            echo -e "\n\e[0;33;1m input error,exit...\e[0m"            return        fi    fi    result=$(ps -ef|grep java|grep logviewer)    if [ "x$result" == "x" ]; then                echo -e "\n\e[0;31;1m logviewer is starting...\e[0m"        nohup bin/storm logviewer &gt;logviewer.out 2&gt;&amp;1 &lt; /dev/null &amp;        sleep 5    fi    cd -&gt;/dev/null}start_top() {    if read -n 1 -p 'Topology是否初次提交到Storm？[Y/N]:' op; then        if [[ $op == [Nn] ]]; then            echo -e "\n\e[0;31;1mExit\e[0m"            return        elif [[ $op == [Yy] ]]; then            echo -e "\n\e[0;32;1mSubmitting\e[0m"        else            echo -e "\n\e[0;33;1mError\e[0m"            return        fi    fi    cd /opt/cluster/storm    bin/storm kill ThingsShadowTopologyDistributed #调用storm kill命令结束ThingsShadowTopologyDistributed进程    sleep 5    bin/storm jar topology/iot-data-storm-controller-1.0.0.jar  com.company.ApplicationLoader --bootstrap-servers=131.10.10.202:9092,131.10.10.203:9092,131.10.10.204:9092    cd -&gt;/dev/null}start_mqtt() {    cd apache-activemq-5.14.5    bin/activemq start    sleep 2    cd -&gt;/dev/null}start_mqtt_mosqtuitto() {    cd ../mosquitto-1.4.11/sbin    ./mosquitto -c mosquitto.conf -d    sleep 2    cd -&gt;/dev/null}start_mongodb() {    systemctl start mongod    sleep 2    systemctl status mongod}modify_hosts() {    echo -e "127.0.0.1\tlocalhost\n131.10.10.aa\tserver.cluster\n131.10.10.bb\tclusterbb\n131.10.10.cc\tclustercc\n131.10.10.dd\tclusterdd\n131.10.10.ee\tclusteree\n131.10.10.ff\tclusterff"&gt;/etc/hosts}case $1 inmonitor)    start_monitor;;zk)    start_zk;;kafka)    start_kafka;;connect)    start_connect;;storm)    start_storm;;top)    start_top;;mqtt)    start_mqtt;;mongodb)    start_mongodb;;hosts)    modify_hosts;;*)    echo "usage: mqtt, mongodb, zk, kafka, monitor, connect, storm, top, hosts";;esac</code></pre><pre><code>[](#linux自动打包脚本 "linux自动打包脚本")linux自动打包脚本-----------------------------------------&gt; 这是package项目并提取需要JAR到指定目录的自动化打包脚本### [](#注意事项 "注意事项")注意事项### [](#shopt-s-extgolb-开启后的效果 "shopt -s extgolb 开启后的效果")shopt -s extgolb 开启后的效果    开启之后，以下5个模式匹配操作符将被识别：    ?(pattern-list) - 所给模式匹配0次或1次；    *(pattern-list) - 所给模式匹配0次以上包括0次；    +(pattern-list) - 所给模式匹配1次以上包括1次；    @(pattern-list) - 所给模式仅仅匹配1次；    !(pattern-list) - 不匹配括号内的所给模式。### [](#自动打包打包脚本 "自动打包打包脚本")自动打包打包脚本```s    #!/bin/bash    cd /opt/cluster/iotTag/    echo 解压tag缩包...    tar -zxvf iot.tar.gz    echo 更名为iot...    mv iot.git iot    echo 打包项目...    cd opt/cluster/iotTag/iot/    mvn clean package -Dmaven.test.skip=true    echo 复制jar到指定目录    rm -rf jars    mkdir  jars    echo 找到并复制jar到指定目录    find iot -name "iot-*.jar" -exec cp '{}' /opt/cluster/iotTag/jars/ \;    echo 删除不需要的jar    cd /opt/cluster/iotTag/jars    #shopt命令用于显示和设置shell中的行为选项，通过这些选项以增强shell易用性。    shopt -s extgolb    shopt -s extglob    #只保留需要的jar，其他jar删除    rm -rf !(iot-base-management-rpc-read-1.0.0.jar|iot-base-management-rpc-cud-1.0.0.jar|iot-base-management-rest-api-1.0.0.jar    |iot-shadow-rest-api-1.0.0.jar|iot-shadow-rpc-cud-1.0.0.jar|iot-shadow-rpc-read-1.0.0.jar    |iot-app-management-rest-api-1.0.0.jar|iot-app-management-rpc-cud-1.0.0.jar|iot-app-management-rpc-read-1.0.0.jar|iot-app-provider-rest-api-1.0.0.jar    |iot-status-management-rest-api-1.0.0.jar|iot-status-management-rpc-cud-1.0.0.jar|iot-status-management-rpc-read-1.0.0.jar    |iot-log-management-rpc-cud-1.0.0.jar|iot-log-management-rpc-read-1.0.0.jar    |iot-data-statistic-rest-api-1.0.0.jar|iot-data-storm-controller-1.0.0.jar|iot-data-storm-pusher-1.0.0.jar)</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>linux 自动化脚本可以帮助我们大大减轻部署发布的时间，虽然前期的编写过程比较麻烦，但是用起来却非常方便，试想有很多歌项目环境，如果全部挨个部署岂不是费心又费力呢，所以加入linux脚本阵容是时不我待的.</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> auto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA-FILTER使用</title>
      <link href="/2019/08/27/JAVA-FILTER%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/27/JAVA-FILTER%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>java过滤器是Servlet技术中最实用的技术，Web开发人员通过Filter技术，对web服务器管理的所有web资源：例如Jsp, Servlet, 静态图片文件或静态 html 文件等进行拦截，从而实现一些特殊的功能。</p></blockquote><blockquote><p>可以实现URL级别的权限访问控制、过滤敏感词汇、压缩响应信息等高级功能。</p></blockquote><blockquote><p>主要用于对用户请求进行预处理，也可以对HttpServletResponse进行后处理。使用Filter的完整流程：Filter对用户请求进行预处理，接着将请求交给Servlet进行处理并生成响应，最后Filter再对服务器响应进行后处理。</p></blockquote><h2 id="JAVA-如何使用filter"><a href="#JAVA-如何使用filter" class="headerlink" title="JAVA 如何使用filter"></a><a href="#JAVA-如何使用filter" title="JAVA 如何使用filter"></a>JAVA 如何使用filter</h2><h3 id="1-实现filter接口-重写dofilter（）方法"><a href="#1-实现filter接口-重写dofilter（）方法" class="headerlink" title="1.实现filter接口,重写dofilter（）方法."></a><a href="#1-实现filter接口-重写dofilter（）方法" title="1.实现filter接口,重写dofilter（）方法."></a>1.实现filter接口,重写dofilter（）方法.</h3><blockquote><p>注意事项：在JAVA的servlet不允许直接对request中的parameter直接进行修改，需要使用AMHttpServletRequestWrapper来实现对request中的parameter的修改.</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>Filter<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterChain<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterConfig<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRequest<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletResponse<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * @Description:        * @author: jackromer    * @version: 1.0, Dec 14, 2018    */</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpecialCharactersFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//使用filterConfig初始化filter</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>            HttpServletRequest http_req <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span>request<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//在JAVA的servlet不允许直接对request中的parameter直接进行修改，需要使用AMHttpServletRequestWrapper来实现对request中的parameter的修改.</span>          AMHttpServletRequestWrapper amHttpServletRequestWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMHttpServletRequestWrapper</span><span class="token punctuation">(</span>http_req<span class="token punctuation">,</span> http_req<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> map <span class="token operator">=</span> amHttpServletRequestWrapper<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"XXX"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String searchKey <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"XXX"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>searchKey<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String newSearchKey <span class="token operator">=</span> searchKey<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"\\\\%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//处理%特殊字符,对其转义用于查询数据</span>                String newArr <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token operator">=</span>  <span class="token punctuation">{</span>newSearchKey<span class="token punctuation">}</span><span class="token punctuation">;</span>                amHttpServletRequestWrapper<span class="token punctuation">.</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string">"XXX"</span><span class="token punctuation">,</span> newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重设参数值</span>                  <span class="token punctuation">}</span>             <span class="token punctuation">}</span>          chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>amHttpServletRequestWrapper<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * @see javax.servlet.Filter#destroy()         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-AMHttpServletRequestWrapper的实现"><a href="#2-AMHttpServletRequestWrapper的实现" class="headerlink" title="2. AMHttpServletRequestWrapper的实现"></a><a href="#2-AMHttpServletRequestWrapper的实现" title="2. AMHttpServletRequestWrapper的实现"></a>2. AMHttpServletRequestWrapper的实现</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Enumeration<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequestWrapper<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @Description:     * @author: zhouqiang     * @version: 1.0, Dec 14, 2018     */</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AMHttpServletRequestWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServletRequestWrapper</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> params <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"unchecked"</span><span class="token punctuation">,</span> <span class="token string">"rawtypes"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token function">AMHttpServletRequestWrapper</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> Map inParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span>inParam<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setParameter</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setParameter</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>            params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getParameter</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object v <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> strArr <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> v<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>strArr<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> strArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> params<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"unchecked"</span><span class="token punctuation">,</span> <span class="token string">"rawtypes"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Enumeration<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Vector l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getParameterValues</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-初始化filterConfig"><a href="#3-初始化filterConfig" class="headerlink" title="3.初始化filterConfig"></a><a href="#3-初始化filterConfig" title="3.初始化filterConfig"></a>3.初始化filterConfig</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterRegistrationBean<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurerAdapter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * @Description:        * @author: zhouqiang    * @version: 1.0, Dec 14, 2018    */</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 初始化过滤器         *         * @return         * @Bean 注解必加，否则过滤器失效         */</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">indexFilterRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            FilterRegistrationBean registration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpecialCharactersFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            registration<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>             <span class="token operator">*</span> 再有一个过滤器的话，可以设置成 registration<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>             <span class="token operator">*</span> spring boot 会按照order值的大小，从小到大的顺序来依次过滤             <span class="token operator">*</span><span class="token operator">/</span>            registration<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> registration<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用web-xml-配置过滤器"><a href="#4-使用web-xml-配置过滤器" class="headerlink" title="4. 使用web.xml 配置过滤器"></a><a href="#4-使用web-xml-配置过滤器" title="4. 使用web.xml 配置过滤器"></a>4. 使用web.xml 配置过滤器</h3><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.0<span class="token punctuation">"</span></span>         <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee         http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--配置过滤器--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>SpecialCharactersFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.xxx.xxx.SpecialCharactersFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--映射过滤器--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>SpecialCharactersFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--“/*”表示拦截所有的请求 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Filter链"><a href="#Filter链" class="headerlink" title="Filter链"></a><a href="#Filter链" title="Filter链"></a>Filter链</h2><blockquote><p>在一个web应用中，可以开发编写多个Filter，这些Filter组合起来称之为一个Filter链。</p></blockquote><blockquote><p>web服务器根据Filter在web.xml文件中的注册顺序，决定先调用哪个Filter，当第一个Filter的doFilter方法被调用时，web服务器会创建一个代表Filter链的FilterChain对象传递给该方法。</p></blockquote><blockquote><p>在doFilter方法中，开发人员如果调用了FilterChain对象的doFilter方法，则web服务器会检查FilterChain对象中是否还有filter，如果有，则调用第2个filter，如果没有，则调用目标资源。</p></blockquote><h2 id="Filter-链的使用"><a href="#Filter-链的使用" class="headerlink" title="Filter 链的使用"></a><a href="#Filter-链的使用" title="Filter 链的使用"></a>Filter 链的使用</h2><h3 id="1-再定义一个filter"><a href="#1-再定义一个filter" class="headerlink" title="1.再定义一个filter"></a><a href="#1-再定义一个filter" title="1.再定义一个filter"></a>1.再定义一个filter</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>Filter<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterChain<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>FilterConfig<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRequest<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletResponse<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * @Description:        * @author: jackromer    * @version: 1.0, Dec 14, 2018    */</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpecialCharactersFilter2</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//使用filterConfig初始化filter</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>            HttpServletRequest http_req <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span>request<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//do something...</span>          chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>amHttpServletRequestWrapper<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * @see javax.servlet.Filter#destroy()         */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置web-xml"><a href="#2-配置web-xml" class="headerlink" title="2.配置web.xml"></a><a href="#2-配置web-xml" title="2.配置web.xml"></a>2.配置web.xml</h3><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WebApp_ID<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>FilterTest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>SpecialCharactersFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.xxx.xxx.SpecialCharactersFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>xxx-value<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>SpecialCharactersFilter2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.xxx.xxx.SpecialCharactersFilter2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>yyy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>yyy-value<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 故意将filter-mapping倒过来写,观察顺序是和哪个标签一致 --></span>    <span class="token comment" spellcheck="true">&lt;!-- filter在filter chain中的执行顺序是按照 filter-mapping中的配置顺序来执行的 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>com.xxx.xxx.SpecialCharactersFilter2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 只过滤根目录下go.html --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/go.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>com.xxx.xxx.SpecialCharactersFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 过滤根目录下所有资源(实验中只放了go.html) --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>go.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><p>JAVA 的filter可以非常简单的实现web服务器的过滤功能, 包括页面，参数，请求路径等等.</p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> filter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA-LISTENER使用</title>
      <link href="/2019/08/27/JAVA-LISTENER%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/27/JAVA-LISTENER%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>敬请期待…</p></blockquote><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a><a href="#有序列表" title="有序列表"></a>有序列表</h2><ol><li><p>文本1</p></li><li><p>文本2</p></li><li><p>文本3</p><h2 id="引用图片"><a href="#引用图片" class="headerlink" title="引用图片"></a><a href="#引用图片" title="引用图片"></a>引用图片</h2></li></ol><h2 id="引用链接"><a href="#引用链接" class="headerlink" title="引用链接"></a><a href="#引用链接" title="引用链接"></a>引用链接</h2><h2 id="引用图片-1"><a href="#引用图片-1" class="headerlink" title="引用图片"></a><a href="#引用图片-1" title="引用图片"></a>引用图片</h2><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> listener </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> listener </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-观察者模式</title>
      <link href="/2019/08/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/08/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍观察者模式，通过栗子和代码简明的说明其原理.</p></blockquote><h2 id="引文"><a href="#引文" class="headerlink" title="引文"></a><a href="#引文" title="引文"></a>引文</h2><blockquote><p>java 有很多种设计模式，主要的有GOF的23种，关于设计模式其实我们不必感到彷徨，觉得不懂、高端，其实这些规律都来源于我们的生活.<br>设计模式其实是very的easy的，今天要讲的是观察者模式，如果你是一个developer，但是不太明白什么是观察者模式,听完这个故事你就明白了.</p></blockquote><h2 id="故事之观察者模式-相对论"><a href="#故事之观察者模式-相对论" class="headerlink" title="故事之观察者模式-相对论"></a><a href="#故事之观察者模式-相对论" title="故事之观察者模式-相对论"></a>故事之观察者模式-相对论</h2><blockquote><p>我想想举个什么栗子合适呢….waiting…，ok ，比如中国的皇帝总是让子民提供好东西，皇帝需要18岁的妹纸当后宫储备，或者18岁的男性当侍卫储备…或者山珍海味，但是下层的人民只有知道皇帝需要什么才会去准备，没有的自然就提供不了；这时候皇帝会发诏书给下层官员，下层官员又下发命令给人民。这里有两个过程皇帝下令给官员，官员下发命令给人民，这样就有了观察者模式。</p></blockquote><blockquote><p>观察者和被观察者，观察者就是一直等着被观察者发布命令，比如官员相对皇帝，官员是观察者，皇帝是被观察者，官员等着皇帝的命令；人民相对官员，人民是观察者，官员是被观察者，人民等着官员发布命令，这样一个故事中就包含了两个观察者模式，观察者和被观察者是相对的。</p></blockquote><blockquote><p>观察者始终等待着被观察者发布命令，此时被观察者的下属都会受到这个消息，至于执不执行这个消息，由观察者自己定.如果你是开发人员，请再看一个实际栗子。</p></blockquote><blockquote><p>假设CLASS A 是接收数据的（数据类型有B C D两种），CLASS B C是处理数据，但是B C 不一样,B只处理B类型数据，C只处理C类型数据，此时用观察者模式来实现就是CLASS A 作为被观察者，CLASS B C 作为观察者，当A中MESSAGE消息到达时， B C 都会受到消息MESSAGE,但具体是忽略这个消息还是处理这个消息都是由B C 自己决定.这就是一个观察者模式的简单实现.</p></blockquote><h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a><a href="#代码实例" title="代码实例"></a>代码实例</h2><h3 id="1-定义主题接口-皇帝"><a href="#1-定义主题接口-皇帝" class="headerlink" title="1. 定义主题接口-皇帝"></a><a href="#1-定义主题接口-皇帝" title="1. 定义主题接口-皇帝"></a>1. 定义主题接口-皇帝</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">package</span> observer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//添加观察者</span>        <span class="token keyword">void</span> <span class="token function">addObserver</span><span class="token punctuation">(</span>Observer obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//移除观察者</span>        <span class="token keyword">void</span> <span class="token function">deleteObserver</span><span class="token punctuation">(</span>Observer obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当主题方法改变时,这个方法被调用,通知所有的观察者</span>        <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-定义观察者接口-皇帝下属的官员"><a href="#2-定义观察者接口-皇帝下属的官员" class="headerlink" title="2. 定义观察者接口-皇帝下属的官员"></a><a href="#2-定义观察者接口-皇帝下属的官员" title="2. 定义观察者接口-皇帝下属的官员"></a>2. 定义观察者接口-皇帝下属的官员</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">package</span> observer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当主题状态改变时,更新通知</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String kingName<span class="token punctuation">,</span> String kingDemand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-主题的实现类-中国的皇帝"><a href="#3-主题的实现类-中国的皇帝" class="headerlink" title="3. 主题的实现类-中国的皇帝"></a><a href="#3-主题的实现类-中国的皇帝" title="3. 主题的实现类-中国的皇帝"></a>3. 主题的实现类-中国的皇帝</h3><blockquote><p>官员由皇帝管理.</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">package</span> observer<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChinaKingDemandSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//存放订阅者</span>        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Observer<span class="token operator">></span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Observer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//皇帝的需求</span>        <span class="token keyword">private</span> String kingDemand<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//皇帝的名字</span>        <span class="token keyword">private</span> String kingName<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ChinaKingDemandSubject</span><span class="token punctuation">(</span>String kingName<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>kingName <span class="token operator">=</span> kingName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getKingName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>kingName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addObserver</span><span class="token punctuation">(</span>Observer obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//将观察者和被观察者绑定,也可以理解为订阅</span>            observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteObserver</span><span class="token punctuation">(</span>Observer obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> observers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span>String kingName<span class="token punctuation">,</span> String kingDemand<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//**注意** 此方法会循环调用ArrayList，通知所有的观察者，有消息来了.</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>observers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Observer o <span class="token operator">=</span> <span class="token punctuation">(</span>Observer<span class="token punctuation">)</span>observers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                o<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>kingName<span class="token punctuation">,</span> kingDemand<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//皇帝发布新命令，征集美女或者壮士</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span>String kingName<span class="token punctuation">,</span> String kingDemand<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//新版本</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>kingDemand <span class="token operator">=</span> kingDemand<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//**注意** 信息更新完毕，通知所有观察者，比如官员去执行命令找到合适的人并送进宫中</span>            <span class="token function">notifyObserver</span><span class="token punctuation">(</span>kingName<span class="token punctuation">,</span> kingDemand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-观察者实现类-中国皇帝的下属官员"><a href="#4-观察者实现类-中国皇帝的下属官员" class="headerlink" title="4. 观察者实现类-中国皇帝的下属官员"></a><a href="#4-观察者实现类-中国皇帝的下属官员" title="4. 观察者实现类-中国皇帝的下属官员"></a>4. 观察者实现类-中国皇帝的下属官员</h3><blockquote><p>官员给皇帝找需要的东西.</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">package</span> observer<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 此时的观察者就是官员，官员有很多，各地的地方官都有</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChinaOfficialObserver</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//订阅者名字</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> String kingDemand<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ChinaOfficialObserver</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String kingName<span class="token punctuation">,</span> String kingDemand<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>kingDemand <span class="token operator">=</span> kingDemand<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>kingName <span class="token operator">+</span> <span class="token string">"来了命令，找"</span> <span class="token operator">+</span> kingDemand<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">found</span><span class="token punctuation">(</span>kingDemand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">found</span><span class="token punctuation">(</span>String kingName<span class="token punctuation">,</span> String kingDemand<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"官员"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"找到了"</span> <span class="token operator">+</span> kingName <span class="token operator">+</span> <span class="token string">"需要的"</span> <span class="token operator">+</span> kingDemand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-中国皇帝的需求"><a href="#5-中国皇帝的需求" class="headerlink" title="5. 中国皇帝的需求"></a><a href="#5-中国皇帝的需求" title="5. 中国皇帝的需求"></a>5. 中国皇帝的需求</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">package</span> observer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建主题(被观察者)</span>            ChinaKingDemandSubject chinaKingDemand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinaKingDemandSubject</span><span class="token punctuation">(</span><span class="token string">"中国皇帝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建三个不同的观察者</span>            ChinaOfficialObserver a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinaOfficialObserver</span><span class="token punctuation">(</span><span class="token string">"长安地方官"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ChinaOfficialObserver b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinaOfficialObserver</span><span class="token punctuation">(</span><span class="token string">"台湾地方官"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ChinaOfficialObserver c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinaOfficialObserver</span><span class="token punctuation">(</span><span class="token string">"广州地方官"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将观察者注册到主题中</span>            chinaKingDemand<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            chinaKingDemand<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            chinaKingDemand<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//更新主题的数据，当数据更新后，会自动通知所有已注册的观察者</span>            chinaKingDemand<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>chinaKingDemand<span class="token punctuation">.</span><span class="token function">getKingName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"大于18岁单身的绝世美女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------hold on ... king need -----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            chinaKingDemand<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>chinaKingDemand<span class="token punctuation">.</span><span class="token function">getKingName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"大于18岁力能扛鼎的壮汉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-运行结果"><a href="#6-运行结果" class="headerlink" title="6. 运行结果"></a><a href="#6-运行结果" title="6. 运行结果"></a>6. 运行结果</h3><blockquote><p>中国皇帝来了命令，找大于18岁单身的绝世美女.<br>官员长安地方官找到了中国皇帝需要的大于18岁单身的绝世美女.<br>中国皇帝来了命令，找大于18岁单身的绝世美女.<br>官员台湾地方官找到了中国皇帝皇帝需要的大于18岁单身的绝世美女.<br>中国皇帝来了命令，找大于18岁单身的绝世美女.<br>官员广州地方官找到了中国皇帝皇帝需要的大于18岁单身的绝世美女.<br>———-hold on … king need ———–<br>中国皇帝来了命令，找大于18岁力能扛鼎的壮汉.<br>官员长安地方官找到了中国皇帝皇帝需要的大于18岁力能扛鼎的壮汉.<br>中国皇帝来了命令，找大于18岁力能扛鼎的壮汉.<br>官员台湾地方官找到了中国皇帝皇帝需要的大于18岁力能扛鼎的壮汉.<br>中国皇帝来了命令，找大于18岁力能扛鼎的壮汉.<br>官员广州地方官找到了中国皇帝皇帝需要的大于18岁力能扛鼎的壮汉.</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><p>无论是观察者模式还是其他设计模式都是人们对真实生活应用场景的总结，细细品味，便会发现其中的精髓.</p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DROOLS规则引擎</title>
      <link href="/2019/08/27/DROOLS%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E/"/>
      <url>/2019/08/27/DROOLS%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍一些常见的规则引擎和以及一些规则引擎的简单使用；<br>以及rete算法的一些见解。</p></blockquote><h2 id="规则引擎简介"><a href="#规则引擎简介" class="headerlink" title="规则引擎简介"></a><a href="#规则引擎简介" title="规则引擎简介"></a>规则引擎简介</h2><blockquote><p>•规则引擎是一种嵌入在应用程序中的组件，实现了将业务决策从应用程序代码中分离出来。<br>• 规则引擎的核心就是获取knowledge（知识）。<br>• 应用knowledge到特定的数据上（fact）。<br>• 使用 “production rules（产生式规则）” IF THEN Rule表达逻辑（任何逻辑都可以用这种方式表达）。</p></blockquote><h2 id="什么是规则"><a href="#什么是规则" class="headerlink" title="什么是规则"></a><a href="#什么是规则" title="什么是规则"></a>什么是规则</h2><blockquote><p>• 一个rule由conditions，和actions组成。<br>• 当所有的conditions匹配，rule可能“fire” Conditions即LHS（left hand side）Actions即RHS（right hand side或者consequence）<br>• Rule操纵应用程序中的数据（ fact ）<br>• Rule engines（比如Drools）使用正向或者反向链（或者混合使用）<br>• 正向链从事实到结论的推理。rule在LHS conditions匹配的时候执行。Actions可以改变facts，并可能导致新rule被fire。<br>• 反向链指则是从假设,即要证明的结论,到事实的推理。</p></blockquote><h2 id="有哪些开源的JAVA规则引擎"><a href="#有哪些开源的JAVA规则引擎" class="headerlink" title="有哪些开源的JAVA规则引擎"></a><a href="#有哪些开源的JAVA规则引擎" title="有哪些开源的JAVA规则引擎"></a>有哪些开源的JAVA规则引擎</h2><blockquote><p>Drools、Easy Rules、Mandarax、IBM ILOG, 使用最为广泛并且开源的是Drools。</p></blockquote><h2 id="IBM-ILOG"><a href="#IBM-ILOG" class="headerlink" title="IBM ILOG"></a><a href="#IBM-ILOG" title="IBM ILOG"></a>IBM ILOG</h2><blockquote><p>IBM旗下的规则引擎，是要收费的可获取免费版本，可结合eclipse等开发工具在可视化界面操作和配置规则等，但流程比较复杂。</p></blockquote><p><img src="/images/rule-engine/ibm-ilog.png" alt=""></p><blockquote><p>使用ILOG 业务规则管理系统可让应用程序更具灵活性。ILOG 业务规则引擎可在整个企业内部署和应用策略变化。您可根据客户需求、规章变化和竞争情况迅速做出反应。 优化研发最好的规划和计划，以使服务、收入和利润最大化。ILOG 优化技术可处理任意数目的运营约束。帮您赢得自信，运筹帷幄，在正确的时间做出正确的决定，从而降低风险。 可视化使用 ILOG 可视化技术生动地显示复杂的数据。ILOG 可视化勾画出总体形势，把原始数据转换成有用的信息。可以通过行动信息的实时图像迅速获得数据。</p></blockquote><h2 id="Easy-rules-介绍"><a href="#Easy-rules-介绍" class="headerlink" title="Easy rules 介绍"></a><a href="#Easy-rules-介绍" title="Easy rules 介绍"></a>Easy rules 介绍</h2><p><a href="https://github.com/j-easy/easy-rules/wiki" target="_blank" rel="noopener">Easy-rule</a></p><blockquote><p>Easy rules是一款轻量级的规则引擎，在github上已经开源, 社区活跃度比较高。<br>• 轻量级框架和易于学习的API<br>• 基于POJO的开发<br>• 有用的抽象来定义业务规则并轻松应用它们<br>• 能够从原始规则创建复合规则<br>• 能够在表达式语言中定义规则<br>• 在3.0版本后已经是线程安全</p></blockquote><h2 id="Easy-rules-使用"><a href="#Easy-rules-使用" class="headerlink" title="Easy rules 使用"></a><a href="#Easy-rules-使用" title="Easy rules 使用"></a>Easy rules 使用</h2><blockquote><p>定义规则</p></blockquote><p><img src="/images/rule-engine/easy-rule-02.png" alt=""></p><blockquote><p>定义规则引擎</p></blockquote><p><img src="/images/rule-engine/easy-rule-03.png" alt=""></p><blockquote><p>定义规则监听</p></blockquote><p><img src="/images/rule-engine/easy-rule-04.png" alt=""></p><blockquote><p>规则示例-shop,这是一个模拟网上商城拒绝卖酒给未成年的规则.</p></blockquote><p><img src="/images/rule-engine/easy-rule-05.png" alt=""></p><p><img src="/images/rule-engine/easy-rule-06.png" alt=""></p><h2 id="Mandarax"><a href="#Mandarax" class="headerlink" title="Mandarax"></a><a href="#Mandarax" title="Mandarax"></a>Mandarax</h2><blockquote><p>• Mandarax是一个规则引擎的纯Java实现，基于反向推理(归纳法)。能够较容易地实现多个数据源的集成。例如,数据库记录能方便地集成为事实集 (facts sets),reflection用来集成对象模型中的功能。支持XML标准(RuleML 0.8)。它提供了一个兼容J2EE的使用反向链接的接口引擎。目前不支持JSR 94。<br>• 使用率很少，文档较少。</p></blockquote><h2 id="JBOSS-Drools"><a href="#JBOSS-Drools" class="headerlink" title="JBOSS Drools"></a><a href="#JBOSS-Drools" title="JBOSS Drools"></a>JBOSS Drools</h2><blockquote><p>JBOSS DROOLS是一个业务规则管理系统，具有基于前向链接和后向链接推理的规则引擎，允许快速和可靠地评估业务规则和复杂事件处理。<br>规则引擎也是创建专家系统的基本构件，在人工智能中，专家系统是模拟人类专家的决策能力的计算机系统。</p></blockquote><p><img src="/images/rule-engine/drools-01.png" alt=""></p><h3 id="Drools优点："><a href="#Drools优点：" class="headerlink" title="Drools优点："></a><a href="#Drools优点：" title="Drools优点："></a>Drools优点：</h3><blockquote><p>• 非常活跃的社区支持<br>• 易用<br>• 快速的执行速度<br>• 在 Java 开发人员中流行<br>• 与 Java Rule Engine API（JSR 94）兼容</p></blockquote><h3 id="Drools示例"><a href="#Drools示例" class="headerlink" title="Drools示例"></a><a href="#Drools示例" title="Drools示例"></a>Drools示例</h3><blockquote><p>定义drl文件<br><img src="/images/rule-engine/drools-02.png" alt=""></p></blockquote><h3 id="Drools语法简介"><a href="#Drools语法简介" class="headerlink" title="Drools语法简介"></a><a href="#Drools语法简介" title="Drools语法简介"></a>Drools语法简介</h3><blockquote><p>1 规则语言:一个规则通常包括三个部分：属性部分（attribute）、条件部分（LHS）和结果部分（RHS）。</p></blockquote><p><img src="/images/rule-engine/drools-03.png" alt=""></p><blockquote><p>2条件部分LHS</p></blockquote><blockquote><p>条件部分又被称之为Left Hand Side，简称为LHS，下文当中，如果没有特别指出，那么所说的LHS 均指规则的条件部分，在一个规则当中when 与then 中间的部分就是LHS 部分。在LHS 当中，可以包含0~n 个条件，如果LHS 部分没空的话，那么引擎会自动添加一个eval(true)的条件，由于该条件总是返回true，所以LHS 为空的规则总是返回true。LHS 部分是由一个或多个条件组成，条件又称之为pattern（匹配模式），多个pattern之间用可以使用and 或or 来进行连接，同时还可以使用小括号来确定pattern 的优先级。</p></blockquote><blockquote><p>对于一个pattern 来说“绑定变量名”是可选的，如果在当前规则的LHS 部分的其它的pattern 要用到这个对象，那么可以通过为该对象设定一个绑定变量名来实现对其引用，对于绑定变量的命名，通常的作法是为其添加一个“$”符号作为前缀，这样可以很好的与Fact的属性区别开来；绑定变量不仅可以用在对象上，也可以用在对象的属性上面，命名方法与对象的命名方法相同；“field 约束”是指当前对象里相关字段的条件限制</p></blockquote><blockquote><p>示例如下：</p></blockquote><p><img src="/images/rule-engine/drools-04.png" alt=""></p><blockquote><p>此段规则的含义为：的规则就包含两个pattern，第一个pattern 有三个约束，分别是：对象类型必须是Cutomer；同时Cutomer 的age 要大于20 且gender 要是male；<br>第二个pattern 也有三个约束，分别是：对象类型必须是Order，同时Order 对应的Cutomer 必须是前面的那个Customer 且当前这个Order 的price 要大于1000。<br>在这两个pattern 没有符号连接，在Drools当中在pattern 中没有连接符号，那么就用and 来作为默认连接，所以在该规则的LHS 部分中两个pattern 只有都满足了才会返回true。<br>默认情况下，每行可以用“;”来作为结束符（和Java 的结束一样），当然行尾也可以不加“;”结尾。</p></blockquote><blockquote><p>3约束连接<br>对于对象内部的多个约束的连接，可以采用“&amp;&amp;”（and）、“||”(or)和“,”(and)来实现，“&amp;&amp;”（and）、“||”(or)和“,”这三个连接符号如果没有用小括号来显示的定义优先级的话，那么它们的执行顺序是：“&amp;&amp;”（and）、“||”(or)和“,” “&amp;&amp;”优先级最高，表面上看“,”与“&amp;&amp;”具有相同的含义，但是有一点需要注意，“，”与“&amp;&amp;”和“||”不能混合使用，也就是说在有“&amp;&amp;”或“||”出现的LHS 当中，是不可以有“，”连接符出现的，反之亦然。</p></blockquote><blockquote><p>4比较操作符<br>在当中共提供了十二种类型的比较操作符，分别是：&gt;、&gt;=、&lt;、&lt;=、= =、!=、contains、not contains、memberof、not memberof、matches、not matches；在这十二种类型的比较操作符当中，前六个是比较常见也是用的比较多的比较操作符。</p></blockquote><blockquote><p>5属性：<br>规则属性是用来控制规则执行的重要工具，在规则的属性共有13 个，它们分别是：activation-group、agenda-group、auto-focus、date-effective、date-expires、dialect、duration、enabled、lock-on-active、no-loop、ruleflow-group、salience、when</p></blockquote><p><img src="/images/rule-engine/drools-05.png" alt=""><br><img src="/images/rule-engine/drools-06.png" alt=""><br><img src="/images/rule-engine/drools-07.png" alt=""></p><h3 id="Drools代码演示"><a href="#Drools代码演示" class="headerlink" title="Drools代码演示"></a><a href="#Drools代码演示" title="Drools代码演示"></a>Drools代码演示</h3><blockquote><p>pom.xml 添加依赖</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.drools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>drools-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.5.0.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.drools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>drools-compiler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>6.5.0.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>规则实体类</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">package</span> com<span class="token punctuation">.</span>neo<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>model<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>ToStringBuilder<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Column<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Entity<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>GeneratedValue<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Id<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Entity</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rule</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Id</span>        <span class="token annotation punctuation">@GeneratedValue</span>        <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> String ruleKey<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> String content<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> String version<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> String lastModifyTime<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> String createTime<span class="token punctuation">;</span>        <span class="token keyword">public</span> Long <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getRuleKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> ruleKey<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRuleKey</span><span class="token punctuation">(</span>String ruleKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ruleKey <span class="token operator">=</span> ruleKey<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> content<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> version<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVersion</span><span class="token punctuation">(</span>String version<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>version <span class="token operator">=</span> version<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getLastModifyTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> lastModifyTime<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLastModifyTime</span><span class="token punctuation">(</span>String lastModifyTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lastModifyTime <span class="token operator">=</span> lastModifyTime<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> createTime<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCreateTime</span><span class="token punctuation">(</span>String createTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>createTime <span class="token operator">=</span> createTime<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> ToStringBuilder<span class="token punctuation">.</span><span class="token function">reflectionToString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>初始化KieContainer-by drl file</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">package</span> com<span class="token punctuation">.</span>neo<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>config<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>neo<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>service<span class="token punctuation">.</span>ReloadDroolsRulesService<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>ClassPathResource<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>KieBase<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>KieServices<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>*<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>KieContainer<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>KieSession<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ResourceFactory<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>KModuleBeanFactoryPostProcessor<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnMissingBean<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>support<span class="token punctuation">.</span>PathMatchingResourcePatternResolver<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ResourcePatternResolver<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DroolsAutoConfiguration</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String RULES_PATH <span class="token operator">=</span> <span class="token string">"rules/"</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>KieFileSystem<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> KieFileSystem <span class="token function">kieFileSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>            KieFileSystem kieFileSystem <span class="token operator">=</span> <span class="token function">getKieServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newKieFileSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Resource <span class="token punctuation">[</span><span class="token punctuation">]</span> resourceArray <span class="token operator">=</span> <span class="token function">getRuleFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取文件并加载</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Resource file <span class="token operator">:</span> resourceArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>                kieFileSystem<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>ResourceFactory<span class="token punctuation">.</span><span class="token function">newClassPathResource</span><span class="token punctuation">(</span>RULES_PATH <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> kieFileSystem<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRuleFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>            ResourcePatternResolver resourcePatternResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> resourcePatternResolver<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>RULES_PATH <span class="token operator">+</span> <span class="token string">"**/*.drl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>KieContainer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> KieContainer <span class="token function">kieContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>            <span class="token keyword">final</span> KieRepository kieRepository <span class="token operator">=</span> <span class="token function">getKieServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            kieRepository<span class="token punctuation">.</span><span class="token function">addKieModule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KieModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> ReleaseId <span class="token function">getReleaseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> kieRepository<span class="token punctuation">.</span><span class="token function">getDefaultReleaseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            KieFileSystem kieFileSystem <span class="token operator">=</span> <span class="token function">kieFileSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            KieBuilder kieBuilder <span class="token operator">=</span> <span class="token function">getKieServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newKieBuilder</span><span class="token punctuation">(</span>kieFileSystem<span class="token punctuation">)</span><span class="token punctuation">;</span>            kieBuilder<span class="token punctuation">.</span><span class="token function">buildAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            KieContainer kieContainer<span class="token operator">=</span><span class="token function">getKieServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newKieContainer</span><span class="token punctuation">(</span>kieRepository<span class="token punctuation">.</span><span class="token function">getDefaultReleaseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ReloadDroolsRulesService<span class="token punctuation">.</span>kieContainer <span class="token operator">=</span> kieContainer<span class="token punctuation">;</span>            <span class="token keyword">return</span> kieContainer<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> KieServices <span class="token function">getKieServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> KieServices<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>KieBase<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> KieBase <span class="token function">kieBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">kieContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKieBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>KieSession<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> KieSession <span class="token function">kieSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">kieContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newKieSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>KModuleBeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> KModuleBeanFactoryPostProcessor <span class="token function">kiePostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KModuleBeanFactoryPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>初始化KieContainer by db rules</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">package</span> com<span class="token punctuation">.</span>neo<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>service<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>neo<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Rule<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>neo<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>RuleRepository<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>KieServices<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>KieBuilder<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>KieFileSystem<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>KieRepository<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>Message<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>KieContainer<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Created by neo on 17/7/31.     */</span>    <span class="token annotation punctuation">@Service</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReloadDroolsRulesService</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> KieContainer kieContainer<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> RuleRepository ruleRepository<span class="token punctuation">;</span>        <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            KieContainer kieContainer<span class="token operator">=</span><span class="token function">loadContainerFromString</span><span class="token punctuation">(</span><span class="token function">loadRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>kieContainer <span class="token operator">=</span> kieContainer<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Rule<span class="token operator">></span>  <span class="token function">loadRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Rule<span class="token operator">></span> rules<span class="token operator">=</span>ruleRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> rules<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span>  KieContainer <span class="token function">loadContainerFromString</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Rule<span class="token operator">></span> rules<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            KieServices ks <span class="token operator">=</span> KieServices<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            KieRepository kr <span class="token operator">=</span> ks<span class="token punctuation">.</span><span class="token function">getRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            KieFileSystem kfs <span class="token operator">=</span> ks<span class="token punctuation">.</span><span class="token function">newKieFileSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Rule rule<span class="token operator">:</span>rules<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String  drl<span class="token operator">=</span>rule<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                kfs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"src/main/resources/"</span> <span class="token operator">+</span> drl<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".drl"</span><span class="token punctuation">,</span> drl<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            KieBuilder kb <span class="token operator">=</span> ks<span class="token punctuation">.</span><span class="token function">newKieBuilder</span><span class="token punctuation">(</span>kfs<span class="token punctuation">)</span><span class="token punctuation">;</span>            kb<span class="token punctuation">.</span><span class="token function">buildAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>kb<span class="token punctuation">.</span><span class="token function">getResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasMessages</span><span class="token punctuation">(</span>Message<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Build Errors:\n"</span> <span class="token operator">+</span> kb<span class="token punctuation">.</span><span class="token function">getResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Time to build rules : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span>  <span class="token operator">+</span> <span class="token string">" ms"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            KieContainer kContainer <span class="token operator">=</span> ks<span class="token punctuation">.</span><span class="token function">newKieContainer</span><span class="token punctuation">(</span>kr<span class="token punctuation">.</span><span class="token function">getDefaultReleaseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Time to load container: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span>  <span class="token operator">+</span> <span class="token string">" ms"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> kContainer<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Web controller</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">package</span> com<span class="token punctuation">.</span>neo<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>controller<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>neo<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Address<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>neo<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>model<span class="token punctuation">.</span>fact<span class="token punctuation">.</span>AddressCheckResult<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>neo<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>service<span class="token punctuation">.</span>ReloadDroolsRulesService<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>KieContainer<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>kie<span class="token punctuation">.</span>api<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>KieSession<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span>    <span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span>    <span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>    <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Controller</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Resource</span>        <span class="token keyword">private</span> ReloadDroolsRulesService rules<span class="token punctuation">;</span>        <span class="token annotation punctuation">@ResponseBody</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/address"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Address address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            address<span class="token punctuation">.</span><span class="token function">setPostcode</span><span class="token punctuation">(</span><span class="token function">generateRandom</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            KieSession kieSession <span class="token operator">=</span> ReloadDroolsRulesService<span class="token punctuation">.</span>kieContainer<span class="token punctuation">.</span><span class="token function">newKieSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            AddressCheckResult result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddressCheckResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            kieSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>            kieSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> ruleFiredCount <span class="token operator">=</span> kieSession<span class="token punctuation">.</span><span class="token function">fireAllRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            kieSession<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"触发了"</span> <span class="token operator">+</span> ruleFiredCount <span class="token operator">+</span> <span class="token string">"条规则"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isPostCodeResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"规则校验通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 从数据加载最新规则         * @return         * @throws IOException         */</span>        <span class="token annotation punctuation">@ResponseBody</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/reload"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> String <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>            rules<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 生成随机数         * @param num         * @return         */</span>        <span class="token keyword">public</span> String <span class="token function">generateRandom</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String chars <span class="token operator">=</span> <span class="token string">"0123456789"</span><span class="token punctuation">;</span>            StringBuffer number<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> rand <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                number<span class="token operator">=</span>number<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>chars<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>rand<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>数据库DRL数据</p></blockquote><p><img src="/images/rule-engine/dbrules.png" alt=""></p><blockquote><p>下面是其中的一条数据中的content中的数据</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">package</span> plausibcheck<span class="token punctuation">.</span>adress    <span class="token keyword">import</span> com<span class="token punctuation">.</span>neo<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Address<span class="token punctuation">;</span>    <span class="token keyword">import</span> com<span class="token punctuation">.</span>neo<span class="token punctuation">.</span>drools<span class="token punctuation">.</span>model<span class="token punctuation">.</span>fact<span class="token punctuation">.</span>AddressCheckResult<span class="token punctuation">;</span>    rule <span class="token string">"Postcode test999"</span>        when            address <span class="token operator">:</span> <span class="token function">Address</span><span class="token punctuation">(</span>postcode <span class="token operator">==</span> <span class="token string">"hello"</span><span class="token punctuation">)</span>            checkResult <span class="token operator">:</span> <span class="token function">AddressCheckResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        then            checkResult<span class="token punctuation">.</span><span class="token function">setPostCodeResult</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"规则中打印日志：校验通过4444!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a><a href="#结果" title="结果"></a>结果</h3><blockquote><p>1.初始化时通过文件加载KieContainer，调用时触发了默认的规则.</p></blockquote><p><img src="/images/rule-engine/byfile.png" alt=""></p><blockquote><p>2.调用接口重新reload KieContainer</p></blockquote><p><img src="/images/rule-engine/reload.png" alt=""></p><blockquote><p>3.再次调用发现触发了两条规则，但这两条规则是数据库中的RULE触发的，因为KieContainer只使用了数据库的RULE，并没有使用原来的文件中的rule.</p></blockquote><p><img src="/images/rule-engine/retry.png" alt=""></p><h3 id="Drools热更新"><a href="#Drools热更新" class="headerlink" title="Drools热更新"></a><a href="#Drools热更新" title="Drools热更新"></a>Drools热更新</h3><blockquote><p>热更新只需要重新初始化KieContainer就OK，新的规则即可生效.</p></blockquote><h2 id="rete-算法"><a href="#rete-算法" class="headerlink" title="rete 算法"></a><a href="#rete-算法" title="rete 算法"></a>rete 算法</h2><blockquote><p>Rete 算法最初是由卡内基梅隆大学的 Charles L.Forgy 博士在 1974 年发表的论文中所阐述的算法 , 该算法提供了专家系统的一个高效实现。自 Rete 算法提出以后 , 它就被用到一些大型的规则系统中 , 像 ILog、Jess、JBoss Rules 等都是基于 RETE 算法的规则引擎.</p></blockquote><blockquote><p>Rete 在拉丁语中译为”net”，即网络。Rete 匹配算法是一种进行大量模式集合和大量对象集合间比较的高效方法，通过网络筛选的方法找出所有匹配各个模式的对象和规则。<br>其核心思想是将分离的匹配项根据内容动态构造匹配树，以达到显著降低计算量的效果。Rete 算法可以被分为两个部分：规则编译和规则执行。</p></blockquote><p><img src="/images/rule-engine/rete-01.png" alt=""><br><img src="/images/rule-engine/rete-02.png" alt=""></p><h3 id="RETE算法说明"><a href="#RETE算法说明" class="headerlink" title="RETE算法说明"></a><a href="#RETE算法说明" title="RETE算法说明"></a>RETE算法说明</h3><blockquote><p>节点说明</p></blockquote><p><img src="/images/rule-engine/rete-03.png" alt=""></p><blockquote><p>规则示例</p></blockquote><p><img src="/images/rule-engine/rete-04.png" alt=""></p><p><img src="/images/rule-engine/rete-05.png" alt=""></p><blockquote><p>1.从工作内存中取一工作存储区元素WME（Working Memory Element，简称WME）放入根节点进行匹配。WME是为事实建立的元素，是用于和非根结点代表的模式进行匹配的元素。<br>（1建立存储元素）</p></blockquote><blockquote><p>2.遍历每个alpha节点（含ObjectType节点），如果alpha节点约束条件与该WME一致，则将该WME存在该alpha节点的匹配内存中，并向其后继节点传播。<br>（遍历每个红色代表的plpha节点，并存入内存中供使用）</p></blockquote><blockquote><p>3.对alpha节点的后继结点继续（２）的过程，直到alpha内存所有通过匹配的事实保存在alpha内存中。<br>（重复2的过程）</p></blockquote><blockquote><p>4.对每个beta节点进行匹配，如果单个事实进入beta节点左部，则转换成一个元素的元组存在节点左侧内存中。如果是一个元组进入左部，则将其存在左内存中。如果一个事实进入右侧，则将其与左内存中的元组按照节点约束进行匹配，符合条件则将该事实对象与左部元组合并，并传递到下一节点。bata结点有left存储区和right存储，其中left存储区是beta内存，right存储区是alpha内存。存储区储存的最小单位是WME。<br>（匹配蓝色等变形代表的beta节点，相当于是构造内存）</p></blockquote><blockquote><p>5.重复（４）直到所有beta处理完毕，元组对象进入到Terminal节点。对应的规则被触活，将规则后件加入议程（Agenda）。<br>（处理所有beta节点直到terminal节点，将激活规则加入到agenda中）</p></blockquote><blockquote><p>6.对Agenda里的规则进行冲突消解，选择合适的规则执行。<br>（agenda解决规则冲突，选择合适的规则执行）</p></blockquote><h3 id="Rete算法的特点"><a href="#Rete算法的特点" class="headerlink" title="Rete算法的特点"></a><a href="#Rete算法的特点" title="Rete算法的特点"></a>Rete算法的特点</h3><blockquote><p>rete算法通过共享规则节点和缓存匹配结果，获得产生式推理系统在时间和空间上的性能提升。</p></blockquote><blockquote><p>1、状态保存<br>事实集合中的每次变化，其匹配后的状态都被保存再alpha和beta节点中。在下一次事实集合发生变化时，绝大多数的结果都不需要变化，rete算法通过保存操作过程中的状态，避免了大量的重复计算。Rete算法主要是为那些事实集合变化不大的系统设计的，当每次事实集合的变化非常剧烈时，rete的状态保存算法效果并不理想。</p></blockquote><blockquote><p>2、节点共享<br>另一个特点就是不同规则之间含有相同的模式，从而可以共享同一个节点。Rete网络的各个部分包含各种不同的节点共享。</p></blockquote><blockquote><p>3、节点索引<br>索引方法是指对rete网络的节点建立当前节点对后继的索引，在事实断言时可以通过索引快速找到对应的后继节点而无需逐个查找。drools在rete的面向对象版本rete－oo算法中对ObjectType节点增加后继alpha节点的索引，以事实的属性为key，alpha节点为value，这样在事实通过类型节点验证后可以迅速找到对应的alpha节点进行断言。<br>同样，对beta节点也可以建立索引，beta节点的索引主要是针对节点左右内存的查询。当一个事实传递到beta节点的右内存中时，需要与该节点的左内存进行连接操作，即遍历左侧内存中的事实元组，找到符合节点约束的事实进行连接。该过程的遍历查找效率较低，将beta内存分成若干单元，每个单元分配一个id；对右侧的事实用哈希函数求索引，该索引就是某个单元的位置，通过索引快速找到相应单元进行匹配，如果不在该分区，则将该对象组成一个新的单元加入左内存。</p></blockquote><blockquote><p>4 Rete 算法的不足<br>存在状态重复保存的问题，比如匹配过模式1和模式2的事实要同时保存在模式1和模式2的节点缓存中，将占用较多空间并影响匹配效率。<br>事实的删除与事实的添加顺序相同, 除了要执行与事实添加相同的计算外, 还需要执行查找, 开销很高。</p></blockquote><blockquote><p>5.rete的一个主要缺点就是不适合处理快速变化的数据和规则。<br>主要表现在：<br>数据变化引起节点保存的临时事实频繁变化，这将让rete失去增量匹配的优势。<br>数据的变化使得对规则网络的种种优化方法如索引、条件排序等失去效果。</p></blockquote><blockquote><p>rete算法使用了alpha内存存储已计算的中间结果, 以牺牲空间换取时间, 从而加快系统的速度。然而当处理海量数据与规则时，beta内存根据规则的条件与事实的数目而成指数级增长, 所以当规则与事实很多时, 会耗尽系统资源。<br>规则引擎不能处理缺失的数据及模糊的逻辑。例如规则“如果年级大则容易患中风”。产生式推理系统将不能精确表达“年级大”及“容易”这样的概念，相应的推理也不能得到精确的结果。这种场合下，算法变得很脆弱，有点儿类似AI的一部分功能，所以drools通常被称作伪人工智能。</p></blockquote><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> drools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> drools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LINUX常用命令</title>
      <link href="/2019/08/27/LINUX%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/08/27/LINUX%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍一些常用的linux命令</p></blockquote><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a><a href="#命令" title="命令"></a>命令</h2><pre class="line-numbers language-s"><code class="language-s">> cp file filename 复制文件> cp -rf directory1 /directory2 复制文件夹到另一个文件夹> chmod u+x *.sh 为sh脚本添加可执行权限> grep -n “.*” filename 按行查看文件> rm -rf directoryname 删除文件夹> curl -v [http://www.baidu.com](http://www.baidu.com) 访问地址> echo 打印，如果是在linux脚本方法中则返回字符串> final\_activemq\_url=${activemq_url%,*} 去除最后一个字符,以及后面的字符> ./start_first.sh & #使用后台方式运行> ./start_second.sh #使用前台方式运行> netstat tunlp | grep port #linux查看端口占用> jps 查看进程> ps 查看进程> top 查看内存CPU占用> wget -P 下载文件到指定目录> cat /proc/version 查看内核版本> unzip -d 解压到自定文件夹下面> mkdir -p 确保目录存在> apt-get install -y #ubantu安装软件> ldd /usr/local/mongodb/bin/mongod #查看mongo(其他字节文件)启动依赖的一些库> cat -v entrypoint.sh #查看文件详情，包括隐藏的字符> sed -i “s/$old\_verify\_link/$verify_link/“ /usr/local//default.conf #替换文件中的内容> echo ‘I am a boy’ >> ./test.txt #往文件中追加内容> ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk ‘{print $2}’|tr -d “addr:”|sed -n ‘2p’获取linuxIP地址> cat ifcfg-eth0 |grep IPADDR | tr -d “IPADDR”|tr -d “\\””|tr -d “=” #通过文件获取主机ip> ESC + u #撤回刚才对文件的VIM编辑> history #查看当前用户输入的历史命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="阻塞脚本"><a href="#阻塞脚本" class="headerlink" title="阻塞脚本"></a><a href="#阻塞脚本" title="阻塞脚本"></a>阻塞脚本</h2><ol><li><p>while 死循环</p><pre class="line-numbers language-sh"><code class="language-sh">    #!/bin/sh    #stack service    dosome()    {     while true     do         echo "hello docker"         sleep 3000     done    }    echo "start docker"    dosome<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>sleep 30000</p></li><li><p>tail -f /dev/null</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>一些常用的命令暂未列出，后续会继续补充</p></blockquote><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker通过ZIP方式制作MongoDB镜像</title>
      <link href="/2019/08/27/docker%E9%80%9A%E8%BF%87ZIP%E6%96%B9%E5%BC%8F%E5%88%B6%E4%BD%9CMongoDB%E9%95%9C%E5%83%8F/"/>
      <url>/2019/08/27/docker%E9%80%9A%E8%BF%87ZIP%E6%96%B9%E5%BC%8F%E5%88%B6%E4%BD%9CMongoDB%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍如何通过mongodb的zip包打docker镜像</p></blockquote><h2 id="docker镜像需要的文件"><a href="#docker镜像需要的文件" class="headerlink" title="docker镜像需要的文件"></a><a href="#docker镜像需要的文件" title="docker镜像需要的文件"></a>docker镜像需要的文件</h2><h3 id="DOCKERFILE"><a href="#DOCKERFILE" class="headerlink" title="DOCKERFILE"></a><a href="#DOCKERFILE" title="DOCKERFILE"></a>DOCKERFILE</h3><pre class="line-numbers language-t"><code class="language-t">    #基础镜像使用ubuntu16.04    FROM ubuntu:16.04    #作者    MAINTAINER BolingCavalry     #定义工作目录    ENV WORK_PATH /usr/local/    #定义mongodb文件夹名称    #创建数据库文件目录    RUN mkdir -p /data/db  /opt /data/logs /data/mongodata /data/configdb /logs    ADD mongodb-linux-x86_64-rhel70-3.6.1.1.zip /opt    COPY library.zip /usr/lib/    #更新,把libssl.so.1.0.0装上，否则无法运行mongodb    RUN apt-get update \        && apt-get install -y zip \        && apt-get install -y vim \        #根据官方说明，此处必须升级libcurl3，根据不同的ubantu镜像，升级脚本不同，文中有官方路径说明        && apt-get install -y libcurl3 openssl    # 解压并将mongodb文件放到自定位置    RUN set -x \            && unzip /opt/mongodb-linux-x86_64-rhel70-3.6.1.1.zip -d /opt \            && unzip /usr/lib/library.zip -d /usr/lib/ \            && cp -rf /usr/lib/library/. /usr/lib/ \            && rm -rf /usr/lib/library/ \            && rm /usr/lib/library.zip \            && mv /opt/mongodb-linux-x86_64-rhel70-3.6.1.1 /usr/local/mongodb \            && rm -rf /opt/mongodb-linux-x86_64-rhel70-3.6.1.1.zip    #把mongodb的bin目录加入到PATH环境变量中    ENV PATH=$WORK_PATH/mongodb/bin:$PATH    COPY mongod.conf /usr/local/mongodb/    COPY docker-entrypoint.sh /usr/local/bin/    COPY mongodb.sh /usr/local/bin/    RUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh \        && ln -s usr/local/bin/mongodb.sh /mongodb.sh \        && chmod a+x /usr/local/bin/*.sh \        && chmod a+x /usr/local/mongodb/bin/* \        && chmod a+x entrypoint.sh \        && chmod a+x mongodb.sh    ENTRYPOINT ["docker-entrypoint.sh"]    #连接端口    EXPOSE 27017    #启动服务，--rest参数表示开启web服务    CMD ["mongod", "--rest"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="entrypoint-sh"><a href="#entrypoint-sh" class="headerlink" title="entrypoint.sh"></a><a href="#entrypoint-sh" title="entrypoint.sh"></a>entrypoint.sh</h3><pre class="line-numbers language-t"><code class="language-t">    #!/bin/bash    stop_old_mongod()    {      mongodid=`ps -ef | grep mongod | grep -v grep | awk '{print $2}'`      echo "pid is $mongodid"      if [ -z "$mongodid" ]; then            echo "old mongod is not running, do not need to kill mongod"      else            echo "old mongod is running at pid: $mongodid"            echo "ready to kill $mongodid"            kill $mongodid            echo "kill mongod done"      fi    }    check_remove_mongodlock()    {      if [ -f "/data/mongodata/mongod.lock" ]; then            echo "mongod.lock is exist, remove it now"            rm /data/mongodata/mongod.lock      else            echo "mongod.lock is not exist, you are ready to start mongo, now"      fi    }    echo "checking mongod is running or not"    stop_old_mongod    echo "checking mongod.lock is exist or not."    check_remove_mongodlock    ./mongodb.sh start&    echo "mongodb is started"    sleep  30000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mongodb-sh"><a href="#mongodb-sh" class="headerlink" title="mongodb.sh"></a><a href="#mongodb-sh" title="mongodb.sh"></a>mongodb.sh</h3><pre class="line-numbers language-t"><code class="language-t">    #!/bin/bash    start()    {        /usr/local/mongodb/bin/mongod -repair --config /usr/local/mongodb/mongod.conf&    }    stop()    {        /usr/local/mongodb/bin/mongod --config /usr/local/mongodb/mongod.conf --shutdown&    }    case "$1" in        start)            start        ;;        stop)            stop        ;;        restart)            stop            start        ;;        *)            echo  $"Usage: $0 {start|stop|restart}"        ;;    esac    exit 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mongod-conf"><a href="#mongod-conf" class="headerlink" title="mongod.conf"></a><a href="#mongod-conf" title="mongod.conf"></a>mongod.conf</h3><pre class="line-numbers language-t"><code class="language-t">    dbpath=/data/mongodata    logpath=/data/logs/mongod.log    port=27017    fork=true    journal=false    storageEngine=mmapv1    #此处不设置可能无法连接mongodb    bind_ip_all=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker镜像打包注意事项"><a href="#docker镜像打包注意事项" class="headerlink" title="docker镜像打包注意事项"></a><a href="#docker镜像打包注意事项" title="docker镜像打包注意事项"></a>docker镜像打包注意事项</h2><blockquote><p>docker 相关文件放在同一个目录<br>Dockerfile、mongod.conf、mongodb.sh、library.zip,mongo的zip文件、entrypoint.sh<br>library.zip需要是因为ubantu系统的16.4镜像缺少ssllib.so.10包，需要手动添加，其下载地址如下<br>链接: <a href="https://pan.baidu.com/s/1qxxOmFpC56W414SYJBZCcg" target="_blank" rel="noopener">https://pan.baidu.com/s/1qxxOmFpC56W414SYJBZCcg</a> 提取码: 6tg8<br>docker 镜像如何打镜像请参看其他相关文档<br>docker build -t docke-image-name:tag . # 最后的’ .’ 是必须要的</p></blockquote><h2 id="rancher相关文件"><a href="#rancher相关文件" class="headerlink" title="rancher相关文件"></a><a href="#rancher相关文件" title="rancher相关文件"></a>rancher相关文件</h2><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a><a href="#docker-compose-yml" title="docker-compose.yml"></a>docker-compose.yml</h3><pre class="line-numbers language-t"><code class="language-t">    version: '2'    services:      mongo-cluster:        restart: always        environment:          MONGO_SERVICE_NAME: mongo-cluster          CATTLE_SCRIPT_DEBUG: ${debug}        # entrypoint: /opt/rancher/bin/entrypoint.sh        command:        - --replSet        - "${replset_name}"        image: 仓库名/alpine-mongodb:3.6        labels:          io.rancher.container.pull_image: always          io.rancher.scheduler.affinity:container_label_ne: io.rancher.stack_service.name=$${stack_name}/$${service_name}          io.rancher.scheduler.affinity:host_label: ${host_label}          io.rancher.container.hostname_override: container_name          io.rancher.sidekicks: mongo-base, mongo-datavolume        volumes_from:          - mongo-datavolume          - mongo-base        ports:          - 27017:27017/tcp      mongo-base:        restart: always        labels:          io.rancher.scheduler.affinity:container_label_ne: io.rancher.stack_service.name=$${stack_name}/$${service_name}          io.rancher.scheduler.affinity:host_label: ${host_label}          io.rancher.container.hostname_override: container_name          io.rancher.container.start_once: true        image: rancher/mongodb-conf:v0.1.1        stdin_open: true        entrypoint: /bin/true      mongo-datavolume:        labels:          io.rancher.scheduler.affinity:container_label_ne: io.rancher.stack_service.name=$${stack_name}/$${service_name}          io.rancher.scheduler.affinity:host_label: ${host_label}          io.rancher.container.hostname_override: container_name          io.rancher.container.start_once: true        volumes:          - mongodata:/data/db        entrypoint: /bin/true        image: busybox    volumes:      mongodata:        driver: ${VOLUME_DRIVER}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rancher-compose-yml"><a href="#rancher-compose-yml" class="headerlink" title="rancher-compose.yml"></a><a href="#rancher-compose-yml" title="rancher-compose.yml"></a>rancher-compose.yml</h3><pre class="line-numbers language-t"><code class="language-t">    version: '2'    catalog:      name: "MongoDB"      version: "3.4-rancher1"      description: "MongoDB Replica Set"      uuid: mongodb-1      minimum_rancher_version: v0.46.0      questions:        - variable: replset_name          description: "Name of the MongoDB replicaSet"          label: "ReplicaSet Name"          type: "string"          required: true          default: "rs0"        - variable: host_label          label: "Host Label to MongoDB Tags"          description: |            Host label to use as MongoDB 'value' tag.            Example: 'database'          required: false          type: "string"        - variable: debug          description: "Enable Debug log for Mongo containers"          label: "Debug"          type: "string"          required: false          default: ""        - variable: "VOLUME_DRIVER"          description: "The VOLUME driver to associate with this server"          label: "VOLUME Driver"          required: true          default: "local"          type: enum          options:            - local            - rancher-nfs            - rancher-efs            - rancher-ebs        - variable: mongo_scale          description: "How many containers the MongoDB will scale to?"          label: "mongo scale"          type: "int"          required: true          default: "3"    services:      mongo-cluster:        scale: ${mongo_scale}        retain_ip: true        metadata:          mongo:            yml:              replset.name: "${replset_name}"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a><a href="#启动方式" title="启动方式"></a>启动方式</h2><blockquote><p>启动将镜像文件放到镜像仓库中通过rancher启动即可</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>整个过程中，最大的问题是解决ssllib.so.10包缺失问题，参看官方文档后发现，必须对ubantu16.4镜像进行ssl软件升级<br><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu" target="_blank" rel="noopener">官方地址-https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu</a></p></blockquote><blockquote><p>也可以参考我的gitee地址<br><a href="https://gitee.com/jackromer/projects" target="_blank" rel="noopener">my-gitee</a></p></blockquote><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的一次pip异常解决</title>
      <link href="/2019/08/27/python%E7%9A%84%E4%B8%80%E6%AC%A1pip%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/08/27/python%E7%9A%84%E4%B8%80%E6%AC%A1pip%E5%BC%82%E5%B8%B8%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>一次运行Pip 安装Python库的时候突然报错了，试了很多种办法，终于找到正解，记录记录.</p></blockquote><h2 id="错误详情"><a href="#错误详情" class="headerlink" title="错误详情"></a><a href="#错误详情" title="错误详情"></a>错误详情</h2><blockquote><p>执行pip install 的时候报错 看起来像是没有找到正确的Python.exe</p><pre><code>error:unable to create process using "../python.exe" "../python.exe"</code></pre></blockquote><h2 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a><a href="#解决步骤" title="解决步骤"></a>解决步骤</h2><pre class="line-numbers language-s"><code class="language-s">1.  python pip.exe install somepackage2.  python -m pip install –upgrade pip3.  pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>其实不想记录的，但是这个问题比较EX，所以还是记录一下，哈哈.</p></blockquote><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA deep binary</title>
      <link href="/2019/08/27/JAVA-deep-binary/"/>
      <url>/2019/08/27/JAVA-deep-binary/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍java的二进制处理和相关的底层基础问题探索</p></blockquote><h2 id="JAVA的基础数据类型8种"><a href="#JAVA的基础数据类型8种" class="headerlink" title="JAVA的基础数据类型8种"></a><a href="#JAVA的基础数据类型8种" title="JAVA的基础数据类型8种"></a>JAVA的基础数据类型8种</h2><table><thead><tr><th>类型</th><th align="center">位数</th><th align="right">字节数</th><th align="right">范围</th></tr></thead><tbody><tr><td>byte</td><td align="center">8位</td><td align="right">1字节</td><td align="right">-128（-2^7） — 127（2^7 - 1</td></tr><tr><td>short</td><td align="center">16位</td><td align="right">2字节</td><td align="right">-32768（-2^15）— 32767（2^15 - 1）</td></tr><tr><td>int</td><td align="center">32位</td><td align="right">4字节</td><td align="right">-2,147,483,648（-2^31） — -2,147,483,647（2^31 - 1）</td></tr><tr><td>long</td><td align="center">64位</td><td align="right">8字节</td><td align="right">默认值0L</td></tr><tr><td>float</td><td align="center">32位</td><td align="right">4字节</td><td align="right">默认值0.0f</td></tr><tr><td>double</td><td align="center">64位</td><td align="right">8字节</td><td align="right">默认值0.0d</td></tr><tr><td>boolean</td><td align="center">1位</td><td align="right">无</td><td align="right">默认值false</td></tr><tr><td>char</td><td align="center">16位</td><td align="right">2字节</td><td align="right">Unicode字符 \u0000(0) — \uffff(65535)</td></tr></tbody></table><h2 id="位运算运算符"><a href="#位运算运算符" class="headerlink" title="位运算运算符"></a><a href="#位运算运算符" title="位运算运算符"></a>位运算运算符</h2><table><thead><tr><th>类型</th><th align="center">计算方式</th><th align="right">速记方式</th></tr></thead><tbody><tr><td>&amp;</td><td align="center">10101010 &amp; 01010101 = 00000000</td><td align="right">有0为0，出现0则为0</td></tr><tr><td>|</td><td align="center">10101010 | 01010101 = 11111111</td><td align="right">有1为1，出现1则为1</td></tr><tr><td>^</td><td align="center">10101010 ^ 01010101 = 11111111</td><td align="right">合2为1，出现不同则为1，相同则为0</td></tr><tr><td>~</td><td align="center">~10101010 = 0101010101</td><td align="right">1变为0，0变为1</td></tr><tr><td>&lt;&lt;</td><td align="center">10101010 &lt;&lt; 0xFF</td><td align="right">左移0xFF位，右补0相当与*2</td></tr><tr><td>&gt;&gt;</td><td align="center">10101010 &gt;&gt; 0xFF</td><td align="right">有符号右移0xFF位，正数高位补0，负数补1</td></tr><tr><td>&gt;&gt;&gt;</td><td align="center">10101010 &gt;&gt;&gt; 0xFF</td><td align="right">无符号右移0xFF位，高位全部补0</td></tr></tbody></table><h2 id="基础类型说明"><a href="#基础类型说明" class="headerlink" title="基础类型说明"></a><a href="#基础类型说明" title="基础类型说明"></a>基础类型说明</h2><blockquote><p>从上面我们可以发现JAVA和C的差异，C语言整数默认是signed有符号的，C语言中也可用unsigned 表示一个无符号值，JAVA整数都是有符号的，但也可通过一些方式表示无符号值。</p></blockquote><h2 id="如何用JAVA表示C语言的正确值"><a href="#如何用JAVA表示C语言的正确值" class="headerlink" title="如何用JAVA表示C语言的正确值"></a><a href="#如何用JAVA表示C语言的正确值" title="如何用JAVA表示C语言的正确值"></a>如何用JAVA表示C语言的正确值</h2><blockquote><p>java提供了一种方式来表示 C的 unsigned int short等, 如何实现，对当前的数据进行&amp;运算，和谁？<br>具体和谁需要看你的数据类型,0xff的二进制是1111 1111 （8bit）</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getUnsignedByte</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//将data字节型数据转换为0~255 (0xFF 即BYTE)，</span>        <span class="token keyword">return</span> data <span class="token operator">&amp;</span> <span class="token number">0x0FF</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//int 4字节 32位 表示将高24位全部变为0，保留低8位原始值，变为有符号首位为0的值，相当于C的有符号值</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getUnsignedByte</span> <span class="token punctuation">(</span><span class="token keyword">short</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//将data字节型数据转换为0~65535 (0xFFFF 即WORD)。 </span>        <span class="token keyword">return</span> data <span class="token operator">&amp;</span> <span class="token number">0x0FFFF</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//int 4字节 32位 表示将高16位全部变为0，保留低16位原始值，变为有符号首位为0的值,相当于C的有符号值</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getUnsignedIntt</span> <span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//将int数据转换为0~4294967295 (0xFFFFFFFF即DWORD)。 </span>        <span class="token keyword">return</span> data <span class="token operator">&amp;</span> <span class="token number">0x0FFFFFFFF</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//long 8字节 64位 表示将高32位全部变为0，保留低32位原始值，变为有符号首位为0的值,相当于C的有符号值</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="负数的二进制"><a href="#负数的二进制" class="headerlink" title="负数的二进制"></a><a href="#负数的二进制" title="负数的二进制"></a>负数的二进制</h2><blockquote><p>在计算机中，正数是以原码的形式存储的，而负数是以补码的形式存储的，负数的二进制需要该数正数按位取反的值再+1.</p></blockquote><h2 id="详解-gt-gt-gt-预算符"><a href="#详解-gt-gt-gt-预算符" class="headerlink" title="详解>>>预算符"></a><a href="#详解-gt-gt-gt-预算符" title="详解>>>预算符"></a>详解&gt;&gt;&gt;预算符</h2><blockquote><p>负数int -20无符号右移：r = -20 &gt;&gt;&gt; 2</p></blockquote><blockquote><p>注：数据类型默认为int 32位</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token operator">-</span><span class="token number">20</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>负数的二进制需要该数正数按位取反的值再<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">.</span>    源码：<span class="token number">10000000</span>  <span class="token number">00000000</span>   <span class="token number">00000000</span>   <span class="token number">00010100</span>    反码：<span class="token number">11111111</span>  <span class="token number">11111111</span>   <span class="token number">11111111</span>   <span class="token number">11101011</span><span class="token comment" spellcheck="true">//反码后+1</span>    补码：<span class="token number">11111111</span>  <span class="token number">11111111</span>   <span class="token number">11111111</span>   <span class="token number">11101100</span>     右移：<span class="token number">00111111</span>  <span class="token number">11111111</span>   <span class="token number">11111111</span>   <span class="token number">11111011</span>    结果：r <span class="token operator">=</span> <span class="token number">1073741819</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="交换-a-b-值"><a href="#交换-a-b-值" class="headerlink" title="^交换 a b 值"></a><a href="#交换-a-b-值" title="^交换 a b 值"></a>^交换 a b 值</h2><pre class="line-numbers language-java"><code class="language-java">        a＝a∧b<span class="token punctuation">;</span>        b＝b∧a<span class="token punctuation">;</span>        c＝a∧b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="大端模式和小端模式"><a href="#大端模式和小端模式" class="headerlink" title="大端模式和小端模式"></a><a href="#大端模式和小端模式" title="大端模式和小端模式"></a>大端模式和小端模式</h2><ol><li><p>大端模式：Big-Endian就是高位字节排放在内存的低地址端，低位字节排放在内存的高地址端。</p><blockquote><p>低地址 ——————–&gt; 高地址<br>0x12 | 0x34 | 0x56 | 0x78</p></blockquote></li><li><p>小端模式：Little-Endian就是低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。</p><blockquote><p>低地址 ——————–&gt; 高地址<br>0x78 | 0x56 | 0x34 | 0x12</p></blockquote></li><li><p>常见的CPU字节序</p><blockquote><p>Big Endian : PowerPC、IBM、Sun<br>Little Endian : x86、DEC<br>ARM既可以工作在大端模式，也可以工作在小端模式<br>JAVA和大部分的网络通讯协议都是使用Big-Endian的编码.</p></blockquote></li><li><p>常见文件的字节序</p><blockquote><p>Adobe PS – Big Endian<br>BMP – Little Endian<br>DXF(AutoCAD) – Variable<br>GIF – Little Endian<br>JPEG – Big Endian<br>MacPaint – Big Endian<br>RTF – Little Endian</p></blockquote></li><li><p>读取存储数据的顺序</p><blockquote><p>不管是大端还是小端模式，我们在读取和存储数据的时候一定都是从内存的低地址依次向高地址读取或写入。[ps这句话非常重要,请注意理解]</p></blockquote></li></ol><table><thead><tr><th>A内存地址</th><th align="center">A存储的值</th></tr></thead><tbody><tr><td>0x2000 4001</td><td align="center">0x01</td></tr><tr><td>0x2000 4002</td><td align="center">0x02</td></tr><tr><td>0x2000 4003</td><td align="center">0x03</td></tr><tr><td>0x2000 4004</td><td align="center">0x04</td></tr></tbody></table><blockquote><p>如果现在大端模式A传递此数据给B小端模式<br>A将<strong>内存</strong>中的值取出，取值由<strong>内存</strong>的低地址往高地址取值，由于大端模式的<strong>内存</strong>低位地址(即0X01)对应字节数组高位值，则字节数组最高位（最左边位）为[0x01,X,X,X]，则传递值为0x1234。</p></blockquote><blockquote><p>B接收到字节数组在<strong>内存中</strong>存储的时候也是按照内存低地址往高地址开始依次存储，由于小端模式的<strong>内存</strong>低位地址(即0x04)对应字节数组低位值，则在B中内存存储的数据为：</p></blockquote><table><thead><tr><th>B内存地址</th><th align="center">B存储的值</th></tr></thead><tbody><tr><td>0x8000 4001</td><td align="center">0x04</td></tr><tr><td>0x8000 4002</td><td align="center">0x03</td></tr><tr><td>0x8000 4003</td><td align="center">0x02</td></tr><tr><td>0x8000 4004</td><td align="center">0x01</td></tr></tbody></table><blockquote><p>B将<strong>内存</strong>中的值取出，取值由<strong>内存</strong>的低地址往高地址取值，则字节数组最低位（最右边位）为[X,X,X,0x1],则取出值为0x4321.</p></blockquote><blockquote><p>为什么在内存中同样的存储，取到的值不一样呢，因为此数组是4个字节，按照小端模式取出来的值则不一样，如果字节序一样则值相同，如果只是单字节，也是相同的，不需要关心顺序。</p></blockquote><blockquote><p>会发现数据由A传递给B后其显示的数据发生了翻天覆地的变化，这就是为啥在处理网络数据的时候要确定字节序的原因,必须保证A和B的字节序相同，如果不同，就需要使用字节序的转换函数。</p></blockquote><h2 id="如何理解JAVA的有符号-1byte-128-127"><a href="#如何理解JAVA的有符号-1byte-128-127" class="headerlink" title="如何理解JAVA的有符号 [1byte -128 - 127]"></a><a href="#如何理解JAVA的有符号-1byte-128-127" title="如何理解JAVA的有符号 [1byte -128 - 127]"></a>如何理解JAVA的有符号 [1byte -128 - 127]</h2><blockquote><p>举个栗子：JAVA的一个byte8位表示为10000001, C语言的一个byte8位表示为10000001<br>这个byte在JAVA和C中代表了不同的值JAVA &gt; -1 C &gt; -129为什么？<br>因为JAVA作为有符号其左边第一位用来表示正负值，第一位为1表示为一个负数，其表示的实际值为-1，而C语言左边第一位仍然表示数值其值为2^7 + 1 = 129 ,java 则为-1.</p></blockquote><h2 id="异或加密和解密"><a href="#异或加密和解密" class="headerlink" title="异或加密和解密"></a><a href="#异或加密和解密" title="异或加密和解密"></a>异或加密和解密</h2><pre class="line-numbers language-java"><code class="language-java">      <span class="token comment" spellcheck="true">/**         * xor 加密 key=xxxxxxxxxx        * @Description:        * @param data        * @return         */</span>        <span class="token keyword">public</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">xorEncode</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                   data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> keyBytes<span class="token punctuation">[</span>i<span class="token operator">%</span>keyBytes<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">return</span> data<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/**         * xor 解密 key=1234567890        * @Description:        * @param data        * @return         */</span>        <span class="token keyword">public</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">xorDecode</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                  data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> keyBytes<span class="token punctuation">[</span>i<span class="token operator">%</span>keyBytes<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">return</span> data<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JAVA-byte-TO-short-的大小端和无符号相互转换"><a href="#JAVA-byte-TO-short-的大小端和无符号相互转换" class="headerlink" title="JAVA byte[] TO short 的大小端和无符号相互转换"></a><a href="#JAVA-byte-TO-short-的大小端和无符号相互转换" title="JAVA byte[] TO short 的大小端和无符号相互转换"></a>JAVA byte[] TO short 的大小端和无符号相互转换</h2><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/**          * @功能 字节的转换与短整型  小端模式         * @param 两位的字节数组          * @return 短整型          */</span>          <span class="token keyword">public</span>  <span class="token keyword">short</span> <span class="token function">byteToShort</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">short</span> s0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最低位  </span>            <span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              s1 <span class="token operator">&lt;&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//byte数组低位值左移8位</span>            s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>s0 <span class="token operator">|</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> s<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/**          * @功能 字节的转换与短整型  大端模式         * @param 两位的字节数组          * @return 短整型          */</span>          <span class="token keyword">public</span>  <span class="token keyword">short</span> <span class="token function">byteToShort_BIG</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">short</span> s0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最低位  </span>            <span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              s1 <span class="token operator">&lt;&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//byte数组低位值左移8位</span>            s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>s0 <span class="token operator">|</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> s<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/**          * @功能  字节转换为短整型 无符号short         * @param 两位的字节数组          * @return 短整型          */</span>          <span class="token keyword">public</span>  <span class="token keyword">int</span> <span class="token function">byteToUnSinghedShort</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">short</span> s0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最低位  </span>            <span class="token keyword">short</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              s1 <span class="token operator">&lt;&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//byte数组低位值左移8位</span>            s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>s0 <span class="token operator">|</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> s <span class="token operator">&amp;</span> <span class="token number">0xFFFF</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// short 所以和0xFFFF做&amp;运算</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/**          * @功能 短整型与字节数组的转换 小端模式         * @param 短整型          * @return 两位的字节数组          */</span>          <span class="token keyword">public</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">shortToByte</span><span class="token punctuation">(</span><span class="token keyword">short</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">int</span> temp <span class="token operator">=</span> number<span class="token punctuation">;</span>              <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>temp <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将最低位保存在最低位  </span>                temp <span class="token operator">=</span> temp <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 向右移8位  </span>            <span class="token punctuation">}</span>              <span class="token keyword">return</span> b<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/**          * @功能 短整型与字节数组的转换 大端模式         * @param 短整型          * @return 两位的字节数组          */</span>          <span class="token keyword">public</span>  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">shortToByte_Big</span><span class="token punctuation">(</span><span class="token keyword">short</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">int</span> temp <span class="token operator">=</span> number<span class="token punctuation">;</span>              <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  b<span class="token punctuation">[</span>b<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>temp <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将最低位保存在最高位</span>                temp <span class="token operator">=</span> temp <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 向右移8位  </span>            <span class="token punctuation">}</span>              <span class="token keyword">return</span> b<span class="token punctuation">;</span>          <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> deep-binary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> binary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA关键字解读</title>
      <link href="/2019/08/27/JAVA%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E8%AF%BB/"/>
      <url>/2019/08/27/JAVA%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍JAVA的一些比较难以理解的关键字和用法</p></blockquote><h3 id="protected-关键字"><a href="#protected-关键字" class="headerlink" title="protected 关键字"></a><a href="#protected-关键字" title="protected 关键字"></a>protected 关键字</h3><h4 id="protected定义"><a href="#protected定义" class="headerlink" title="protected定义"></a><a href="#protected定义" title="protected定义"></a>protected定义</h4><blockquote><p>顾明思议，因为受保护，但是保护的范围是有限的，可以保护所处的包，子类和自己.限制了使用范围.<br>如果希望超类中的某些方法允许被子类访问，或者允许子类的方法访问超类的某个域，为此需要将这些方法或域设置为protected。在实际的程序中很实用这个关键字。</p></blockquote><h4 id="protected-使用"><a href="#protected-使用" class="headerlink" title="protected 使用"></a><a href="#protected-使用" title="protected 使用"></a>protected 使用</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">protect</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可供子类使用</span>        <span class="token keyword">public</span> <span class="token function">protect</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"protect [name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">protectChild</span> <span class="token keyword">extends</span> <span class="token class-name">protect</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> String major<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">protectChild</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span>String major<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用超类的构造方法，</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>major <span class="token operator">=</span> major<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> major<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMajor</span><span class="token punctuation">(</span>String major<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>major <span class="token operator">=</span> major<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"protectChild [major="</span> <span class="token operator">+</span> major <span class="token operator">+</span> <span class="token string">"]"</span> <span class="token operator">+</span><span class="token string">"[age="</span> <span class="token operator">+</span> age <span class="token operator">+</span><span class="token string">"]"</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果为：<br>1<br>protect [name=gaga, age=20]<br>20<br>protectChild [major=chinese][age=40]</p></blockquote><blockquote><p>上面的代码中我们可以看到，在子类中可以直接访问超类中的protected域，在本包中的其他类也可以直接访问，但是注意到一点，子类和调用该类的其他类可以直接访问该保护类型的变量对进行修改。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Protext</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            protect p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">protect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果为：<br>1<br>10</p></blockquote><blockquote><p>可以看到超类中的age值已经被更改为10了.</p></blockquote><h3 id="abstract-关键字"><a href="#abstract-关键字" class="headerlink" title="abstract 关键字"></a><a href="#abstract-关键字" title="abstract 关键字"></a>abstract 关键字</h3><h4 id="abstract定义"><a href="#abstract定义" class="headerlink" title="abstract定义"></a><a href="#abstract定义" title="abstract定义"></a>abstract定义</h4><blockquote><p>abstract，何为抽象，比如车可以有很多种车，实际使用时并不确定要用哪种车，只有使用的时候才确定，车可以run,如何run? 汽车路上run，飞车天上run，水车水里run，no matter 车如何run，只有run的时候才知道，所以车是一个抽象的，run的方式也是一个抽象的，于是一个包含抽象方法的抽象类则可以这样定义：</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Car<span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//抽象类</span>      <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抽象方法，抽象方法又子类实现，抽象方法只定义</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="abstract-使用"><a href="#abstract-使用" class="headerlink" title="abstract 使用"></a><a href="#abstract-使用" title="abstract 使用"></a>abstract 使用</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抽象方法无参构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">Car</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类已经实例化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mothod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抽象类的实例方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">mothod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抽象方法2</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抽象方法3</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Bicycle</span> <span class="token keyword">extends</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token function">Bicycle</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类已经实例化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mothod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//需要覆写抽象方法mothod2</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//需要覆写抽象方法mothod3</span>        <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bicycle</span><span class="token punctuation">(</span><span class="token string">"山地自行车"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果为：<br>父类已经实例化<br>山地自行车<br>子类已经实例化</p></blockquote><h4 id="abstract注意事项"><a href="#abstract注意事项" class="headerlink" title="abstract注意事项"></a><a href="#abstract注意事项" title="abstract注意事项"></a>abstract注意事项</h4><blockquote><p>1：抽象方法只能定义在抽象类中，抽象类和抽象方法必须由abstract关键字修饰.</p></blockquote><blockquote><p>2：抽象方法只定义方法声明，并不定义方法实现,没有{}.</p></blockquote><blockquote><p>3：抽象类不可以被创建对象(实例化)。</p></blockquote><blockquote><p>4：只有通过子类继承抽象类并覆盖了抽象类中的<strong>所有</strong>抽象方法后，该子类才可以实例化。否则，该子类还是一个抽象类,没有实际意义。</p></blockquote><blockquote><p>5：抽象类与interface有很大的不同之处，接口中不能有实例方法去实现业务逻辑，而抽象类中可以有实例方法，并实现业务逻辑，比如我们可以在抽象类中创建和销毁一个线程池.</p></blockquote><blockquote><p>6:抽象类不可被<strong>static，private，final</strong>修饰，原因分别为abstract修饰的类不可实例化，需要子类实现，需要被继承。</p></blockquote><blockquote><p>7:抽象类其实是可以实例化的，但是他的实例化方式不是通过new方式来创建对象，而是通过父类的引用来指向子类的实例来间接地实现父类的实例化（因为子类要实例化前，一定会先实例化他的父类。这样创建了继承抽象类的子类的对象，也就把其父类（抽象类）给实例化了）</p></blockquote><h3 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a><a href="#final-关键字" title="final 关键字"></a>final 关键字</h3><h4 id="final-定义"><a href="#final-定义" class="headerlink" title="final 定义"></a><a href="#final-定义" title="final 定义"></a>final 定义</h4><blockquote><p>final 最终的，不可变的，用来修饰类，属性，变量等.</p></blockquote><blockquote><p>无论属性是基本类型还是引用类型，final所起的作用都是变量里面存放的<strong>值</strong>不能变,这个值，对于基本类型来说，变量里面放的就是实实在在的值，如110，“abc”等。</p></blockquote><blockquote><p>而引用类型变量里面放的是个地址，所以用final修饰引用类型变量指的是它里面的<strong>地址</strong>不能变，<strong>并不是</strong>说这个地址所指向的对象或数组的内容不可以变，这个一定要注意。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">final</span> Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>； <span class="token comment" spellcheck="true">//那么你不能对p进行重新赋值，但是...</span>      p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">'newName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//你可以改变p里面属性的值，因为P对于的地址是不变的，但是地址所指向的对象内容是可变的</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="final-注意事项"><a href="#final-注意事项" class="headerlink" title="final 注意事项"></a><a href="#final-注意事项" title="final 注意事项"></a>final 注意事项</h4><blockquote><ol><li>final修饰属性，声明变量时可以不赋值，而且一旦赋值就不能被修改了。<br>对final属性可以在三个地方赋值：声明时、初始化块中、构造方法中,总之一定要赋值。</li></ol></blockquote><blockquote><ol start="2"><li>final修饰类中的方法, 作用：可以被继承，但继承后不能被重写。</li></ol></blockquote><blockquote><ol start="3"><li>final修饰类, 作用：类不可以被继承。</li></ol></blockquote><h4 id="byte做加法失败问题"><a href="#byte做加法失败问题" class="headerlink" title="byte做加法失败问题"></a><a href="#byte做加法失败问题" title="byte做加法失败问题"></a>byte做加法失败问题</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sumByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">byte</span> b1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> b2<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> b3<span class="token operator">=</span>b1<span class="token operator">+</span>b2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当程序执行到这一行的时候会出错。</span>        <span class="token comment" spellcheck="true">// 因为b1、b2可以自动转换成int类型的变量，运算时java虚拟机对它进行了转换，结果导致把一个int赋值给byte-----出错</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sumByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将b1 b2加上final修饰后</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> b1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span> b2<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> b3 <span class="token operator">=</span> b1<span class="token operator">+</span>b2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不会出错，因为基础类型被final修饰后其值不再改变，也就不会对b1,b2进行自动int提升，则不会出错。</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="STATIC-关键字"><a href="#STATIC-关键字" class="headerlink" title="STATIC 关键字"></a><a href="#STATIC-关键字" title="STATIC 关键字"></a>STATIC 关键字</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a><a href="#定义" title="定义"></a>定义</h4><blockquote><p>表明具有静态属性,用来申明类的属性和方法.</p></blockquote><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><a href="#注意事项" title="注意事项"></a>注意事项</h4><blockquote><ol><li>static变量：变量分类，一种是被static修饰的变量，叫静态变量（类变量）；<br>另一种是没有被static修饰的变量，叫实例变量。<br>对于静态变量在内存中只会一次拷贝（节省内存），JVM只为静态分配一次内存，<br>在加载类的过程中优先加载完成静态变量的内存分配，可用类名直接访问（方便），<br>当然也可以通过对象来访问（但是这是不推荐的）。</li></ol></blockquote><blockquote><ol start="2"><li>对于实例变量，没创建一个实例，就会为实例变量分配一次内存，<br>实例变量可以在内存中有多个拷贝，互不影响（灵活）。</li></ol></blockquote><blockquote><ol start="3"><li>static代码块：static代码块是类加载时，初始化自动执行的，其优先级仅次于静态变量。<br>如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。</li></ol></blockquote><blockquote><ol start="4"><li>static方法：static方法可以直接通过类名调用，任何的实例也都可以调用，因此static方法中不能用this和super关键字。<br>不能直接访问所属类的实例变量和实例方法(也就是不带static的成员变量和成员成员方法)。<br>只能访问所属类的静态成员变量和成员方法。<br>因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。<br>static方法只能访问static的变量和方法，因为非static的变量和方法是需要创建一个对象实例才能访问的，而static的变量/方法不需要创建任何对象。</li></ol></blockquote><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA的EQUAL和==解析</title>
      <link href="/2019/08/27/JAVA%E7%9A%84EQUAL%E5%92%8C-%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/08/27/JAVA%E7%9A%84EQUAL%E5%92%8C-%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要解析JAVA中equal和==的区别和理解。</p></blockquote><h2 id="Equal"><a href="#Equal" class="headerlink" title="Equal"></a><a href="#Equal" title="Equal"></a>Equal</h2><blockquote><p>在Object类当中，而Object是所有类的父类，包含在jdk里面，但并不适合绝大多数场景，通常需要重写.</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Date<span class="token punctuation">)</span> obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//date 类重写的equals方法</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//String 类重写的equals方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String anotherString <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>                <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                    <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        i<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="equals的作用"><a href="#equals的作用" class="headerlink" title="equals的作用"></a><a href="#equals的作用" title="equals的作用"></a>equals的作用</h3><blockquote><p>用于判断两个变量是否是对同一个对象的<strong>引用</strong>，即堆中的内容是否相同，返回值为布尔类型。<br>从String的重写代码中可以看出，String类型比较不同对象内容是否相同，应该用equals.<br>因为==用于比较引用类型和比较基本数据类型时具有不同的功能.</p></blockquote><h3 id="String作为一个对象来使用"><a href="#String作为一个对象来使用" class="headerlink" title="String作为一个对象来使用"></a><a href="#String作为一个对象来使用" title="String作为一个对象来使用"></a>String作为一个对象来使用</h3><blockquote><p>例一：对象不同，内容相同，”==”返回false，equals返回true</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"deep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"deep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//false cuz the object is not same.</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//true  cuz String overwrite the equals method.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>例二：同一对象，”==”和equals结果相同</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"deep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//true cuz the object is same .</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//true cuz the value is same .</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="String作为一个基本类型来使用"><a href="#String作为一个基本类型来使用" class="headerlink" title="String作为一个基本类型来使用"></a><a href="#String作为一个基本类型来使用" title="String作为一个基本类型来使用"></a>String作为一个基本类型来使用</h3><blockquote><p>例三：如果值不相同，对象就不相同，所以”==” 和equals结果一样</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    String s1 <span class="token operator">=</span> <span class="token string">"deep"</span><span class="token punctuation">;</span>    String s2 <span class="token operator">=</span> <span class="token string">"deep"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// if the value is different ，then the results are both false.</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//true cuz the basic type == compare the value of object, and the value is same.</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//true cuz the value is same</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="String对象的创建过程"><a href="#String对象的创建过程" class="headerlink" title="String对象的创建过程"></a><a href="#String对象的创建过程" title="String对象的创建过程"></a>String对象的创建过程</h2><blockquote><p>如果String缓冲池内不存在与其指定值相同的String对象，那么此时虚拟机将为此创建新的String对象，并存放在String缓冲池内。<br>如果String缓冲池内存在与其指定值相同的String对象，那么此时虚拟机将不为此创建新的String对象，而直接返回已存在的String对象的引用。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>equals和==在基础类型和对象的比较是不一样的，对象的==比较的是引用地址是否一样，而equals则要更具不同的对象是否从写equals方法来判定.</p></blockquote><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> compare </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> equal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOCKER镜像启动报no such file or directory问题</title>
      <link href="/2019/08/27/DOCKER%E9%95%9C%E5%83%8F%E5%90%AF%E5%8A%A8%E6%8A%A5no-such-file-or-directory%E9%97%AE%E9%A2%98/"/>
      <url>/2019/08/27/DOCKER%E9%95%9C%E5%83%8F%E5%90%AF%E5%8A%A8%E6%8A%A5no-such-file-or-directory%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>在通过dockerfile搭建docker镜像，<strong>启动</strong>镜像时常常会报<strong>no such file or directory</strong>提示，今天说明一下异常产生的原因。</p></blockquote><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a><a href="#原因分析" title="原因分析"></a>原因分析</h2><blockquote><p>原因大概分为两类，第一类确实无该文件，第二类文件编码问题</p></blockquote><h3 id="1-文件确实不存在"><a href="#1-文件确实不存在" class="headerlink" title="1.文件确实不存在"></a><a href="#1-文件确实不存在" title="1.文件确实不存在"></a>1.文件确实不存在</h3><blockquote><p>可能是真的没有该文件，首先要确保此文件存在。<br>可以通过在DOCKERFILE中切换到该目录，然后运行RUN ls查看文件是否存在来确定，如果文件存在还报该异常,则考虑第二种情况.</p><pre><code>...WORKDIR yourdirectory/RUN ls</code></pre></blockquote><h3 id="2-文件编码问题"><a href="#2-文件编码问题" class="headerlink" title="2.文件编码问题"></a><a href="#2-文件编码问题" title="2.文件编码问题"></a>2.文件编码问题</h3><blockquote><p>这种情况就比较恶心了，通常情况下我们写dockerfile的entrypoint.sh或其他.sh文件时是在windows系统下写的，所以常常忽略一个问题。</p></blockquote><blockquote><p>那就是windows使用的编码和linux是不一样的，当我们把文件复制到linux系统时，linux无法识别隐藏的编码造成linux系统无法识别该文件。</p></blockquote><blockquote><p>可以通过cat -v entrypoint.sh查看文件信息，如果命令中出现^M则代表此文件时windows系统编码文件，这时候则相当于没有该文件所，以会报no such file or directory异常。</p></blockquote><blockquote><p>是不是很坑，哈哈，这个问题如果没意识到，怎么想也不会想到是编码的问题.</p></blockquote><pre><code>[cluster@cluster202 alpine-nginx]$ cat -v entrypoint.sh#如果出现下面的^M字符说明是编码问题#!/bin/bash^M.....^M...</code></pre><h3 id="3-如何解决"><a href="#3-如何解决" class="headerlink" title="3.如何解决"></a><a href="#3-如何解决" title="3.如何解决"></a>3.如何解决</h3><blockquote><p>文件不存在情况，则补齐文件，这里就不说明了，可以使用DOCKERFILE的COPY命令。</p></blockquote><blockquote><p>文件存在情况，很简单，将原来的文件拿出来用notepad++打开，点击编辑，选择格式转换，转换为Unix格式。</p></blockquote><blockquote><p>再用该文件或者其中的内容替换linux系统中的entrypoint.sh 或其他.sh文件,再次启动docker即可，如此就可以正常调试你的entrypoint.sh脚本啦。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>我们常常忽略linux和windows的编码问题，这个问题非常严重，常常给我们带来以下不必要的问题，所以在windows和linux用到文件交互的时候.sh类型文件最好是先转码一下为Unix格式，以避免此类问题带来的困扰.</p></blockquote><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM优化</title>
      <link href="/2019/08/27/JVM%E4%BC%98%E5%8C%96/"/>
      <url>/2019/08/27/JVM%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介紹JVM以及JVM优化和FULL GC 的处理.</p></blockquote><h2 id="什么是JVM"><a href="#什么是JVM" class="headerlink" title="什么是JVM"></a><a href="#什么是JVM" title="什么是JVM"></a>什么是JVM</h2><blockquote><p>JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p></blockquote><p><img src="/images/jvm/jvm-memory.png" alt=""></p><h2 id="JVM-HEAP分区"><a href="#JVM-HEAP分区" class="headerlink" title="JVM HEAP分区"></a><a href="#JVM-HEAP分区" title="JVM HEAP分区"></a>JVM HEAP分区</h2><p><img src="/images/jvm/jvm-heap.png" alt=""></p><blockquote><p>JVM HEAP可分为三大区新生代- young generation、老年代 - old generation、永久代 - Permanent generation(也叫方法区).</p></blockquote><blockquote><p>young generation 又分为 Eden区和两个survivor区（FROM SURVIVOR 和 TO SURVIVOR），两个survivor区存放每次垃圾回收后存活的对象.</p></blockquote><p><img src="/images/jvm/jvm-heap-young.png" alt=""></p><blockquote><p>young generation主要用于存放new出来的对象，长时间未被GC回收的会进入到survivor区，如果survivor区对象长时间未被回收则会被提升到老年区，老年区一般存放比较大的对象，至于Permanent generation 则存放静态对象例如static。</p></blockquote><blockquote><p>permanent generation管理class文件、静态对象、属性等。</p></blockquote><h2 id="JVM-垃圾回收机制"><a href="#JVM-垃圾回收机制" class="headerlink" title="JVM 垃圾回收机制"></a><a href="#JVM-垃圾回收机制" title="JVM 垃圾回收机制"></a>JVM 垃圾回收机制</h2><blockquote><p>JVM垃圾回收机制采用“分代收集”：新生代采用复制算法，老年代采用标记清理算法。</p></blockquote><h2 id="JVM-复制（Copying）算法"><a href="#JVM-复制（Copying）算法" class="headerlink" title="JVM 复制（Copying）算法"></a><a href="#JVM-复制（Copying）算法" title="JVM 复制（Copying）算法"></a>JVM 复制（Copying）算法</h2><blockquote><p>将内存平均分成A、B两块，算法过程：</p></blockquote><blockquote><ol><li>新生对象被分配到A块中未使用的内存当中。当A块的内存用完了， 把A块的存活对象对象复制到B块。</li><li>清理A块所有对象。</li><li>新生对象被分配的B块中未使用的内存当中。当B块的内存用完了， 把B块的存活对象对象复制到A块。</li><li>清理B块所有对象。</li><li>goto step 1</li></ol></blockquote><p><img src="/images/jvm/jvm-copy.png" alt=""></p><h2 id="算法优化：使用Eden-S0-S1三个分区"><a href="#算法优化：使用Eden-S0-S1三个分区" class="headerlink" title="算法优化：使用Eden/S0/S1三个分区"></a><a href="#算法优化：使用Eden-S0-S1三个分区" title="算法优化：使用Eden/S0/S1三个分区"></a>算法优化：使用Eden/S0/S1三个分区</h2><blockquote><p>如上述过程，如果平均分成A/B块太浪费内存，采用Eden/S0/S1三个区更合理，空间比例为Eden:S0:S1==8:1:1，有效内存（即可分配新生对象的内存）是总内存的9/10。</p></blockquote><blockquote><p>算法过程：</p></blockquote><blockquote><ol><li>Eden+S0可分配新生对象；</li><li>对Eden+S0进行垃圾收集，存活对象复制到S1。清理Eden+S0。一次新生代GC结束。</li><li>Eden+S1可分配新生对象；</li><li>对Eden+S1进行垃圾收集，存活对象复制到S0。清理Eden+S1。二次新生代GC结束。</li><li>goto step 1</li></ol></blockquote><blockquote><p>默认Eden:S0:S1=8:1:1,因此，新生代中可以使用的内存空间大小占用新生代的9/10。</p></blockquote><blockquote><p>为什么不直接分成两个区，一个区占9/10,另一个区占1/10，这样做的原因大概有以下几种</p></blockquote><blockquote><p>1.S0与S1的区间明显较小，有效新生代空间为Eden+S0/S1，因此有效空间就大，增加了内存使用率.</p></blockquote><blockquote><p>2.有利于对象代的计算，当一个对象在S0/S1中达到设置的XX:MaxTenuringThreshold值后，会将其分到老年代中，设想一下，如果没有S0/S1,直接分成两个区，该如何计算对象经过了多少次GC还没被释放,你可能会说，在对象里加一个计数器记录经过的GC次数，或者存在一张映射表记录对象和GC次数的关系，是的，可以，但是这样的话，会扫描整个新生代中的对象, 有了S0/S1我们就可以只扫描S0/S1区了</p></blockquote><h2 id="JVM调优配置及参数说明"><a href="#JVM调优配置及参数说明" class="headerlink" title="JVM调优配置及参数说明"></a><a href="#JVM调优配置及参数说明" title="JVM调优配置及参数说明"></a>JVM调优配置及参数说明</h2><pre class="line-numbers language-t"><code class="language-t">    CMD java    //1 非标准参数配置    -Xms1024m     //指定jvm堆的初始大小，默认为物理内存的1/64，最小为1M；可以指定单位，比如k、m，若不指定，则默认为字节。     -Xmx1024m     //指定jvm堆的最大值，默认为物理内存的1/4或者1G，最小为2M；单位与-Xms一致。    -Xmn480m    //JVM中年轻态的大小 年轻态比老年态为1/1  持久态最好为64M  老年态为480 FULLCG次数会较少 但是每次FULLCG时间会较长    -Xss256K      //单个线程栈的大小 一般默认512k    //2 非stable参数    -XX:PermSize=64M                        //持久态的大小 JDK8是另一个参数设置持久态    -XX:MaxPermSize=64M     //设置持久代最大值为100m,默认为xms的1/8。MaxPermSize过小会导致：java.lang.OutOfMemoryError: PermGen space    //32位Linux和64位Linux好像不一样，64位系统似乎只要配置MaxTenuringThreshold参数。    #-XX:MaxTenuringThreshold=20     //MaxTenuringThreshold=0就是去掉了救助空间 MaxTenuringThreshold去掉，这样即没有暂停又不会有promotoin failed，而且更重要的是，年老代和永久代上升非常慢（因为好多对象到不了年老代就被回收了），所以CMS执行频率非常低，好几个小时才执行一次    -XX:SurvivorRatio=4                 //Eden区与Survivor区的大小比值4/1    /**适用情况：“对响应时间有高要求”，多CPU、对应用响应时间有较高要求的中、大型应用。举例：Web服务器/应用服务器、电信交换、集成开发环境。    响应时间优先的应用：年轻代大小选择     尽可能设大，直到接近系统的最低响应时间限制（根据实际情况选择）。在此种情况下，年轻代收集发生的频率也是最小的。同时，减少到达年老代的对象。     响应时间优先的应用：年老代大小选择     年老代使用并发收集器，所以其大小需要小心设置，一般要考虑并发会话率和会话持续时间等一些参数。如果堆设置小了，可以会造成内存碎片、高回收频率以及应用暂停而使用传统的标记清除方式；如果堆大了，则需要较长的收集时间。最优化的方案，一般需要参考以下数据获得：     **/    -XX:+UseConcMarkSweepGC                   //对老生代采用并发标记交换算法进行GC    -XX:+CMSParallelRemarkEnabled            // 降低标记停顿    -XX:CMSFullGCsBeforeCompaction=0          //由于并发收集器不对内存空间进行压缩、整理，所以运行一段时间以后会产生“碎片”，使得运行效率降低。此参数设置运行n次FullGC以后对内存空间进行压缩、整理。    -XX:CMSInitiatingOccupancyFraction=70     //表示年老代空间到70%时就开始执行CMS，确保年老代有足够的空间接纳来自年轻代的对象。 满足(Xmx-Xmn)*(100-CMSInitiatingOccupancyFraction)/100>=Xmn就不会出现promotion 内存太低不适应    -XX:+UseCMSCompactAtFullCollection        //使用并发收集器时，开启对年老代的压缩，failed    -XX:+DisableExplicitGC                    //禁止System.gc()，免得程序员误调用gc方法影响性能；     -XX:+UseParNewGC                          //对年轻代采用多线程并行回收，这样收得快；    //3 日志打印信息    -XX:+HeapDumpOnOutOfMemoryError      -XX:HeapDumpPath=/usr/aaa/dump     -Xloggc:/usr/local/mylog/heap_trace.txt     -XX:+PrintGCTimeStamps     -XX:+PrintGC     -XX:+PrintHeapAtGC    -XX:+PrintGCDetails    -Duser.timezone=Asia/Shanghai    -jar yourjarName.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JVM-如何测试调优后的性能"><a href="#JVM-如何测试调优后的性能" class="headerlink" title="JVM 如何测试调优后的性能"></a><a href="#JVM-如何测试调优后的性能" title="JVM 如何测试调优后的性能"></a>JVM 如何测试调优后的性能</h2><blockquote><p>对于linux可以使用TOP命令查看内存和CPU占用，在服务高负荷状态下，尽量出发FULL GC 查看GC日志，看new generation和old generation的GC次数和GC后的结果是否达到预期，来调试参数的配比.</p></blockquote><pre class="line-numbers language-linux"><code class="language-linux">    jmap -dump:format=b，file=heap.bin [pid]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>分析工具可以使用MAT.</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h1><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOCKER常用命令</title>
      <link href="/2019/08/27/DOCKER%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/08/27/DOCKER%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>主要介绍docker中常用的一些命令</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a><a href="#常用命令" title="常用命令"></a>常用命令</h2><pre class="line-numbers language-linux"><code class="language-linux">    docker build -t xxxx:1.0.0 . //docker 打包镜像，最后的“ .”必须要    docker push xxxx:1.0.0 //docker 推送镜像到仓库，前提是要先登录镜像库    docker pull xxxx:1.0.0 //docker 拉取镜像到本地，前提是要先登录镜像库    docker run xxxx:1.0.0 //运行docker镜像    docker images //查看当前主机下的所有镜像    docker ps     //查看运行在当前主机的所有镜像    docker stop CONTAINERID //停止某个镜像    docker rmi  xxxx:1.0.0  //通过完整镜像名删除某个镜像    docker rmi IMAGEID      //通过IMAGE ID 删除某个镜像    docker rmi `docker images | grep none| awk '{print $3}'` //删除tag为null的所有镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>以上是一些常用的docker 命令，后续会继续补充。</p></blockquote><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA常用数据集合分析</title>
      <link href="/2019/08/27/JAVA%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E9%9B%86%E5%90%88%E5%88%86%E6%9E%90/"/>
      <url>/2019/08/27/JAVA%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E9%9B%86%E5%90%88%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>主要介绍和对比JAVA常用的数据集合</p></blockquote><h2 id="常用数据集合"><a href="#常用数据集合" class="headerlink" title="常用数据集合"></a><a href="#常用数据集合" title="常用数据集合"></a>常用数据集合</h2><blockquote><p>List结构的集合类：ArrayList类，LinkedList类，Vector类，Stack类</p></blockquote><blockquote><p>Map结构的集合类：HashMap类，Hashtable类</p></blockquote><blockquote><p>Set结构的集合类：HashSet类，TreeSet类</p></blockquote><blockquote><p>Queue结构的集合：Queue接口</p></blockquote><h2 id="集合对比以及使用"><a href="#集合对比以及使用" class="headerlink" title="集合对比以及使用"></a><a href="#集合对比以及使用" title="集合对比以及使用"></a>集合对比以及使用</h2><blockquote><p>1）如果要求线程安全，使用Vector，Hashtable</p></blockquote><blockquote><p>2）如果不要求线程安全，使用ArrayList，LinkedList，HashMap</p></blockquote><blockquote><p>3)如果要求键值对，则使用HashMap，Hashtable</p></blockquote><blockquote><p>4）如果数据量很大，又要求线程安全考虑Vector</p></blockquote><h2 id="集合说明"><a href="#集合说明" class="headerlink" title="集合说明"></a><a href="#集合说明" title="集合说明"></a>集合说明</h2><blockquote><p>1．ArrayList: 元素单个，效率高，多用于查询</p></blockquote><blockquote><p>2．Vector: 元素单个，线程安全，多用于查询</p></blockquote><blockquote><p>3．LinkedList:元素单个，多用于插入和删除</p></blockquote><blockquote><p>4．HashMap: 元素成对，元素可为空</p></blockquote><blockquote><p>5．HashTable: 元素成对，线程安全，元素不可为空</p></blockquote><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a><a href="#ArrayList" title="ArrayList"></a>ArrayList</h2><blockquote><p>ArrayList底层是Object数组，所以ArrayList具有数组的查询速度快的优点以及增删速度慢的缺点。</p></blockquote><blockquote><p>LinkedList的底层是一种双向循环链表。在此链表上每一个数据节点都由三部分组成：前指针（指向前面的节点的位置&lt;&lt;&lt;）数据，后指针（指向后面的节点的位置&gt;&gt;&gt;）数据,最后一个节点的后指针指向第一个节点的前指针，形成一个循环。</p></blockquote><blockquote><p>双向循环链表的查询效率低但是增删效率高。</p></blockquote><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a><a href="#LinkedList" title="LinkedList"></a>LinkedList</h2><blockquote><p>经常用在增删操作较多而查询操作很少的情况下：队列和堆栈,比如消息队列等, 在JAVA1.5后，collection使用queue来实现队列。</p></blockquote><blockquote><p>队列：先进先出的数据结构。&gt;&gt;&gt; IN …&gt;&gt;&gt; OUT</p></blockquote><blockquote><p>栈：后进先出的数据结构。 &gt;&gt;&gt; IN …&lt;&lt;&lt; OUT</p></blockquote><blockquote><p>使用栈的时候一定不能提供方法让不是最后一个元素的元素获得出栈的机会。</p></blockquote><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a><a href="#Vector" title="Vector"></a>Vector</h2><blockquote><p>与ArrayList相似，区别是Vector是重量级的组件，使用使消耗的资源比较多，且Vector是线程安全的.</p></blockquote><h2 id="HashSet（hashMap单独一篇介绍）"><a href="#HashSet（hashMap单独一篇介绍）" class="headerlink" title="HashSet（hashMap单独一篇介绍）"></a><a href="#HashSet（hashMap单独一篇介绍）" title="HashSet（hashMap单独一篇介绍）"></a>HashSet（hashMap单独一篇介绍）</h2><blockquote><p>hashSet的底层是数组，其查询效率非常高。而且在增加和删除的时候由于运用的hashCode的比较开确定添加元素的位置，所以不存在元素的偏移，所以效率也非常高。因为hashSet查询和删除和增加元素的效率都非常高。</p></blockquote><blockquote><p>但是hashSet增删的高效率是通过花费大量的空间换来的：因为空间越大，取余数相同的情况就越小,HashSet这种算法会建立许多无用的空间,造成空间的浪费.</p></blockquote><blockquote><p>使用hashSet类时要注意，如果发生冲突，就会出现遍历整个数组的情况，这样就使得效率非常的低。</p></blockquote><blockquote><p>如将自定义类用hashSet来添加对象，一定要覆盖hashcode()和equals()，覆盖的原则是保证当两个对象hashcode返回相同的整数，而且equals()返回值为True。</p></blockquote><blockquote><p>如果没有设定equals()，就会造成返回hashCode虽然结果相同，但在程序执行的过程中会多次地调用equals()，从而影响程序执行的效率。</p></blockquote><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a><a href="#TreeSet" title="TreeSet"></a>TreeSet</h2><blockquote><p>Java中的TreeSet是Set的一个子类，TreeSet集合是用来对象元素进行排序的,同样他也可以保证元素的唯一。</p></blockquote><blockquote><p>可以按照任何顺序将元素插入该集合，当对该集合进行迭代时，各个值将自动以排序后的顺序出现。TreeSet中的元素按照升序排列，缺省是按照自然顺序进行排序，意味着TreeSet中的元素要实现Comparable接口，或者有一个自定义的比较器Comparator。</p></blockquote><blockquote><p>TreeSet底层使用的是TreeMap，TreeMap的底层实现是红黑树.</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>了解到各个集合的特性，才能在使用的时候游刃有余。</p></blockquote><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> collection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> collection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA使用枚举实现单例模式</title>
      <link href="/2019/08/27/JAVA%E4%BD%BF%E7%94%A8%E6%9E%9A%E4%B8%BE%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/08/27/JAVA%E4%BD%BF%E7%94%A8%E6%9E%9A%E4%B8%BE%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍使用Enum实现JAVA单例，以及其单例模式的使用。</p></blockquote><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a><a href="#单例模式" title="单例模式"></a>单例模式</h2><blockquote><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p></blockquote><blockquote><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p></blockquote><h2 id="枚举实现单例"><a href="#枚举实现单例" class="headerlink" title="枚举实现单例"></a><a href="#枚举实现单例" title="枚举实现单例"></a>枚举实现单例</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 单例</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> BeanContext <span class="token punctuation">{</span>        Instance<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token function">BeanContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//测试</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BeanContext b1 <span class="token operator">=</span> BeanContext<span class="token punctuation">.</span>Instance<span class="token punctuation">;</span>            b1<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BeanContext b2 <span class="token operator">=</span> BeanContext<span class="token punctuation">.</span>Instance<span class="token punctuation">;</span>            b2<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BeanContext b3 <span class="token operator">=</span> BeanContext<span class="token punctuation">.</span>Instance<span class="token punctuation">;</span>            b3<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BeanContext b4 <span class="token operator">=</span> BeanContext<span class="token punctuation">.</span>Instance<span class="token punctuation">;</span>            b4<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果</p></blockquote><pre><code>inithellohellohellohello</code></pre><blockquote><p>可以看到用非常简单的方式实现了JAVA单例，结果可以看到其实际只初始化了一次.</p></blockquote><h2 id="Enum-单例模式的应用"><a href="#Enum-单例模式的应用" class="headerlink" title="Enum 单例模式的应用"></a><a href="#Enum-单例模式的应用" title="Enum 单例模式的应用"></a>Enum 单例模式的应用</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceDemo</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 构造方法私有化         */</span>        <span class="token keyword">private</span> <span class="token function">InstanceDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 返回实例         * @return         */</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> InstanceDemo <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Singleton<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 使用枚举方法实现单利模式         */</span>        <span class="token keyword">private</span> <span class="token keyword">enum</span> Singleton <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//内部枚举类</span>            INSTANCE<span class="token punctuation">;</span>            <span class="token keyword">private</span> InstanceDemo instance<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * JVM保证这个方法绝对只调用一次             */</span>            <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstanceDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> InstanceDemo <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> instance<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简说一下常用的单例实现方式"><a href="#简说一下常用的单例实现方式" class="headerlink" title="简说一下常用的单例实现方式"></a><a href="#简说一下常用的单例实现方式" title="简说一下常用的单例实现方式"></a>简说一下常用的单例实现方式</h2><blockquote><p>单例模式有很多种实现方式，懒汉式、饿汉式、静态代码块、双重锁（多线程的情况下可以用）、静态内部类（推荐使用），这里只说一下静态内部类的实现方式.</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 私有构造</span>        <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> InnerObject<span class="token punctuation">.</span>single<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 静态内部类</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerObject</span><span class="token punctuation">{</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton single <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>单例模式的三大要点：线程安全、延迟加载、序列化与反序列化安全。</p></blockquote><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> singleton </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> enums </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大排序算法</title>
      <link href="/2019/08/27/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2019/08/27/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍常用的排序算法，常用到的排序算法有十中左右，但是在稳定性和时间空间复杂度上存在差异，有时候可以结合使用以达到最高的性能。</p></blockquote><h2 id="算法分类"><a href="#算法分类" class="headerlink" title="算法分类"></a><a href="#算法分类" title="算法分类"></a>算法分类</h2><blockquote><p>常用的排序算法有如下几种</p></blockquote><p><img src="/images/order/order-all.png" alt=""></p><blockquote><p>性能对比</p></blockquote><p><img src="/images/order/order-time-space.png" alt=""></p><blockquote><p>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</p></blockquote><blockquote><p>不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</p></blockquote><blockquote><p>时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</p></blockquote><blockquote><p>空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。</p></blockquote><blockquote><p>关于时间复杂度和空间复杂度可参看其他文档.</p></blockquote><h2 id="1-冒泡排序（dubble）"><a href="#1-冒泡排序（dubble）" class="headerlink" title="1-冒泡排序（dubble）"></a><a href="#1-冒泡排序（dubble）" title="1-冒泡排序（dubble）"></a>1-冒泡排序（dubble）</h2><blockquote><p>理解，从第一个元素开始比较相邻元素的大小，如果LEFT 大于或者小于RIGHT 则交换元素，依次交换直到最后一个元素为最大的，所有元素都重复以上步骤，除了最后一个。</p></blockquote><p><img src="/images/order/bubble.gif" alt=""></p><blockquote><p>可以发现最差的情况是原来的排序和想要的排序是反的比如想要12345..N，初始值为N..54321，那么需要交换n + n(n-1)/2次, 时间复杂度O（n^2），最好的情况时间复杂度为O（n）。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> len<span class="token operator">=</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//注意第二重循环的条件</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                      <span class="token keyword">int</span> temp<span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                      a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                      a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-选择排序（selection）"><a href="#2-选择排序（selection）" class="headerlink" title="2-选择排序（selection）"></a><a href="#2-选择排序（selection）" title="2-选择排序（selection）"></a>2-选择排序（selection）</h2><blockquote><p>1首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。<br>2然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾，以此类推，直到所有元素均排序完毕。</p></blockquote><p><img src="/images/order/selection.gif" alt=""></p><blockquote><p>根据查找过程，第一次找了N-1次才找到最高的，以此类推，其需要找的次数为N-1 + N-2 + N-3 + … N-(N-1) = N + N(N-1)/2 ，忽略常数项，所以其时间复杂度为O(N^2)</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//循环次数</span>                <span class="token keyword">int</span> value <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> position <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//找到最小的值和位置</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>                        value <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        position <span class="token operator">=</span> j<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                a <span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进行交换</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好,好处可能就是不占用额外的内存空间。</p></blockquote><p><a href="#3-插入排序（insertion）" title="3-插入排序（insertion）"></a>3-插入排序（insertion）</p><blockquote><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。</p></blockquote><blockquote><p>它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p></blockquote><blockquote><p>从第一个元素开始，该元素可以认为已经被排序；<br>取出下一个元素，在已经排序的元素序列中从后向前扫描；<br>如果该元素（已排序）大于新元素，将该元素移到下一位置；<br>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；<br>将新元素插入到该位置后；<br>重复步骤2~5。</p></blockquote><p><img src="/images/order/insertion.gif" alt=""></p><blockquote><p>可以看到，最差的情况需要移动的次数为1+2+…N = N + N(N-1)/2 （等差数列的求和公式），所以其时间复杂度为O（N^2）,最好的情况是移动N次，时间复杂度O（N）。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> len<span class="token operator">=</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单独把数组长度拿出来，提高效率</span>            <span class="token keyword">int</span> insertNum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要插入的数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//因为第一次不用，所以从1开始</span>                insertNum<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//序列元素个数</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>insertNum<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//从后往前循环，将大于insertNum的数向后移动</span>                    a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//元素向后移动</span>                    j<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>insertNum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到位置，插入当前元素</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-希尔排序（shell）"><a href="#4-希尔排序（shell）" class="headerlink" title="4-希尔排序（shell）"></a><a href="#4-希尔排序（shell）" title="4-希尔排序（shell）"></a>4-希尔排序（shell）</h2><blockquote><p>第一个时间复杂度突破O（N^2）的排序算法，是插入排序的改进，其和插入排序的区别是，他先比较距离较远的元素，所以也叫缩小增量排序。</p></blockquote><blockquote><p>其算法是对待排序记录分割若干子序列分别进行直接插入排序。</p></blockquote><blockquote><p>将数的个数设为n，取奇数k=n/2，将下标差值为k的数分为一组，构成有序序列。</p></blockquote><blockquote><p>再取k=k/2 ，将下标差值为k的书分为一组，构成有序序列。</p></blockquote><blockquote><p>重复第二步，直到k=1执行简单插入排序,其平均时间复杂度为O（n^1.3）</p></blockquote><p><img src="/images/order/shell.gif" alt=""></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单独把数组长度拿出来，提高效率</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                len <span class="token operator">=</span> len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//分组</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j <span class="token operator">+=</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//元素从第二个开始</span>                        <span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">-</span> len<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//k为有序序列最后一位的位数</span>                        <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//要插入的元素</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//从后往前遍历</span>                            array<span class="token punctuation">[</span>k<span class="token operator">+</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                            k <span class="token operator">-=</span> len<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向后移动len位</span>                        <span class="token punctuation">}</span>                        array<span class="token punctuation">[</span>k<span class="token operator">+</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-归并排序（merge）"><a href="#5-归并排序（merge）" class="headerlink" title="5-归并排序（merge）"></a><a href="#5-归并排序（merge）" title="5-归并排序（merge）"></a>5-归并排序（merge）</h2><blockquote><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。</p></blockquote><blockquote><p>1 把长度为n的输入序列分成两个长度为n/2的子序列；<br>2 对这两个子序列分别采用归并排序；<br>3 将两个排序好的子序列合并成一个最终的排序序列。</p></blockquote><p><img src="/images/order/merge.gif" alt=""></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 每组元素个数  </span>               <span class="token keyword">int</span> size <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                 <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token keyword">int</span> s <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 本次循环每组元素个数  </span>                   t <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> s<span class="token punctuation">;</span>                     <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>                     <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token punctuation">(</span>s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         i <span class="token operator">+=</span> t<span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token punctuation">(</span>s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> right<span class="token punctuation">)</span>                         <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token punctuation">(</span>s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>              <span class="token punctuation">}</span>              <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> B <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>data<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token keyword">int</span> s <span class="token operator">=</span> p<span class="token punctuation">;</span>                 <span class="token keyword">int</span> t <span class="token operator">=</span> q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                 <span class="token keyword">int</span> k <span class="token operator">=</span> p<span class="token punctuation">;</span>                 <span class="token keyword">while</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;=</span> q <span class="token operator">&amp;&amp;</span> t <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> data<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                         B<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>                         s<span class="token operator">++</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                         B<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>                         t<span class="token operator">++</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                     k<span class="token operator">++</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                     B<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token keyword">else</span>                     B<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>s<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> p<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                     data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>归并排序是一种稳定的排序方法，和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。</p></blockquote><h2 id="6-快速排序（quick）"><a href="#6-快速排序（quick）" class="headerlink" title="6-快速排序（quick）"></a><a href="#6-快速排序（quick）" title="6-快速排序（quick）"></a>6-快速排序（quick）</h2><blockquote><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p></blockquote><blockquote><p>选择第一个数为p，小于p的数放在左边，大于p的数放在右边,递归的将p左边和右边的数都按照第一步进行，直到不能递归</p></blockquote><p><img src="/images/order/quick.gif" alt=""></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>temp<span class="token punctuation">,</span>t<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">></span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            i<span class="token operator">=</span>low<span class="token punctuation">;</span>            j<span class="token operator">=</span>high<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//temp就是基准位</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//先看右边，依次往左递减</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    j<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//再看左边，依次往右递增</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">>=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//如果满足条件则交换</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    t <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//最后将基准为与i和j相等位置的数字交换</span>             arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>             arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//递归调用左半数组</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//递归调用右半数组</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-堆排序（Heap）"><a href="#7-堆排序（Heap）" class="headerlink" title="7-堆排序（Heap）"></a><a href="#7-堆排序（Heap）" title="7-堆排序（Heap）"></a>7-堆排序（Heap）</h2><blockquote><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p></blockquote><blockquote><p>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；<br>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；<br>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</p></blockquote><p><img src="/images/order/heap.gif" alt=""></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 循环建堆</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 建堆</span>                <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 交换堆顶和最后一个元素</span>                <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 交换方法</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 对data数组从0到lastIndex建大顶堆</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从lastIndex处节点（最后一个节点）的父节点开始</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>lastIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// k保存正在判断的节点</span>                <span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果当前k节点的子节点存在</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// k节点的左子节点的索引</span>                    <span class="token keyword">int</span> biggerIndex <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>biggerIndex <span class="token operator">&lt;</span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 若果右子节点的值较大</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>biggerIndex<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>biggerIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// biggerIndex总是记录较大子节点的索引</span>                            biggerIndex<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 如果k节点的值小于其较大的子节点的值</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>biggerIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 交换他们</span>                        <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> k<span class="token punctuation">,</span> biggerIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值</span>                        k <span class="token operator">=</span> biggerIndex<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-计数排序（counting）"><a href="#8-计数排序（counting）" class="headerlink" title="8-计数排序（counting）"></a><a href="#8-计数排序（counting）" title="8-计数排序（counting）"></a>8-计数排序（counting）</h2><blockquote><p>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p></blockquote><blockquote><p>找出待排序的数组中最大和最小的元素；<br>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；<br>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；<br>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</p></blockquote><p><img src="/images/order/counting.gif" alt=""></p><pre class="line-numbers language-java"><code class="language-java">    function <span class="token function">countingSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        var bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            sortedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            arrLen <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span>            bucketLen <span class="token operator">=</span> maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>var j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> bucketLen<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>sortedIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>计数排序是一个稳定的排序算法。当输入的元素是 n 个 0到 k 之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)，其排序速度快于任何比较排序算法。当k不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。</p></blockquote><h2 id="9-桶排序（Bucket）"><a href="#9-桶排序（Bucket）" class="headerlink" title="9-桶排序（Bucket）"></a><a href="#9-桶排序（Bucket）" title="9-桶排序（Bucket）"></a>9-桶排序（Bucket）</h2><blockquote><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）</p></blockquote><blockquote><p>设置一个定量的数组当作空桶；<br>遍历输入数据，并且把数据一个一个放到对应的桶里去；<br>对每个不是空的桶进行排序；<br>从不是空的桶里把排好序的数据拼接起来。</p></blockquote><p><img src="/images/order/bucket.gif" alt=""></p><blockquote><p>平均时间复杂度：O(n + k)<br>最佳时间复杂度：O(n + k)<br>最差时间复杂度：O(n ^ 2)<br>空间复杂度：O(n * k)<br>稳定性：稳定</p></blockquote><blockquote><p>可以看到，桶分的越细，桶中的数据越少，排序时间越短，但是增加了空间的占用。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    function <span class="token function">bucketSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> bucketSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        var i<span class="token punctuation">;</span>        var minValue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        var maxValue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>              minValue <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 输入数据的最小值</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>              maxValue <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 输入数据的最大值</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 桶的初始化</span>        var DEFAULT_BUCKET_SIZE <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置桶的默认数量为5</span>        bucketSize <span class="token operator">=</span> bucketSize <span class="token operator">||</span> DEFAULT_BUCKET_SIZE<span class="token punctuation">;</span>        var bucketCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue <span class="token operator">-</span> minValue<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          var buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>bucketCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buckets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 利用映射函数将数据分配到各个桶中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buckets<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minValue<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buckets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">insertionSort</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">// 对每个桶进行排序，这里使用了插入排序</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>var j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-基数排序（radix）"><a href="#10-基数排序（radix）" class="headerlink" title="10-基数排序（radix）"></a><a href="#10-基数排序（radix）" title="10-基数排序（radix）"></a>10-基数排序（radix）</h2><blockquote><p>基本思想：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序列。</p></blockquote><p><img src="/images/order/radix.gif" alt=""></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">radixSort</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">51</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 首先确定排序的趟数;</span>            <span class="token keyword">int</span> max <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    max <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断位数;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>max <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>                time<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 建立10个队列;</span>            List<span class="token operator">&lt;</span>ArrayList<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ArrayList<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>queue1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 进行time次分配和收集;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> time<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 分配数组元素;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 得到数字的第time+1位数;</span>                    <span class="token keyword">int</span> x <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue2 <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> queue2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 元素计数器;</span>                <span class="token comment" spellcheck="true">// 收集队列元素;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue3 <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                        array<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> queue3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        queue3<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        count<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><h3 id="一、稳定性"><a href="#一、稳定性" class="headerlink" title="一、稳定性:"></a><a href="#一、稳定性" title="一、稳定性:"></a>一、稳定性:</h3><blockquote><p>稳定：冒泡排序、插入排序、归并排序和基数排序</p></blockquote><p>不稳定：选择排序、快速排序、希尔排序、堆排序</p><h3 id="二、平均时间复杂度"><a href="#二、平均时间复杂度" class="headerlink" title="二、平均时间复杂度"></a><a href="#二、平均时间复杂度" title="二、平均时间复杂度"></a>二、平均时间复杂度</h3><blockquote><p>O(n^2):直接插入排序，简单选择排序，冒泡排序。<br>在数据规模较小时（9W内），直接插入排序，简单选择排序差不多。<br>当数据较大时，冒泡排序算法的时间代价最高。性能为O(n^2)的算法基本上是相邻元素进行比较，基本上都是稳定的。</p></blockquote><blockquote><p>O(nlogn):快速排序，归并排序，希尔排序，堆排序。其中，快速排序是最好的， 其次是归并和希尔，堆排序在数据量很大时效果明显。</p></blockquote><h3 id="三、排序算法的选择"><a href="#三、排序算法的选择" class="headerlink" title="三、排序算法的选择"></a><a href="#三、排序算法的选择" title="三、排序算法的选择"></a>三、排序算法的选择</h3><blockquote><p>1.数据规模较小</p></blockquote><p>（1）待排序列基本序的情况下，可以选择直接插入排序；</p><p>（2）对稳定性不作要求宜用简单选择排序，对稳定性有要求宜用插入或冒泡。</p><blockquote><p>2.数据规模不是很大</p></blockquote><p>（1）完全可以用内存空间，序列杂乱无序，对稳定性没有要求，快速排序，此时要付出log（N）的额外空间。</p><p>（2）序列本身可能有序，对稳定性有要求，空间允许下，宜用归并排序。</p><blockquote><p>3.数据规模很大</p></blockquote><p>（1）对稳定性有求，则可考虑归并排序。</p><p>（2）对稳定性没要求，宜用堆排序。</p><blockquote><p>4.序列初始基本有序（正序），宜用直接插入排序，冒泡排序。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="#参考" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/onepixel/articles/7674659.html" target="_blank" rel="noopener">十大经典排序算法</a><br><a href="https://blog.csdn.net/qq_26122557/article/details/79458649" target="_blank" rel="noopener">图文并茂的快速排序</a></p><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis搭建和简单说明</title>
      <link href="/2019/08/27/redis%E6%90%AD%E5%BB%BA%E5%92%8C%E7%AE%80%E5%8D%95%E8%AF%B4%E6%98%8E/"/>
      <url>/2019/08/27/redis%E6%90%AD%E5%BB%BA%E5%92%8C%E7%AE%80%E5%8D%95%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> nosql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java锁分类和说明</title>
      <link href="/2019/08/27/java%E9%94%81%E5%88%86%E7%B1%BB%E5%92%8C%E8%AF%B4%E6%98%8E/"/>
      <url>/2019/08/27/java%E9%94%81%E5%88%86%E7%B1%BB%E5%92%8C%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍JAVA的锁分类和简单使用</p></blockquote><h2 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a><a href="#锁分类" title="锁分类"></a>锁分类</h2><blockquote><p>其实对于 Java 锁的分类没有严格意义的规则，我们常说的分类一般都是依据锁的特性、锁的设计、锁的状态等进行归纳整理的，大概分为以下几种。</p></blockquote><blockquote><p>公平锁，非公平锁</p></blockquote><blockquote><p>可重入锁</p></blockquote><blockquote><p>互斥锁</p></blockquote><blockquote><p>乐观锁、悲观锁</p></blockquote><blockquote><p>分段锁</p></blockquote><blockquote><p>偏向锁，轻量级锁，重量级锁</p></blockquote><blockquote><p>自旋锁</p></blockquote><blockquote><p>阻塞锁</p></blockquote><blockquote><p>可中断锁</p></blockquote><h2 id="1-公平锁、非公平锁"><a href="#1-公平锁、非公平锁" class="headerlink" title="1. 公平锁、非公平锁"></a><a href="#1-公平锁、非公平锁" title="1. 公平锁、非公平锁"></a>1. 公平锁、非公平锁</h2><blockquote><p>公平锁指多个线程按照申请锁的顺序来获取锁。</p></blockquote><blockquote><p>非公平锁就是没有顺序完全随机，所以能会造成优先级反转或者饥饿现象，当线程需要重新执行时候不按申请锁的顺序执行，而是和其他线程去CPU哪里竞争执行权限获取锁，不会管你之前是先申请还是后申请的，所以是不公平，非公平的.</p></blockquote><blockquote><p>synchronized 是非公平锁，ReentrantLock（使用 CAS 和 AQS 实现） 通过构造参数可以决定是非公平锁还是公平锁，默认构造是非公平锁；<br>非公平锁的吞吐量性能比公平锁大好。</p></blockquote><h2 id="2-可重入锁：又名递归锁"><a href="#2-可重入锁：又名递归锁" class="headerlink" title="2. 可重入锁：又名递归锁"></a><a href="#2-可重入锁：又名递归锁" title="2. 可重入锁：又名递归锁"></a>2. 可重入锁：又名递归锁</h2><blockquote><p>指在同一个线程在外层方法获取锁的时候在进入内层方法会自动获取锁，synchronized 和 ReentrantLock 都是可重入锁，可重入锁可以在一定程度避免死锁，看到一段代码来了解其如何避免死锁的。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReenterableLock</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method1 running ..., sleep 2 second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// sleep method will not release the Lock</span>            <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//call synchronized method2 in synchronized method 1</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method2 running ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ReenterableLock r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReenterableLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果：<br>method1 running …, sleep 2 second<br>method2 running …</p></blockquote><blockquote><p>可以看到synchronized method1 所在线程在没有释放锁的情况下，synchronized method2 仍然可以执行，这样就避免了死锁问题.</p></blockquote><h2 id="3-独享锁、共享锁"><a href="#3-独享锁、共享锁" class="headerlink" title="3. 独享锁、共享锁"></a><a href="#3-独享锁、共享锁" title="3. 独享锁、共享锁"></a>3. 独享锁、共享锁</h2><blockquote><p>独享锁是指该锁一次只能被一个线程持有，共享锁指该锁可以被多个线程持有；synchronized 和 ReentrantLock 都是独享锁，ReadWriteLock 的读锁是共享锁，写锁是独占锁；ReentrantLock 的独享锁和共享锁也是通过 AQS 来实现的。</p></blockquote><h2 id="4-互斥锁、读写锁"><a href="#4-互斥锁、读写锁" class="headerlink" title="4. 互斥锁、读写锁"></a><a href="#4-互斥锁、读写锁" title="4. 互斥锁、读写锁"></a>4. 互斥锁、读写锁</h2><blockquote><p>其实就是独享锁、共享锁的具体说法；互斥锁实质就是 ReentrantLock，读写锁实质就是 ReadWriteLock。</p></blockquote><h2 id="5-乐观锁、悲观锁"><a href="#5-乐观锁、悲观锁" class="headerlink" title="5. 乐观锁、悲观锁"></a><a href="#5-乐观锁、悲观锁" title="5. 乐观锁、悲观锁"></a>5. 乐观锁、悲观锁</h2><blockquote><p>这个分类不是具体锁的分类，而是看待并发同步的角度；</p></blockquote><blockquote><p>悲观锁认为对于同一个数据的并发操作一定是会发生修改的（哪怕实质没修改也认为会修改），因此对于同一个数据的并发操作，悲观锁采取加锁的形式，因为悲观锁认为不加锁的操作一定有问题；</p></blockquote><blockquote><p>乐观锁则认为对于同一个数据的并发操作是不会发生修改的，在更新数据的时候会采用不断的尝试更新，乐观锁认为不加锁的并发操作是没事的；</p></blockquote><blockquote><p>由此可以看出悲观锁适合写操作非常多的场景，乐观锁适合读操作非常多的场景，不加锁会带来大量的性能提升，悲观锁在 java 中很常见，乐观锁其实就是基于 CAS 的无锁编程，譬如 java 的原子类就是通过 CAS 自旋实现的。</p></blockquote><h2 id="6-分段锁"><a href="#6-分段锁" class="headerlink" title="6. 分段锁"></a><a href="#6-分段锁" title="6. 分段锁"></a>6. 分段锁</h2><blockquote><p>实质是一种锁的设计策略，不是具体的锁，对于 ConcurrentHashMap 而言其并发的实现就是通过分段锁的形式来实现高效并发操作；当要 put 元素时并不是对整个 hashmap 加锁，而是先通过 hashcode 知道它要放在哪个分段，然后对分段进行加锁，所以多线程 put 元素时只要放在的不是同一个分段就做到了真正的并行插入，但是统计 size 时就需要获取所有的分段锁才能统计；分段锁的设计是为了细化锁的粒度。</p></blockquote><h2 id="7-偏向锁、轻量级锁、重量级锁"><a href="#7-偏向锁、轻量级锁、重量级锁" class="headerlink" title="7. 偏向锁、轻量级锁、重量级锁"></a><a href="#7-偏向锁、轻量级锁、重量级锁" title="7. 偏向锁、轻量级锁、重量级锁"></a>7. 偏向锁、轻量级锁、重量级锁</h2><blockquote><p>这种分类是按照锁状态来归纳的，并且是针对 synchronized 的，java 1.6 为了减少获取锁和释放锁带来的性能问题而引入的一种状态，其状态会随着竞争情况逐渐升级，锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后无法降为偏向锁，这种升级无法降级的策略目的就是为了提高获得锁和释放锁的效率。</p></blockquote><h2 id="8-自旋锁"><a href="#8-自旋锁" class="headerlink" title="8. 自旋锁"></a><a href="#8-自旋锁" title="8. 自旋锁"></a>8. 自旋锁</h2><blockquote><p>其实是相对于互斥锁的概念，互斥锁线程会进入 WAITING 状态和 RUNNABLE 状态的切换，涉及上下文切换、cpu 抢占等开销，自旋锁的线程一直是 RUNNABLE 状态的，一直在那循环检测锁标志位，机制不重复，但是自旋锁加锁全程消耗 cpu，起始开销虽然低于互斥锁，但随着持锁时间加锁开销是线性增长。</p></blockquote><h2 id="9-阻塞锁"><a href="#9-阻塞锁" class="headerlink" title="9. 阻塞锁"></a><a href="#9-阻塞锁" title="9. 阻塞锁"></a>9. 阻塞锁</h2><blockquote><p>让线程进入阻塞状态进行等待，当获得相应的信号（唤醒，时间） 时，才可以进入线程的准备就绪状态，准备就绪状态的所有线程，通过竞争，进入运行状态。<br>JAVA中能够进入\退出、阻塞状态或包含阻塞锁的方法有 ，synchronized 关键字（其中的重量锁），ReentrantLock，Object.wait()，notify(), LockSupport.park()、unpart().</p></blockquote><h2 id="10-可中断锁"><a href="#10-可中断锁" class="headerlink" title="10. 可中断锁"></a><a href="#10-可中断锁" title="10. 可中断锁"></a>10. 可中断锁</h2><blockquote><p>synchronized 是不可中断的，Lock 是可中断的，这里的可中断建立在阻塞等待中断，运行中是无法中断的。</p></blockquote><h2 id="附wait和sleep的区别"><a href="#附wait和sleep的区别" class="headerlink" title="附wait和sleep的区别"></a><a href="#附wait和sleep的区别" title="附wait和sleep的区别"></a>附wait和sleep的区别</h2><p><img src="/images/thread/thread-life.png" alt=""></p><blockquote><p>sleep理解为一个程序抱着锁睡觉了，锁还在他身上；wait是一个程序把锁归还给CPU,直到有人叫他（notify）去CPU哪里重新获取锁.</p></blockquote><blockquote><p>sleep() ：方法在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），该线程不丢失任何监视器的所属权，sleep() 是 Thread 类专属的静态方法，针对一个特定的线程。</p></blockquote><blockquote><p>wait() : 方法使实体所处线程暂停执行，从而使对象进入等待状态，直到被 notify() 方法通知或者 wait() 的等待的时间到。</p></blockquote><blockquote><p>sleep() : 方法使持有的线程暂停运行，从而使线程进入休眠状态，直到用interrupt 方法来打断他的休眠或者 sleep 的休眠的时间到。</p></blockquote><blockquote><p>wait() : 方法进入等待状态时<strong>会释放</strong>同步锁，而sleep()方法<strong>不会释放</strong>同步锁，所以，当一个线程无限 sleep 时又没有任何人去 interrupt 它的时候，程序就产生大麻烦，因为后面的程序无法获得徐需要执行的锁了而处于无限等待中。</p></blockquote><blockquote><p>notify() : 是用来通知线程，但在 notify() 之前线程是需要获得 lock 的，如何获取Lock,另个意思就是必须写在 synchronized(lockobj) {…} 之中。</p></blockquote><blockquote><p>wait() : 也是这个样子，一个线程需要释放某个lock，也是在其获得 lock 情况下才能够释放，所以 wait() 也需要放在 synchronized(lockobj) {…} 之中</p></blockquote><blockquote><p>sleep不出让系统资源；</p></blockquote><blockquote><p>wait是进入线程等待池等待，出让系统资源，其他线程可以占用CPU, 一般wait不会加时间限制，因为如果wait线程的运行资源不够，再出来也没用，要等待其他线程调用notify/notifyAll唤醒等待池中的所有线程，才会进入就绪队列等待OS分配系统资源。</p></blockquote><blockquote><p>sleep(milliseconds)可以用时间指定使它自动唤醒过来，如果时间不到只能调用interrupt()强行打断。</p></blockquote><blockquote><p>Thread.Sleep(0)的作用是“触发操作系统立刻重新进行一次CPU竞争”。</p></blockquote><blockquote><p>sleep必须捕获异常，而wait，notify和notifyAll不需要捕获异常。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h1><blockquote><p>java 锁的分类比较重要，了解一个锁的特性可以避免以下程序上的隐藏性问题，在锁的使用过程中需要特别的注意。</p></blockquote><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> lock </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> thread </tag>
            
            <tag> lock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-wait-and-notify使用</title>
      <link href="/2019/08/27/java-wait-and-notify%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/27/java-wait-and-notify%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>java中多线程常用到wait和notify等方法，但是对此缺乏一个清晰的认识，本文主要介绍JAVA中wait和notify以及notifyAll的使用.</p></blockquote><h2 id="Wait"><a href="#Wait" class="headerlink" title="Wait"></a><a href="#Wait" title="Wait"></a>Wait</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**         * Causes the current thread to wait until another thread invokes the         * {@link java.lang.Object#notify()} method or the         * {@link java.lang.Object#notifyAll()} method for this object.         * In other words, this method behaves exactly as if it simply         * performs the call {@code wait(0)}.         * &lt;p>         * The current thread must own this object's monitor. The thread         * releases ownership of this monitor and waits until another thread         * notifies threads waiting on this object's monitor to wake up         * either through a call to the {@code notify} method or the         * {@code notifyAll} method. The thread then waits until it can         * re-obtain ownership of the monitor and resumes execution.         * &lt;p>         * As in the one argument version, interrupts and spurious wakeups are         * possible, and this method should always be used in a loop:         * &lt;pre>         *     synchronized (obj) {         *         while (&amp;lt;condition does not hold&amp;gt;)         *             obj.wait();         *         ... // Perform action appropriate to condition         *     }         * &lt;/pre>         * This method should only be called by a thread that is the owner         * of this object's monitor. See the {@code notify} method for a         * description of the ways in which a thread can become the owner of         * a monitor.         *         * @throws  IllegalMonitorStateException  if the current thread is not         *               the owner of the object's monitor.         * @throws  InterruptedException if any thread interrupted the         *             current thread before or while the current thread         *             was waiting for a notification.  The &lt;i>interrupted         *             status&lt;/i> of the current thread is cleared when         *             this exception is thrown.         * @see        java.lang.Object#notify()         * @see        java.lang.Object#notifyAll()         */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>wait方法调用后会使持有该对象的线程把对象的控制权交出去，也就是释放锁，然后原来的线程处于等待状态.<br>wait和notify是用来做线程通信的，wait调用后必须是另一个线程中调用notify或者notifyAll来唤醒线程.<br>并且wait方法只能在拥有前对象的镜像中调用，也就是在synchronized同步代码块中调用,否则会报IllegalMonitorStateException异常.</p></blockquote><h2 id="Notify"><a href="#Notify" class="headerlink" title="Notify"></a><a href="#Notify" title="Notify"></a>Notify</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**         * Wakes up a single thread that is waiting on this object's         * monitor. If any threads are waiting on this object, one of them         * is chosen to be awakened. The choice is arbitrary and occurs at         * the discretion of the implementation. A thread waits on an object's         * monitor by calling one of the {@code wait} methods.         * &lt;p>         * The awakened thread will not be able to proceed until the current         * thread relinquishes the lock on this object. The awakened thread will         * compete in the usual manner with any other threads that might be         * actively competing to synchronize on this object; for example, the         * awakened thread enjoys no reliable privilege or disadvantage in being         * the next thread to lock this object.         * &lt;p>         * This method should only be called by a thread that is the owner         * of this object's monitor. A thread becomes the owner of the         * object's monitor in one of three ways:         * &lt;ul>         * &lt;li>By executing a synchronized instance method of that object.         * &lt;li>By executing the body of a {@code synchronized} statement         *     that synchronizes on the object.         * &lt;li>For objects of type {@code Class,} by executing a         *     synchronized static method of that class.         * &lt;/ul>         * &lt;p>         * Only one thread at a time can own an object's monitor.         *         * @throws  IllegalMonitorStateException  if the current thread is not         *               the owner of this object's monitor.         * @see        java.lang.Object#notifyAll()         * @see        java.lang.Object#wait()         */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通知某个正在等待这个对象的控制权的线程可以继续运行，注意这里唤醒的是一个单一线程使该线程重新获取这个对象的锁，获取锁并不代表就可以马上执行.<br>新唤醒的线程不会马上执行，而是和其他线程竞争执行权限，除非该线程设置了特有的线程优先级.<br>同样的必须在synchronized同步代码块中调用，否则会报IllegalMonitorStateException异常.</p></blockquote><h2 id="NotifyAll"><a href="#NotifyAll" class="headerlink" title="NotifyAll"></a><a href="#NotifyAll" title="NotifyAll"></a>NotifyAll</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**         * Wakes up all threads that are waiting on this object's monitor. A         * thread waits on an object's monitor by calling one of the         * {@code wait} methods.         * &lt;p>         * The awakened threads will not be able to proceed until the current         * thread relinquishes the lock on this object. The awakened threads         * will compete in the usual manner with any other threads that might         * be actively competing to synchronize on this object; for example,         * the awakened threads enjoy no reliable privilege or disadvantage in         * being the next thread to lock this object.         * &lt;p>         * This method should only be called by a thread that is the owner         * of this object's monitor. See the {@code notify} method for a         * description of the ways in which a thread can become the owner of         * a monitor.         *         * @throws  IllegalMonitorStateException  if the current thread is not         *               the owner of this object's monitor.         * @see        java.lang.Object#notify()         * @see        java.lang.Object#wait()         */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>唤醒等待获取此对象控制权限的所有线程，同样的这些线程不会马上执行，而是去CPU哪里竞争执行权限.<br>也必须在synchronized同步代码块中执行，，否则会报IllegalMonitorStateException异常.</p></blockquote><h2 id="使用-例子-1"><a href="#使用-例子-1" class="headerlink" title="使用-例子-1"></a><a href="#使用-例子-1" title="使用-例子-1"></a>使用-例子-1</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">package</span> com<span class="token punctuation">.</span>sefon<span class="token punctuation">.</span>gateway<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * @Description:        * @author: zhouqiang    * @version: 1.0, Apr 4, 2019    */</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutputThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>        <span class="token keyword">private</span> Object lock<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">OutputThread</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> Object lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lock <span class="token operator">=</span> lock<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>                          lock<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果此处先wait,在notify不会打印任何结果</span>                        lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">final</span> Object lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputThread</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputThread</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这是一个轮询打印数字的多线程演示，为何lock先wait再notifyAll不会打印任何东西，而必须先notify才行呢？</p></blockquote><blockquote><p>分析：如果先wait，那线程1 2先后启动，然后都wait了那这样线程1 2都会等待另一个线程来notify。<br>但是显然这个线程3是不存在的，这样就没人来唤醒这两个等待中的线程，所以wait之后的代码便不会再执行了.</p></blockquote><h2 id="使用-例子-2"><a href="#使用-例子-2" class="headerlink" title="使用-例子-2"></a><a href="#使用-例子-2" title="使用-例子-2"></a>使用-例子-2</h2><blockquote><p>再来看下面一个简单的例子</p></blockquote><blockquote><p>WaitThread只负责wait然后执行业务代码</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">package</span> com<span class="token punctuation">.</span>sefon<span class="token punctuation">.</span>gateway<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * @Description:        * @author: jackromer    * @version: 1.0, Apr 4, 2019    */</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaitThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>        <span class="token keyword">private</span> Object lock<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">WaitThread</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> Object lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lock <span class="token operator">=</span> lock<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" :wait for notify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//wait调用后, wait之后的代码就暂时不会再执行了, 必须等到其他线程notifyAll, 直到当前线程重新在CPU哪里竞争到了object的锁，当前线程的后序代码才会执行 .</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" :i have bean waked up and i get the lock from cpu, i am free ,i will continue to process..., my num is :"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>            <span class="token keyword">final</span> Object lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread waitThread1     <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WaitThread</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread waitThread2     <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WaitThread</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread waitThread3     <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WaitThread</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread notifyThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NotifyThread</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//notifyThread 用来唤醒之前wait的所有线程</span>            waitThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            waitThread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            waitThread3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此处sleep是为了让wait的三个线程先启动，后面再启动notify线程。</span>            notifyThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>NotifyThread只负责唤醒wait object的所有线程</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">package</span> com<span class="token punctuation">.</span>sefon<span class="token punctuation">.</span>gateway<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * @Description:        * @author: jackromer    * @version: 1.0, Apr 4, 2019    */</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotifyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> Object lock<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">NotifyThread</span><span class="token punctuation">(</span>Object lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lock <span class="token operator">=</span> lock<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//用于notify 所有等待此对象的线程</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意，此处notifyAll虽然唤醒了所有等待object的线程，但是不一定按之前线程的先后顺序继续执行，而是谁先去CPU哪里竞争到锁谁就先执行</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am notify thread ,i will wake up all threads which are waiting for this object."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>启动main方法运行后的结果：</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//分析：线程执行顺序分别为0 2 1，这三个线程都会等待notify</span>    Thread<span class="token operator">-</span><span class="token number">0</span> <span class="token operator">:</span>wait <span class="token keyword">for</span> notify     Thread<span class="token operator">-</span><span class="token number">2</span> <span class="token operator">:</span>wait <span class="token keyword">for</span> notify    Thread<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span>wait <span class="token keyword">for</span> notify    <span class="token comment" spellcheck="true">//notifyAll线程唤醒了线程1 2 3，1 2 3线程重新去CPU哪里获取执行权限，明显的他们抢到执行权限的顺序为2 3 1</span>    I am notify thread <span class="token punctuation">,</span>i will wake up all threads which are waiting <span class="token keyword">for</span> <span class="token keyword">this</span> object<span class="token punctuation">.</span>    Thread<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span>i have bean waked up and i get the lock from cpu<span class="token punctuation">,</span> i am free <span class="token punctuation">,</span>i will <span class="token keyword">continue</span> to process<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> my num is <span class="token operator">:</span><span class="token number">2</span>    Thread<span class="token operator">-</span><span class="token number">2</span> <span class="token operator">:</span>i have bean waked up and i get the lock from cpu<span class="token punctuation">,</span> i am free <span class="token punctuation">,</span>i will <span class="token keyword">continue</span> to process<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> my num is <span class="token operator">:</span><span class="token number">3</span>    Thread<span class="token operator">-</span><span class="token number">0</span> <span class="token operator">:</span>i have bean waked up and i get the lock from cpu<span class="token punctuation">,</span> i am free <span class="token punctuation">,</span>i will <span class="token keyword">continue</span> to process<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> my num is <span class="token operator">:</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a><a href="#线程的生命周期" title="线程的生命周期"></a>线程的生命周期</h2><p><img src="/images/thread/thread-life.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>wait notify和notifyAll如果光看注释，可能不那么容易理解，最关键的还是试验一下，会有不一样的收获，但只要记住一点这三个是用来做线程通信的，必须在同步代码块中执行，他们都是object顶层对象的方法，所以你应该清楚这三个和线程没关系而是和对象的锁有关系,而线程只是用到了锁而已关系结构可以理解为这样：<br>OBJECT（只有一个） — LOCK（只有一个） — THREADS（线程可以有很多个，但都必须用同一个对象的同一个锁）。</p></blockquote><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> wait </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-cloud简介和核心组件简介</title>
      <link href="/2019/08/27/spring-cloud%E7%AE%80%E4%BB%8B%E5%92%8C%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/08/27/spring-cloud%E7%AE%80%E4%BB%8B%E5%92%8C%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>本文主要介绍 spring cloud 以及其相关的核心组件简介，对 spring cloud 有一个比较简明清晰的认识。</p></blockquote><h2 id="组件简介"><a href="#组件简介" class="headerlink" title="组件简介"></a>组件简介</h2><h3 id="spring-cloud-Eureka"><a href="#spring-cloud-Eureka" class="headerlink" title="spring cloud Eureka"></a><a href="#spring-cloud-Eureka" title="spring cloud Eureka"></a>spring cloud Eureka</h3><blockquote><p>Spring Cloud Eureka 是 Spring Cloud Netflix 微服务套件中的 一 部分，它基于 Netflix Eureka 做了二次封装， 主要负责完成微服务架构中的服务治理功能。 Spring Cloud 通过为 Eureka 增加了 Spring Boot 风格的自动化配置，我们只需通过简单引入依赖和注解配置就能让 Spring Boot 构建的微服务应用轻松地与 Eureka 服务治理体系进行整合.</p></blockquote><h3 id="spring-cloud-Ribbon"><a href="#spring-cloud-Ribbon" class="headerlink" title="spring cloud Ribbon"></a><a href="#spring-cloud-Ribbon" title="spring cloud Ribbon"></a>spring cloud Ribbon</h3><blockquote><p>Spring Cloud Ribbon 是 一 个基于 HTTP 和 TCP 的客户端负载均衡工具，它基于 Netflix Robbon 实现。 通过 Spring Cloud 的封装，可以让我们轻松地将面向服务的 REST 模板请求自动转换成客户端负载均衡的服务调用，ribbon 主要用来做客户端负载均衡，什么是客户端负载均衡呢，我们知道 eureka 做的是服务端的负载均衡，而 ribbon 就是同样的维护了一份服务实例，这个实例来源于服务端，但是由客户端自己维护,也是通过心跳检测来剔除故障的服务端节点以保证清单中都是可以正常访问的服务端节点。</p></blockquote><blockquote><p>ribbon 的负载均衡策略有：Random Rule、Round Rule、Retry Rule、Weighted Response TimeRule、ClientConfigEnabledRoundRobinRule，其中 Weighted Response TimeRule 的算法为生成权重区间，区间宽度大占比大，访问的概率越高，而真实 REQUEST 访问时会先生成一个最小区间到最大区间的随机值，当然区间宽度大的被访问的概率就响应的大，这个区间计算是根据服务实例的访问平均时间等计算的。ClientConfigEnabledRoundRobinRule 通过遍历负载均衡器中维护的所有实例，会过滤掉故障实例，并找出发送请求数最小的一个，该策略的特性是选出最空闲的实例.</p></blockquote><h3 id="spring-cloud-Hystrix"><a href="#spring-cloud-Hystrix" class="headerlink" title="spring cloud Hystrix"></a><a href="#spring-cloud-Hystrix" title="spring cloud Hystrix"></a>spring cloud Hystrix</h3><blockquote><p>spring cloud 断路器<br>在微服务架构中， 我们将系统拆分成了很多服务单元， 各单元的应用间通过服务注册与订阅的方式互相依赖。 由于每个单元都在不同的进程中运行， 依赖通过远程调用的方式执行， 这样就有可能因为网络原因或是依赖服务自身间题出现调用故障或延迟， 而这些问题会直接导致调用方的对外服务也出现延迟， 若此时调用方的请求不断增加，最后就会因等待出现故障的依赖方响应形成任务积压，最终导致自身服务的瘫痪。</p></blockquote><blockquote><p>就好像电网中的保险丝，在线路电流过载的情况下会自动熔断，虽然像保险丝但是断路器还有比保险丝更强大的功能，除了过载，Hystrix 还具备 Hystrix 具备服务降级、 服务熔断、 线程和信号隔离、 请求缓存、 请求合并以及服务监控等强大功能，对服务延迟和故障提供了强大的容错能力。</p></blockquote><h3 id="spring-cloud-Feign"><a href="#spring-cloud-Feign" class="headerlink" title="spring cloud Feign"></a><a href="#spring-cloud-Feign" title="spring cloud Feign"></a>spring cloud Feign</h3><blockquote><p>它基于 NetflixFeign 实现，整合了 Spring Cloud 伈 bbon 与 Spring Cloud Hystrix, 除了提供这两者的强大功能之外，它还提供了 一 种声明式的 Web 服务客户端定义方式，Spring Cloud Feign 具备可插拔的注解支持，包括 Feign 注解和 JAX-RS 注解，同时它在 Netflix Feign 的基础上扩展了对 Spring MVC 的注解支待。</p></blockquote><h3 id="spring-cloud-Zuul"><a href="#spring-cloud-Zuul" class="headerlink" title="spring cloud Zuul"></a><a href="#spring-cloud-Zuul" title="spring cloud Zuul"></a>spring cloud Zuul</h3><blockquote><p>维护中….</p></blockquote><h3 id="spring-cloud-Config"><a href="#spring-cloud-Config" class="headerlink" title="spring cloud Config"></a><a href="#spring-cloud-Config" title="spring cloud Config"></a>spring cloud Config</h3><h3 id="spring-cloud-Bus"><a href="#spring-cloud-Bus" class="headerlink" title="spring cloud Bus"></a><a href="#spring-cloud-Bus" title="spring cloud Bus"></a>spring cloud Bus</h3><h3 id="spring-cloud-Stream"><a href="#spring-cloud-Stream" class="headerlink" title="spring cloud Stream"></a><a href="#spring-cloud-Stream" title="spring cloud Stream"></a>spring cloud Stream</h3><h3 id="spring-cloud-Sleuth"><a href="#spring-cloud-Sleuth" class="headerlink" title="spring cloud Sleuth"></a><a href="#spring-cloud-Sleuth" title="spring cloud Sleuth"></a>spring cloud Sleuth</h3><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring-cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红黑树原理</title>
      <link href="/2019/08/07/%E7%BA%A2%E9%BB%91%E6%95%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/08/07/%E7%BA%A2%E9%BB%91%E6%95%B0%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><blockquote><p>本文主要介绍红黑树原理，以及应用范围。</p></blockquote><h2 id="什么是二叉树"><a href="#什么是二叉树" class="headerlink" title="什么是二叉树"></a><a href="#什么是二叉树" title="什么是二叉树"></a>什么是二叉树</h2><blockquote><p>二叉查找树（BST），其特性为左分支小，右分支大，且左右子树都为二叉排序树，二叉树这里不再累述。</p></blockquote><blockquote><p>看一次二叉树的插入操作，假设初始二叉树为图一（初始数据8 9 12）</p></blockquote><p><img src="/images/tree/BST-1.png" alt=""></p><blockquote><p>现在插入数据（7 6 5 4 3）</p></blockquote><p><img src="/images/tree/BST-2.png" alt=""></p><blockquote><p>可以看到其左分支的深度在不断增加，查询的时候几乎和线性查询没有区别，比正常的二叉树查询性能降低了很多,这就需要引入红黑树来解决这种多次插入新节点而引起的不平衡.</p></blockquote><h2 id="什么是红黑树"><a href="#什么是红黑树" class="headerlink" title="什么是红黑树"></a><a href="#什么是红黑树" title="什么是红黑树"></a>什么是红黑树</h2><blockquote><p>R-B Tree，全称是Red-Black Tree，又称为“红黑树”，它一种特殊的二叉查找树。红黑树的每个节点上都有存储位表示节点的颜色，可以是红(Red)或黑(Black)。</p></blockquote><h2 id="红黑树有什么好处"><a href="#红黑树有什么好处" class="headerlink" title="红黑树有什么好处"></a><a href="#红黑树有什么好处" title="红黑树有什么好处"></a>红黑树有什么好处</h2><blockquote><p>红黑树的五条规则保证了其最长路径不超过最短路径的两倍，这样便不会出现之前的二叉树线性问题了，大大提高了二叉树查询检索的效率.</p></blockquote><h2 id="一个典型的红黑树"><a href="#一个典型的红黑树" class="headerlink" title="一个典型的红黑树"></a><a href="#一个典型的红黑树" title="一个典型的红黑树"></a>一个典型的红黑树</h2><p><img src="/images/tree/red-black-tree-01.jpg" alt=""></p><h2 id="红黑树特性"><a href="#红黑树特性" class="headerlink" title="红黑树特性"></a><a href="#红黑树特性" title="红黑树特性"></a>红黑树特性</h2><blockquote><p>红黑树的特性:<br>（1）根节点是黑色。<br>（2）每个节点或者是黑色，或者是红色。<br>（3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]<br>（4）如果一个节点是红色的，则它的子节点必须是黑色的。<br>（5）从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。</p></blockquote><h2 id="红黑树的应用"><a href="#红黑树的应用" class="headerlink" title="红黑树的应用"></a><a href="#红黑树的应用" title="红黑树的应用"></a>红黑树的应用</h2><blockquote><p>定理:一棵含有n个节点的红黑树的高度至多为2log(n+1), 即 h &lt;= 2log(n+1)，2作为常数，log的底数对其影响更大，则忽略常数2和 1，其时间复杂度为O（log n）.</p></blockquote><blockquote><p>红黑树的应用比较广泛，主要是用它来存储有序的数据，它的时间复杂度是O(Log n)，效率非常之高。<br>例如，Java集合中的TreeSet和TreeMap，C++ STL中的set、map，以及Linux虚拟内存的管理，，都是通过红黑树去实现的，JDK8 hashmap的链表也用了红黑树。</p></blockquote><h2 id="红黑树插入新节点"><a href="#红黑树插入新节点" class="headerlink" title="红黑树插入新节点"></a><a href="#红黑树插入新节点" title="红黑树插入新节点"></a>红黑树插入新节点</h2><blockquote><p>试着插入为值为14的新节点，由于父节点为15且是黑色节点，这并没有破坏红黑树的结构，不需要做出任何的改变.</p></blockquote><p><img src="/images/tree/red-black-tree-02.jpg" alt=""></p><blockquote><p>再来看如果插入的值是21的新节点，可以看到由于原来的父节点22是红色的，21节点也是红色，这打破了红黑树规则4（即：红节点的子节点全为黑），所以需要对红黑树进行调整，调整有两种方式，change color 和左右旋转.</p></blockquote><p><img src="/images/tree/red-black-tree-03.jpg" alt=""></p><h2 id="红黑树再平衡-CHANGE-COLOR"><a href="#红黑树再平衡-CHANGE-COLOR" class="headerlink" title="红黑树再平衡-CHANGE COLOR"></a><a href="#红黑树再平衡-CHANGE-COLOR" title="红黑树再平衡-CHANGE COLOR"></a>红黑树再平衡-CHANGE COLOR</h2><blockquote><p>为了让新插入后的红黑树符合规则，会采取对节点红变黑或者黑变红的方式，下面介绍上面的插入21时候的变色方式。</p></blockquote><p><img src="/images/tree/red-black-tree-03.jpg" alt=""></p><blockquote><p>第一步:其中25不是根节点，21-22 连续红色，不满足规则4（即：红节点的子节点全为黑），但由于21子节点已经是黑色NIL，无法改变颜色了，所以需要把22红变黑来满足规则4。</p></blockquote><p><img src="/images/tree/red-black-tree-04.jpg" alt=""></p><blockquote><p>第二步：变色后又不符合规则5（即：一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点），明显的25-22-NIL出现了3个黑色节点，大于了25-27-NIL的两个黑色节点，所以需要把25节点也变成红色，来满足规则5。</p></blockquote><p><img src="/images/tree/red-black-tree-05.jpg" alt=""></p><blockquote><p>第三步: 25变成红色后，由于25-27又是连续红色，同理继续将27变为黑色，这样通过多次变色便后，新插入的部分数据终于满足了红黑树的规则，成为一个新的红黑树，剩余的再平衡由左右旋来解决。</p></blockquote><p><img src="/images/tree/red-black-tree-06.jpg" alt=""></p><h2 id="红黑树再平衡-左右旋转"><a href="#红黑树再平衡-左右旋转" class="headerlink" title="红黑树再平衡-左右旋转"></a><a href="#红黑树再平衡-左右旋转" title="红黑树再平衡-左右旋转"></a>红黑树再平衡-左右旋转</h2><h2 id="左旋之篡位"><a href="#左旋之篡位" class="headerlink" title="左旋之篡位"></a><a href="#左旋之篡位" title="左旋之篡位"></a>左旋之篡位</h2><blockquote><p>有一个boss，有左右副手，左右副手也都有左右下级，假设右边的级别比左边高，右边在同级中排第一，左边排第二。</p></blockquote><blockquote><p>有一天boss右副手篡位了，带着他的下级升级，原来的右副手的右副手，<strong>跳级提升</strong>为现在的右副手，而原来的右副手的左副手<strong>同级提升</strong>，升级为原来boss的右副手</p></blockquote><blockquote><p>瘦死的骆驼比马大，原来的boss虽然变为了左副手，但他还是管着篡位者的左副手的，原来的boss的下级就比较惨了，跟着boss待在地位比较低下的BOSS的左边。[右旋之篡位可以思考一下，和左旋是同一个道理，参照变成了左边的权利比右边权利高而已]</p></blockquote><blockquote><p>篡权方变化：<br>原右副手-篡权者 &gt;&gt;&gt; 现在的boss &gt;&gt;&gt;跳一级<br>原右副手的右副手 &gt;&gt;&gt; 现在的boss的右副手 &gt;&gt;&gt;跳一级<br>原右副手的左副手 &gt;&gt;&gt; 现在左副手的右副手（即：原boss的右副手）&gt;&gt;&gt;同级提升</p></blockquote><blockquote><p>可怜方变化：<br>原boss-可怜人 》》》 现在boss的左副手 》》》降一级<br>原boss的左副手 》》》 现在左副手的左副手（即：原来boss的左副手）》》》降一级之后，还被同级下降，祸不单行。</p></blockquote><h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a><a href="#左旋" title="左旋"></a>左旋</h3><p><img src="/images/tree/red-black-tree-left.webp" alt=""></p><blockquote><p>逆时针旋转两个节点,使得父节点被自己的右孩子取代，而自己却成为了自己的左孩子，我的理解是<strong>降级为左，升级为右，右边权力高</strong>，即降了一个等级，自己被右副手取代，但是原来的右副手的左下级和你的左副手还是归你管。</p></blockquote><blockquote><p>再明白点儿就是，右副手抢了你的位置，你和你原来你的左副手都降了一级，而右副手和右副手的左右副手都升了一级。</p></blockquote><blockquote><p>再简明一点儿就是右副手篡位了，他的下级都升级了（右下级升一级，左下级同级提升为右副手），而原来的BOSS和他的手下都降了一级或更多级，这样应该比较好理解，图中的ABC可以看成一些隐藏的二叉树，并不代表值为 a b c.</p></blockquote><p><img src="/images/tree/red-black-tree-07.jpg" alt=""></p><blockquote><p>还有一种理解方式，那就是平面左旋，即X Y a b c 都按逆时针旋转90度.</p></blockquote><p><img src="/images/tree/red-black-tree-07.jpg" alt=""></p><h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a><a href="#右旋" title="右旋"></a>右旋</h3><p><img src="/images/tree/red-black-tree-right.webp" alt=""></p><blockquote><p>顺时针旋转X Y 节点使得父节点被左孩子取代，而自己成为自己的右孩子，我的理解是<strong>降级为右，升级为左，左边权力高</strong>，即降了一个等级，自己被左副手取代，但是原来的左副手的下级（左副手的右副手）和你的右副手还是归你管。</p></blockquote><blockquote><p>再明白点儿就是，左副手抢了你的位置，你和你原来的右副手都降了一级或更多级，而左副手和左副手的左右副手都升了一级。</p></blockquote><blockquote><p>再简明一点儿就是左副手篡位了，他的下级都升级了（左下级升一级，右下级同级提升为左副手），而原来的BOSS和他的手下都降了一级或者更多级，这样应该比较好理解，图中的ABC可以看成一些隐藏的二叉树，并不代表值为 a b c.</p></blockquote><p><img src="/images/tree/red-black-tree-08.jpg" alt=""></p><blockquote><p>还有一种理解方式，那就是平面右旋，即X Y a b c 都按顺时针旋转90度,交换位置.</p></blockquote><p><img src="/images/tree/red-black-tree-08.jpg" alt=""></p><h2 id="红黑树的插入与调整"><a href="#红黑树的插入与调整" class="headerlink" title="红黑树的插入与调整"></a><a href="#红黑树的插入与调整" title="红黑树的插入与调整"></a>红黑树的插入与调整</h2><blockquote><p>因为要满足红黑树的这五条性质，如果我们插入的是黑色节点，那就违反了性质五，需要进行大规模调整；<br>如果我们插入的是红色节点，那就只有在要插入节点的父节点也是红色的时候违反性质四或者当插入的节点是根节点时，违反性质二。<br>所以，我们把要插入的节点的颜色变成红色。</p></blockquote><h3 id="不需要调整"><a href="#不需要调整" class="headerlink" title="不需要调整"></a><a href="#不需要调整" title="不需要调整"></a>不需要调整</h3><blockquote><p>1、当插入的节点是根节点时，直接涂黑即可；<br>2、当要插入的节点的父节点是黑色的时候，这个时候插入一个红色的节点并没有对这五个性质产生破坏,所以直接插入不用在进行调整操作。</p></blockquote><h3 id="需要调整"><a href="#需要调整" class="headerlink" title="需要调整"></a><a href="#需要调整" title="需要调整"></a>需要调整</h3><blockquote><p>即插入节点的父结点也是红色。</p></blockquote><blockquote><p>因为左右对称的缘故，在此只讨论父结点P位于祖父节点G的左支LEFT的情况（N 为插入节点）：</p></blockquote><blockquote><p>1 叔叔节点是红色，<br>这时候只进行换色操作：将父结点和叔叔节点涂成黑色，祖父节点涂成红色,P U &gt;&gt;&gt; BLACK ，G &gt;&gt;&gt; RED。</p></blockquote><p><img src="/images/tree/red-black-tree-change1.webp" alt=""></p><blockquote><p>2 叔叔节点U是黑色，插入节点N位于父节点的右支<br>这时候需要将父结点P当成新的插入节点，并以P为支点进行左旋操作（P G连线断开，绕一圈连接到N，N左旋一圈，连接到G），P &gt;&gt;&gt; LEFT，然后和情况三一样处理。</p></blockquote><p><img src="/images/tree/red-black-tree-change2.webp" alt=""></p><blockquote><p>3 叔叔节点U是黑色，插入节点N位于父结点P的左支<br>这时候需要先进行换色操作：将父结点涂成黑色，祖父节点涂成红色，然后进行右旋操作。P &gt;&gt;&gt; BLACK，G &gt;&gt;&gt; RED, G &gt;&gt;&gt; RIGHT。</p></blockquote><p><img src="/images/tree/red-black-tree-change3.webp" alt=""></p><h2 id="红黑树的删除与调整"><a href="#红黑树的删除与调整" class="headerlink" title="红黑树的删除与调整"></a><a href="#红黑树的删除与调整" title="红黑树的删除与调整"></a>红黑树的删除与调整</h2><blockquote><p>如果被删除结点有孩子，则需要选一个合适的孩子节点作为新的根节点，称为当前节点。<br>1、只有左孩子或只有右孩子，则让该孩子作为当前节点替代被删除结点；<br>2、左右孩子均存在，则用被删除结点的中序后继结点作为当前节点替代被删除结点。<br>注意：替代只是值的互换，颜色不变。</p></blockquote><blockquote><p>即：当前节点是黑色，被删除结点是红色。替换后，当前节点位于被删除结点的位置，是红色；被删除结点位于当前节点原来的位置，是黑色。</p></blockquote><h3 id="不需要调整的情况："><a href="#不需要调整的情况：" class="headerlink" title="不需要调整的情况："></a><a href="#不需要调整的情况：" title="不需要调整的情况："></a>不需要调整的情况：</h3><p>1、被删除结点的是红色的。<br>2、被删除结点只有一个孩子，用孩子的值替换被删除节点，删除孩子结点。</p><h3 id="需要调整的情况：（被删除节点为黑色）"><a href="#需要调整的情况：（被删除节点为黑色）" class="headerlink" title="需要调整的情况：（被删除节点为黑色）"></a><a href="#需要调整的情况：（被删除节点为黑色）" title="需要调整的情况：（被删除节点为黑色）"></a>需要调整的情况：（被删除节点为黑色）</h3><blockquote><p>因为左右对称的缘故，在此只讨论父结点位于祖父节点的左支的情况：</p></blockquote><blockquote><p>1、兄弟节点为<strong>红色</strong><br>这时候需要互换父结点和兄弟节点的颜色，并进行左旋操作。<strong>P B 互换颜色 &gt; LEFT</strong></p></blockquote><p><img src="/images/tree/red-black-tree-change4.webp" alt=""></p><blockquote><p>2、兄弟节点为<strong>黑色</strong>，且其左右孩子也为<strong>黑色</strong><br>将兄弟节点涂成红色，再将父结点当成新的被删除结点（只是当成，并不删除）进行一次调整（右图中少了根节点的左孩子被删除元素）。<strong>B 变红 ,P 当成新的删除节点</strong></p></blockquote><p><img src="/images/tree/red-black-tree-change5.webp" alt=""></p><blockquote><p>3、兄弟节点为<strong>黑色</strong>，且其左孩子为<strong>红色</strong><br>先换色：左孩子涂成黑色，兄弟节点涂成红色；再以兄弟节点为支点右旋（b和a连线断开，右旋到c和c连接，c右旋到a和a连接）。变成情况4 <strong>B-L变黑，B变红，再以B RIGHT &gt;&gt;&gt; 情况4</strong></p></blockquote><p><img src="/images/tree/red-black-tree-change6.webp" alt=""></p><blockquote><p>4、兄弟节点为<strong>黑色</strong>，且其右孩子为<strong>红色</strong><br>先换色：父结点的颜色赋给兄弟节点，父结点涂成黑色，兄弟节点的右孩子涂成黑色；再左旋（右图中a 的左孩子是被删除元素）。<strong>P-C &gt; B-C ,P &gt;BLACK,B-R &gt; BLACK &gt;&gt;&gt;LEFT</strong></p></blockquote><p><img src="/images/tree/red-black-tree-change7.webp" alt=""></p><h2 id="左右旋的使用"><a href="#左右旋的使用" class="headerlink" title="左右旋的使用"></a><a href="#左右旋的使用" title="左右旋的使用"></a>左右旋的使用</h2><blockquote><p>以刚才插入21节点时为栗子，我们知道经过变色后，成了下面的模样。</p></blockquote><p><img src="/images/tree/red-black-tree-10.jpg" alt=""></p><blockquote><p>此时出现一个问题，节点17-25都为红色，这违背了规则4（即：红节点的子节点都为黑），试一下把17变为黑色，这又违背了规则5（即：从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点）。</p></blockquote><blockquote><p>因为17变黑后，13-17-15-NIL 全为黑4个黑色 大于了13-8-11-NIL的三个黑色，更加不可能把根节点13变为红色了，单靠CHANGE COLOR已经无法解决问题了。</p></blockquote><blockquote><p>需要用到旋转来解决，先试一下把13当X，17当Y，我们先来左旋try一下，得到下图初始结果，为什么左旋而不是右旋呢，明显的图中，左边部分太过突出了，突出了就需要被旋转一下。</p></blockquote><p><img src="/images/tree/red-black-tree-11.jpg" alt=""></p><blockquote><p>此时根节点为17，是红色的，根据规则1（即：根节点必须为黑色），需要变为黑色，其他节点根据规则变色，得到下图的结果。</p></blockquote><p><img src="/images/tree/red-black-tree-12.jpg" alt=""></p><blockquote><p>但此时仍然有一个问题，就是根据规则5（即：从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点），明显此时17-13-8-1-6-NIL包括了4个黑色节点，而其他路径中，比如17-13-15-NIL只存在三个黑色节点，此时又需要旋转。</p></blockquote><blockquote><p>再Try一下右旋，将13作X 8作Y进行右旋，得到如下的结果，为什么右旋而不是左旋呢，明显的图中，左边部分太过突出了，突出了就需要被旋转一下。</p></blockquote><p><img src="/images/tree/red-black-tree-13.jpg" alt=""></p><blockquote><p>但是还有些节点颜色不对，根据规则4（即：红节点的子节点全为黑色），需要对相应的节点进行变色，达到规范，最终形成如下的新平衡红黑树。</p></blockquote><p><img src="/images/tree/red-black-tree-14.jpg" alt=""></p><h2 id="为什么需要再平衡"><a href="#为什么需要再平衡" class="headerlink" title="为什么需要再平衡"></a><a href="#为什么需要再平衡" title="为什么需要再平衡"></a>为什么需要再平衡</h2><blockquote><p>通过上诉说明，我们可以看出，在新插入数据的时候，对红黑树的再平衡过程是比较复杂的，如此复杂的再平衡目的为何，其实是为了满足红黑树规则，让红黑树具备快速查找的能力，而不是像普通二叉树一样在线性数据插入时候造成性能问题。</p></blockquote><h2 id="再平衡规则"><a href="#再平衡规则" class="headerlink" title="再平衡规则"></a><a href="#再平衡规则" title="再平衡规则"></a>再平衡规则</h2><blockquote><p>从上图中的左右两次旋转可以看到，在变色无法处理的情况下，不管左旋还是右旋都是有规律的，其目的就是让红黑树尽量小的线性延伸，尽量缩短查找时需要访问的节点深度，简明点儿说，谁突出，谁挨打，用一个成语解释叫<strong>首当其冲</strong>。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#总结" title="总结"></a>总结</h2><blockquote><p>此文不介绍红黑树的实现，只介绍其性质和原理、应用，以及和普通二叉树的区别。</p></blockquote><p><a href="https://www.jianshu.com/p/104ae8092bda" target="_blank" rel="noopener">参考：红黑树快速实现</a><br><a href="http://www.360doc.com/content/18/0904/19/25944647_783893127.shtml" target="_blank" rel="noopener">参考：5分钟了解红黑树</a></p><blockquote><p>一盏灯， 一片昏黄； <strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> red-black-tree </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
